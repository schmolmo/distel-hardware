
/var/folders/l7/8zwbnrhd667_66vjxqzt_9680000gn/T/arduino_build_452123/Distel.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	e7 c0       	rjmp	.+462    	; 0x1d0 <__ctors_end>
       2:	f5 cb       	rjmp	.-2070   	; 0xfffff7ee <__eeprom_end+0xff7ef7ee>
       4:	1b cc       	rjmp	.-1994   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
       6:	09 c1       	rjmp	.+530    	; 0x21a <__bad_interrupt>
       8:	08 c1       	rjmp	.+528    	; 0x21a <__bad_interrupt>
       a:	07 c1       	rjmp	.+526    	; 0x21a <__bad_interrupt>
       c:	06 c1       	rjmp	.+524    	; 0x21a <__bad_interrupt>
       e:	05 c1       	rjmp	.+522    	; 0x21a <__bad_interrupt>
      10:	04 c1       	rjmp	.+520    	; 0x21a <__bad_interrupt>
      12:	3b cc       	rjmp	.-1930   	; 0xfffff88a <__eeprom_end+0xff7ef88a>
      14:	02 c1       	rjmp	.+516    	; 0x21a <__bad_interrupt>
      16:	80 ce       	rjmp	.-768    	; 0xfffffd18 <__eeprom_end+0xff7efd18>
      18:	b1 ce       	rjmp	.-670    	; 0xfffffd7c <__eeprom_end+0xff7efd7c>
      1a:	ff c0       	rjmp	.+510    	; 0x21a <__bad_interrupt>
      1c:	fe c0       	rjmp	.+508    	; 0x21a <__bad_interrupt>
      1e:	fd c0       	rjmp	.+506    	; 0x21a <__bad_interrupt>
      20:	fc c0       	rjmp	.+504    	; 0x21a <__bad_interrupt>
      22:	fb c0       	rjmp	.+502    	; 0x21a <__bad_interrupt>
      24:	fa c0       	rjmp	.+500    	; 0x21a <__bad_interrupt>

00000026 <__trampolines_end>:
__trampolines_start():
      26:	40 40       	sbci	r20, 0x00	; 0
      28:	20 20       	and	r2, r0
      2a:	08 04       	cpc	r0, r8
      2c:	02 02       	muls	r16, r18

0000002e <scroll_remap>:
      2e:	19 12 18 14 15 bb 16 11 17 13 1a                    ...........

00000039 <extended_key>:
      39:	12 bb 7c 04 14 09 11 0b 1f 0c 27 0d 2f 0e 7e 0f     ..|.......'./.~.
      49:	6c 11 69 12 7d 13 7a 14 6b 15 74 16 75 17 72 18     l.i.}.z.k.t.u.r.
      59:	70 19 71 1a 5a 2b 4a 2f 4d 79 15 7a 3b 7b 34 7c     p.q.Z+J/My.z;{4|
      69:	23 7d 32 7e 21 7f 50 80 48 81 2b 82 40 83 10 84     #}2~!.P.H.+.@...
      79:	3a 85 38 86 30 87 28 88 20 89 18 8a 37 8c 3f 8d     :.8.0.(. ...7.?.
      89:	5e 90                                               ^.

0000008b <single_key>:
      8b:	77 01 7e 02 58 03 12 06 59 07 14 08 11 0a 84 10     w.~.X...Y.......
      9b:	76 1b 66 1c 0d 1d 5a 1e 29 1f 70 20 69 21 72 22     v.f...Z.).p i!r"
      ab:	7a 23 6b 24 73 25 74 26 6c 27 75 28 7d 29 71 2a     z#k$s%t&l'u(})q*
      bb:	79 2c 7b 2d 7c 2e 0f 3f 45 30 16 31 1e 32 26 33     y,{-|..?E0.1.2&3
      cb:	25 34 2e 35 36 36 3d 37 3e 38 46 39 52 3a 41 3b     %4.566=7>8F9R:A;
      db:	4e 3c 49 3d 4a 3e 0e 40 1c 41 32 42 21 43 23 44     N<I=J>.@.A2B!C#D
      eb:	24 45 2b 46 34 47 33 48 43 49 3b 4a 42 4b 4b 4c     $E+F4G3HCI;JBKKL
      fb:	3a 4d 31 4e 44 4f 4d 50 15 51 2d 52 1b 53 2c 54     :M1NDOMP.Q-R.S,T
     10b:	3c 55 2a 56 1d 57 22 58 35 59 1a 5a 4c 5b 5d 5c     <U*V.W"X5Y.ZL[]\
     11b:	54 5d 5b 5e 55 5f 61 8b 05 61 06 62 04 63 0c 64     T][^U_a..a.b.c.d
     12b:	03 65 0b 66 83 67 0a 68 01 69 09 6a 78 6b 07 6c     .e.f.g.h.i.jxk.l
     13b:	08 6d 10 6e 18 6f 20 70 28 71 30 72 38 73 40 74     .m.n.o p(q0r8s@t
     14b:	48 75 50 76 57 77 5f 78 6d 60 51 91 13 92 6a 93     HuPvWw_xm`Q...j.
     15b:	64 94 67 95 f2 96 f1 97 63 98 62 99 5f a0           d.g.....c.b._.

00000169 <digital_pin_to_timer_PGM>:
	...
     171:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00        ...............

00000180 <digital_pin_to_bit_mask_PGM>:
     180:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     190:	04 08 10 20 40 80 40                                ... @.@

00000197 <digital_pin_to_port_PGM>:
     197:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1a7:	03 03 03 03 02 02 03                                .......

000001ae <port_to_input_PGM>:
     1ae:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

000001b8 <port_to_output_PGM>:
     1b8:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

000001c2 <port_to_mode_PGM>:
     1c2:	00 00 00 00 37 00 34 00 31 00                       ....7.4.1.

000001cc <__ctors_start>:
__ctors_start():
     1cc:	6d 07       	cpc	r22, r29
     1ce:	ec 0e       	add	r14, r28

000001d0 <__ctors_end>:
__dtors_end():
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf e5       	ldi	r28, 0x5F	; 95
     1d6:	d4 e0       	ldi	r29, 0x04	; 4
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     1dc:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     1de:	a0 e6       	ldi	r26, 0x60	; 96
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     1e2:	e2 ef       	ldi	r30, 0xF2	; 242
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     1e4:	fe e1       	ldi	r31, 0x1E	; 30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     1e8:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     1ea:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     1ec:	a6 37       	cpi	r26, 0x76	; 118
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     1ee:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0xc>

000001f2 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1f2:	22 e0       	ldi	r18, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1f4:	a6 e7       	ldi	r26, 0x76	; 118
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1fc:	a6 36       	cpi	r26, 0x66	; 102
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1fe:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>

00000202 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     202:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     204:	c8 ee       	ldi	r28, 0xE8	; 232
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     206:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     208:	03 c0       	rjmp	.+6      	; 0x210 <__do_global_ctors+0xe>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     20a:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     20c:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     20e:	69 de       	rcall	.-814    	; 0xfffffee2 <__eeprom_end+0xff7efee2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     210:	c6 3e       	cpi	r28, 0xE6	; 230
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     212:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     214:	d1 f7       	brne	.-12     	; 0x20a <__do_global_ctors+0x8>
     216:	39 de       	rcall	.-910    	; 0xfffffe8a <__eeprom_end+0xff7efe8a>
     218:	6a ce       	rjmp	.-812    	; 0xfffffeee <__eeprom_end+0xff7efeee>

0000021a <__bad_interrupt>:
__bad_interrupt():
     21a:	f2 ce       	rjmp	.-540    	; 0x0 <__vectors>

0000021c <Encoder::Encoder(unsigned char, unsigned char)>:
_ZN7EncoderC2Ehh():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:79
} Encoder_internal_state_t;

class Encoder
{
public:
	Encoder(uint8_t pin1, uint8_t pin2) {
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	ec 01       	movw	r28, r24
     226:	06 2f       	mov	r16, r22
     228:	14 2f       	mov	r17, r20
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:81
		#ifdef INPUT_PULLUP
		pinMode(pin1, INPUT_PULLUP);
     22a:	62 e0       	ldi	r22, 0x02	; 2
     22c:	80 2f       	mov	r24, r16
     22e:	b8 db       	rcall	.-2192   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:82
		pinMode(pin2, INPUT_PULLUP);
     230:	62 e0       	ldi	r22, 0x02	; 2
     232:	81 2f       	mov	r24, r17
     234:	b5 db       	rcall	.-2198   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:89
		pinMode(pin1, INPUT);
		digitalWrite(pin1, HIGH);
		pinMode(pin2, INPUT);
		digitalWrite(pin2, HIGH);
		#endif
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
     236:	60 2f       	mov	r22, r16
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	fb 01       	movw	r30, r22
     23c:	e9 56       	subi	r30, 0x69	; 105
     23e:	fe 4f       	sbci	r31, 0xFE	; 254
     240:	e4 91       	lpm	r30, Z
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	ee 0f       	add	r30, r30
     246:	ff 1f       	adc	r31, r31
     248:	e2 55       	subi	r30, 0x52	; 82
     24a:	fe 4f       	sbci	r31, 0xFE	; 254
     24c:	85 91       	lpm	r24, Z+
     24e:	94 91       	lpm	r25, Z
     250:	99 83       	std	Y+1, r25	; 0x01
     252:	88 83       	st	Y, r24
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:90
		encoder.pin1_bitmask = PIN_TO_BITMASK(pin1);
     254:	fb 01       	movw	r30, r22
     256:	e0 58       	subi	r30, 0x80	; 128
     258:	fe 4f       	sbci	r31, 0xFE	; 254
     25a:	e4 91       	lpm	r30, Z
     25c:	ec 83       	std	Y+4, r30	; 0x04
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:91
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
     25e:	41 2f       	mov	r20, r17
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	fa 01       	movw	r30, r20
     264:	e9 56       	subi	r30, 0x69	; 105
     266:	fe 4f       	sbci	r31, 0xFE	; 254
     268:	e4 91       	lpm	r30, Z
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	ee 0f       	add	r30, r30
     26e:	ff 1f       	adc	r31, r31
     270:	e2 55       	subi	r30, 0x52	; 82
     272:	fe 4f       	sbci	r31, 0xFE	; 254
     274:	85 91       	lpm	r24, Z+
     276:	94 91       	lpm	r25, Z
     278:	9b 83       	std	Y+3, r25	; 0x03
     27a:	8a 83       	std	Y+2, r24	; 0x02
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:92
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
     27c:	fa 01       	movw	r30, r20
     27e:	e0 58       	subi	r30, 0x80	; 128
     280:	fe 4f       	sbci	r31, 0xFE	; 254
     282:	e4 91       	lpm	r30, Z
     284:	ed 83       	std	Y+5, r30	; 0x05
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:93
		encoder.position = 0;
     286:	1f 82       	std	Y+7, r1	; 0x07
     288:	18 86       	std	Y+8, r1	; 0x08
     28a:	19 86       	std	Y+9, r1	; 0x09
     28c:	1a 86       	std	Y+10, r1	; 0x0a
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:97
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
     28e:	80 ed       	ldi	r24, 0xD0	; 208
     290:	97 e0       	ldi	r25, 0x07	; 7
     292:	51 db       	rcall	.-2398   	; 0xfffff936 <__eeprom_end+0xff7ef936>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:99
		uint8_t s = 0;
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
     294:	e8 81       	ld	r30, Y
     296:	f9 81       	ldd	r31, Y+1	; 0x01
     298:	90 81       	ld	r25, Z
     29a:	8c 81       	ldd	r24, Y+4	; 0x04
     29c:	98 23       	and	r25, r24
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <Encoder::Encoder(unsigned char, unsigned char)+0x88>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:100
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
     2a4:	ea 81       	ldd	r30, Y+2	; 0x02
     2a6:	fb 81       	ldd	r31, Y+3	; 0x03
     2a8:	90 81       	ld	r25, Z
     2aa:	2d 81       	ldd	r18, Y+5	; 0x05
     2ac:	92 23       	and	r25, r18
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <Encoder::Encoder(unsigned char, unsigned char)+0x96>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:100 (discriminator 1)
     2b0:	82 60       	ori	r24, 0x02	; 2
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:101
		encoder.state = s;
     2b2:	8e 83       	std	Y+6, r24	; 0x06
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:107
#ifdef ENCODER_USE_INTERRUPTS
		interrupts_in_use = attach_interrupt(pin1, &encoder);
		interrupts_in_use += attach_interrupt(pin2, &encoder);
#endif
		//update_finishup();  // to force linker to include the code (does not work)
	}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <Encoder::update(Encoder_internal_state_t*)>:
_ZN7Encoder6updateEP24Encoder_internal_state_t():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:216
	// but it is public to allow static interrupt routines.
	// DO NOT call update() directly from sketches.
#if defined(IRAM_ATTR)
	static IRAM_ATTR void update(Encoder_internal_state_t *arg) {
#else
	static void update(Encoder_internal_state_t *arg) {
     2be:	dc 01       	movw	r26, r24
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:301
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     2c0:	ed 91       	ld	r30, X+
     2c2:	fd 91       	ld	r31, X+
     2c4:	80 81       	ld	r24, Z
     2c6:	ed 91       	ld	r30, X+
     2c8:	fd 91       	ld	r31, X+
     2ca:	90 81       	ld	r25, Z
     2cc:	ed 91       	ld	r30, X+
     2ce:	fd 91       	ld	r31, X+
     2d0:	6c 91       	ld	r22, X
     2d2:	63 70       	andi	r22, 0x03	; 3
     2d4:	8e 23       	and	r24, r30
     2d6:	09 f0       	breq	.+2      	; 0x2da <L1661>
     2d8:	64 60       	ori	r22, 0x04	; 4

000002da <L1661>:
     2da:	9f 23       	and	r25, r31
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <L1662>
     2de:	68 60       	ori	r22, 0x08	; 8

000002e0 <L1662>:
     2e0:	ec e7       	ldi	r30, 0x7C	; 124
     2e2:	f1 e0       	ldi	r31, 0x01	; 1
     2e4:	e6 0f       	add	r30, r22
     2e6:	f1 1d       	adc	r31, r1
     2e8:	65 95       	asr	r22
     2ea:	65 95       	asr	r22
     2ec:	6d 93       	st	X+, r22
     2ee:	6d 91       	ld	r22, X+
     2f0:	7d 91       	ld	r23, X+
     2f2:	8d 91       	ld	r24, X+
     2f4:	9d 91       	ld	r25, X+
     2f6:	09 94       	ijmp

000002f8 <L166table>:
     2f8:	23 c0       	rjmp	.+70     	; 0x340 <L166end>
     2fa:	1a c0       	rjmp	.+52     	; 0x330 <L166plus1>
     2fc:	12 c0       	rjmp	.+36     	; 0x322 <L166minus1>
     2fe:	16 c0       	rjmp	.+44     	; 0x32c <L166plus2>
     300:	10 c0       	rjmp	.+32     	; 0x322 <L166minus1>
     302:	1e c0       	rjmp	.+60     	; 0x340 <L166end>
     304:	09 c0       	rjmp	.+18     	; 0x318 <L166minus2>
     306:	14 c0       	rjmp	.+40     	; 0x330 <L166plus1>
     308:	13 c0       	rjmp	.+38     	; 0x330 <L166plus1>
     30a:	06 c0       	rjmp	.+12     	; 0x318 <L166minus2>
     30c:	19 c0       	rjmp	.+50     	; 0x340 <L166end>
     30e:	09 c0       	rjmp	.+18     	; 0x322 <L166minus1>
     310:	0d c0       	rjmp	.+26     	; 0x32c <L166plus2>
     312:	07 c0       	rjmp	.+14     	; 0x322 <L166minus1>
     314:	0d c0       	rjmp	.+26     	; 0x330 <L166plus1>
     316:	14 c0       	rjmp	.+40     	; 0x340 <L166end>

00000318 <L166minus2>:
     318:	62 50       	subi	r22, 0x02	; 2
     31a:	70 40       	sbci	r23, 0x00	; 0
     31c:	80 40       	sbci	r24, 0x00	; 0
     31e:	90 40       	sbci	r25, 0x00	; 0
     320:	0b c0       	rjmp	.+22     	; 0x338 <L166store>

00000322 <L166minus1>:
     322:	61 50       	subi	r22, 0x01	; 1
     324:	70 40       	sbci	r23, 0x00	; 0
     326:	80 40       	sbci	r24, 0x00	; 0
     328:	90 40       	sbci	r25, 0x00	; 0
     32a:	06 c0       	rjmp	.+12     	; 0x338 <L166store>

0000032c <L166plus2>:
     32c:	6e 5f       	subi	r22, 0xFE	; 254
     32e:	01 c0       	rjmp	.+2      	; 0x332 <L166z>

00000330 <L166plus1>:
     330:	6f 5f       	subi	r22, 0xFF	; 255

00000332 <L166z>:
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	8f 4f       	sbci	r24, 0xFF	; 255
     336:	9f 4f       	sbci	r25, 0xFF	; 255

00000338 <L166store>:
     338:	9e 93       	st	-X, r25
     33a:	8e 93       	st	-X, r24
     33c:	7e 93       	st	-X, r23
     33e:	6e 93       	st	-X, r22

00000340 <L166end>:
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:324
			case 6: case 9:
				arg->position -= 2;
				return;
		}
#endif
	}
     340:	08 95       	ret

00000342 <setup>:
setup():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:53
int keyboardStatusCC, keyboardCodeCC;

unsigned long nextMillis;
unsigned long nextMillisEnc;

void setup() {
     342:	cf 93       	push	r28
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:54
  pinMode(PIN_PD4, INPUT_PULLUP);
     344:	62 e0       	ldi	r22, 0x02	; 2
     346:	84 e0       	ldi	r24, 0x04	; 4
     348:	2b db       	rcall	.-2474   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:55
  pinMode(DIP0, INPUT_PULLUP);
     34a:	62 e0       	ldi	r22, 0x02	; 2
     34c:	80 e1       	ldi	r24, 0x10	; 16
     34e:	28 db       	rcall	.-2480   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:56
  pinMode(DIP1, INPUT_PULLUP);
     350:	62 e0       	ldi	r22, 0x02	; 2
     352:	81 e1       	ldi	r24, 0x11	; 17
     354:	25 db       	rcall	.-2486   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:57
  pinMode(DIP2, INPUT_PULLUP);
     356:	62 e0       	ldi	r22, 0x02	; 2
     358:	82 e1       	ldi	r24, 0x12	; 18
     35a:	22 db       	rcall	.-2492   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:58
  pinMode(PIN_PC5, OUTPUT);
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	83 e1       	ldi	r24, 0x13	; 19
     360:	1f db       	rcall	.-2498   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:59
  bitWrite(adress, 0, digitalRead(DIP0));
     362:	80 e1       	ldi	r24, 0x10	; 16
     364:	86 db       	rcall	.-2292   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
     366:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     36a:	89 2b       	or	r24, r25
     36c:	09 f4       	brne	.+2      	; 0x370 <setup+0x2e>
     36e:	7f c0       	rjmp	.+254    	; 0x46e <__stack+0xf>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:59 (discriminator 1)
     370:	21 60       	ori	r18, 0x01	; 1
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:59 (discriminator 2)
     372:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <adress>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:60 (discriminator 2)
  bitWrite(adress, 1, digitalRead(DIP1));
     376:	81 e1       	ldi	r24, 0x11	; 17
     378:	7c db       	rcall	.-2312   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
     37a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     37e:	89 2b       	or	r24, r25
     380:	09 f4       	brne	.+2      	; 0x384 <setup+0x42>
     382:	77 c0       	rjmp	.+238    	; 0x472 <__stack+0x13>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:60 (discriminator 1)
     384:	22 60       	ori	r18, 0x02	; 2
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:60 (discriminator 2)
     386:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <adress>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:61 (discriminator 2)
  bitWrite(adress, 2, digitalRead(DIP2));
     38a:	82 e1       	ldi	r24, 0x12	; 18
     38c:	72 db       	rcall	.-2332   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
     38e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     392:	89 2b       	or	r24, r25
     394:	09 f4       	brne	.+2      	; 0x398 <setup+0x56>
     396:	6f c0       	rjmp	.+222    	; 0x476 <__stack+0x17>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:61 (discriminator 1)
     398:	24 60       	ori	r18, 0x04	; 4
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:61 (discriminator 2)
     39a:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <adress>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:66 (discriminator 2)
  bitWrite(adress, 3, LOW);
  bitWrite(adress, 4, LOW);
  bitWrite(adress, 5, LOW);
  bitWrite(adress, 6, LOW);
  bitWrite(adress, 7, LOW);
     39e:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <adress>
     3a2:	c7 70       	andi	r28, 0x07	; 7
     3a4:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <adress>
_ZN4midi10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEE5beginEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/serialMIDI.h:62 (discriminator 2)
	{
        // Initialise the Serial port
        #if defined(AVR_CAKE)
            mSerial. template open<Settings::BaudRate>();
        #else
            mSerial.begin(Settings::BaudRate);
     3a8:	e0 91 dd 00 	lds	r30, 0x00DD	; 0x8000dd <MIDI+0x2a>
     3ac:	f0 91 de 00 	lds	r31, 0x00DE	; 0x8000de <MIDI+0x2b>
_ZN14HardwareSerial5beginEm():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.h:121 (discriminator 2)
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3b0:	26 e0       	ldi	r18, 0x06	; 6
     3b2:	42 e1       	ldi	r20, 0x12	; 18
     3b4:	5a e7       	ldi	r21, 0x7A	; 122
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	55 dc       	rcall	.-1878   	; 0xfffffc6a <__eeprom_end+0xff7efc6a>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5beginEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:77 (discriminator 2)
void MidiInterface<Transport, Settings, Platform>::begin(Channel inChannel)
{
    // Initialise the Transport layer
    mTransport.begin();

    mInputChannel = inChannel;
     3c0:	c0 93 df 00 	sts	0x00DF, r28	; 0x8000df <MIDI+0x2c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:78 (discriminator 2)
    mRunningStatus_TX = InvalidType;
     3c4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <MIDI+0x2e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:79 (discriminator 2)
    mRunningStatus_RX = InvalidType;
     3c8:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <MIDI+0x2d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:81 (discriminator 2)

    mPendingMessageIndex = 0;
     3cc:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <MIDI+0x35>
     3d0:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:82 (discriminator 2)
    mPendingMessageExpectedLength = 0;
     3d4:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <MIDI+0x33>
     3d8:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:84 (discriminator 2)

    mCurrentRpnNumber  = 0xffff;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	9f ef       	ldi	r25, 0xFF	; 255
     3e0:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <MIDI+0x37>
     3e4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <MIDI+0x36>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:85 (discriminator 2)
    mCurrentNrpnNumber = 0xffff;
     3e8:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <MIDI+0x39>
     3ec:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <MIDI+0x38>
_ZN4midi15DefaultPlatform3nowEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/midi_Platform.h:39 (discriminator 2)
#if ARDUINO

// DefaultPlatform is the Arduino Platform
struct DefaultPlatform
{
   static unsigned long now() { return ::millis(); };
     3f0:	96 da       	rcall	.-2772   	; 0xfffff91e <__eeprom_end+0xff7ef91e>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5beginEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:87 (discriminator 2)

    mLastMessageSentTime = Platform::now();
     3f2:	60 93 75 01 	sts	0x0175, r22	; 0x800175 <MIDI+0xc2>
     3f6:	70 93 76 01 	sts	0x0176, r23	; 0x800176 <MIDI+0xc3>
     3fa:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <MIDI+0xc4>
     3fe:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <MIDI+0xc5>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:89 (discriminator 2)

    mMessage.valid   = false;
     402:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <MIDI+0xbf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:90 (discriminator 2)
    mMessage.type    = InvalidType;
     406:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:91 (discriminator 2)
    mMessage.channel = 0;
     40a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:92 (discriminator 2)
    mMessage.data1   = 0;
     40e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:93 (discriminator 2)
    mMessage.data2   = 0;
     412:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:94 (discriminator 2)
    mMessage.length  = 0;
     416:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <MIDI+0xc1>
     41a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <MIDI+0xc0>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE17setThruFilterModeENS_4Thru4ModeE():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1354 (discriminator 2)
 @see Thru::Mode
 */
template<class Transport, class Settings, class Platform>
inline void MidiInterface<Transport, Settings, Platform>::setThruFilterMode(Thru::Mode inThruFilterMode)
{
    mThruFilterMode = inThruFilterMode;
     41e:	87 e0       	ldi	r24, 0x07	; 7
     420:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <MIDI+0x3a>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1355 (discriminator 2)
    mThruActivated  = mThruFilterMode != Thru::Off;
     424:	8e 7f       	andi	r24, 0xFE	; 254
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1355
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <MIDI+0x3a>
     430:	90 fb       	bst	r25, 0
     432:	80 f9       	bld	r24, 0
     434:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <MIDI+0x3a>
setup():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:71

  MIDI.begin(adress);
  MIDI.setThruFilterMode(midi::Thru::DifferentChannel); // Different Channel

  keyboard.begin(DataPin, IRQPin);
     438:	43 e0       	ldi	r20, 0x03	; 3
     43a:	62 e0       	ldi	r22, 0x02	; 2
     43c:	85 e8       	ldi	r24, 0x85	; 133
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	85 d9       	rcall	.-3318   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:72
  keyboard.setNoRepeat(1);
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	85 e8       	ldi	r24, 0x85	; 133
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	35 d9       	rcall	.-3478   	; 0xfffff6b4 <__eeprom_end+0xff7ef6b4>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:73
  keyboard.setNoBreak(1);
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	85 e8       	ldi	r24, 0x85	; 133
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	27 d9       	rcall	.-3506   	; 0xfffff6a0 <__eeprom_end+0xff7ef6a0>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:74
  keyboardStatusCC = 8;
     452:	88 e0       	ldi	r24, 0x08	; 8
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <keyboardStatusCC+0x1>
     45a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <keyboardStatusCC>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:75
  keyboardCodeCC = 9;
     45e:	89 e0       	ldi	r24, 0x09	; 9
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <keyboardCodeCC+0x1>
     466:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <keyboardCodeCC>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:76
}
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:59 (discriminator 2)
  pinMode(PIN_PD4, INPUT_PULLUP);
  pinMode(DIP0, INPUT_PULLUP);
  pinMode(DIP1, INPUT_PULLUP);
  pinMode(DIP2, INPUT_PULLUP);
  pinMode(PIN_PC5, OUTPUT);
  bitWrite(adress, 0, digitalRead(DIP0));
     46e:	2e 7f       	andi	r18, 0xFE	; 254
     470:	80 cf       	rjmp	.-256    	; 0x372 <setup+0x30>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:60 (discriminator 2)
  bitWrite(adress, 1, digitalRead(DIP1));
     472:	2d 7f       	andi	r18, 0xFD	; 253
     474:	88 cf       	rjmp	.-240    	; 0x386 <setup+0x44>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:61 (discriminator 2)
  bitWrite(adress, 2, digitalRead(DIP2));
     476:	2b 7f       	andi	r18, 0xFB	; 251
     478:	90 cf       	rjmp	.-224    	; 0x39a <setup+0x58>

0000047a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>:
_ZN4midi10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEE5writeEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/serialMIDI.h:73
		return true;
	};

	void write(byte value)
	{
		mSerial.write(value);
     47a:	dc 01       	movw	r26, r24
     47c:	8d 91       	ld	r24, X+
     47e:	9c 91       	ld	r25, X
     480:	dc 01       	movw	r26, r24
     482:	ed 91       	ld	r30, X+
     484:	fc 91       	ld	r31, X
     486:	01 90       	ld	r0, Z+
     488:	f0 81       	ld	r31, Z
     48a:	e0 2d       	mov	r30, r0
     48c:	09 94       	ijmp

0000048e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE12sendRealTimeENS_8MidiTypeE():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:497
void MidiInterface<Transport, Settings, Platform>::sendRealTime(MidiType inType)
{
    // Do not invalidate Running Status for real-time messages
    // as they can be interleaved within any message.

    switch (inType)
     48e:	6d 3f       	cpi	r22, 0xFD	; 253
     490:	40 f4       	brcc	.+16     	; 0x4a2 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]+0x14>
     492:	6a 3f       	cpi	r22, 0xFA	; 250
     494:	10 f4       	brcc	.+4      	; 0x49a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]+0xc>
     496:	68 3f       	cpi	r22, 0xF8	; 248
     498:	31 f4       	brne	.+12     	; 0x4a6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]+0x18>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:507
        case Continue:
        case ActiveSensing:
        case SystemReset:
            if (mTransport.beginTransmission(inType))
            {
                mTransport.write((byte)inType);
     49a:	fc 01       	movw	r30, r24
     49c:	80 81       	ld	r24, Z
     49e:	91 81       	ldd	r25, Z+1	; 0x01
     4a0:	ec cf       	rjmp	.-40     	; 0x47a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:497
void MidiInterface<Transport, Settings, Platform>::sendRealTime(MidiType inType)
{
    // Do not invalidate Running Status for real-time messages
    // as they can be interleaved within any message.

    switch (inType)
     4a2:	6e 3f       	cpi	r22, 0xFE	; 254
     4a4:	d0 f7       	brcc	.-12     	; 0x49a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]+0xc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:516
            break;
        default:
            // Invalid Real Time marker
            break;
    }
}
     4a6:	08 95       	ret

000004a8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4sendENS_8MidiTypeEhhh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:160

 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::send(MidiType inType,
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:168
                                               Channel inChannel)
{
    if (inType <= PitchBend)  // Channel messages
    {
        // Then test if channel is valid
        if (inChannel >= MIDI_CHANNEL_OFF  ||
     4b4:	01 50       	subi	r16, 0x01	; 1
     4b6:	00 31       	cpi	r16, 0x10	; 16
     4b8:	08 f5       	brcc	.+66     	; 0x4fc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]+0x54>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:169
            inChannel == MIDI_CHANNEL_OMNI ||
     4ba:	67 ff       	sbrs	r22, 7
     4bc:	1f c0       	rjmp	.+62     	; 0x4fc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]+0x54>
     4be:	d2 2f       	mov	r29, r18
     4c0:	14 2f       	mov	r17, r20
     4c2:	c6 2f       	mov	r28, r22
     4c4:	7c 01       	movw	r14, r24
_ZNK4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE9getStatusENS_8MidiTypeEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:684

template<class Transport, class Settings, class Platform>
StatusByte MidiInterface<Transport, Settings, Platform>::getStatus(MidiType inType,
                                                          Channel inChannel) const
{
    return StatusByte(((byte)inType | ((inChannel - 1) & 0x0f)));
     4c6:	60 2f       	mov	r22, r16
     4c8:	6c 2b       	or	r22, r28
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4sendENS_8MidiTypeEhhh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:194
                }
            }
            else
            {
                // Don't care about running status, send the status byte.
                mTransport.write(status);
     4ca:	fc 01       	movw	r30, r24
     4cc:	82 a5       	ldd	r24, Z+42	; 0x2a
     4ce:	93 a5       	ldd	r25, Z+43	; 0x2b
     4d0:	d4 df       	rcall	.-88     	; 0x47a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:175
            inType < 0x80)
        {
            return; // Don't send anything
        }
        // Protection: remove MSBs on data
        inData1 &= 0x7f;
     4d2:	61 2f       	mov	r22, r17
     4d4:	6f 77       	andi	r22, 0x7F	; 127
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:198
                // Don't care about running status, send the status byte.
                mTransport.write(status);
            }

            // Then send data
            mTransport.write(inData1);
     4d6:	f7 01       	movw	r30, r14
     4d8:	82 a5       	ldd	r24, Z+42	; 0x2a
     4da:	93 a5       	ldd	r25, Z+43	; 0x2b
     4dc:	ce df       	rcall	.-100    	; 0x47a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:199
            if (inType != ProgramChange && inType != AfterTouchChannel)
     4de:	cf 7e       	andi	r28, 0xEF	; 239
     4e0:	c0 3c       	cpi	r28, 0xC0	; 192
     4e2:	61 f0       	breq	.+24     	; 0x4fc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]+0x54>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:176
        {
            return; // Don't send anything
        }
        // Protection: remove MSBs on data
        inData1 &= 0x7f;
        inData2 &= 0x7f;
     4e4:	6d 2f       	mov	r22, r29
     4e6:	6f 77       	andi	r22, 0x7F	; 127
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:201

            // Then send data
            mTransport.write(inData1);
            if (inType != ProgramChange && inType != AfterTouchChannel)
            {
                mTransport.write(inData2);
     4e8:	f7 01       	movw	r30, r14
     4ea:	82 a5       	ldd	r24, Z+42	; 0x2a
     4ec:	93 a5       	ldd	r25, Z+43	; 0x2b
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:212
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
    }
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:201

            // Then send data
            mTransport.write(inData1);
            if (inType != ProgramChange && inType != AfterTouchChannel)
            {
                mTransport.write(inData2);
     4fa:	bf cf       	rjmp	.-130    	; 0x47a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:212
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
    }
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	08 95       	ret

0000050a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char)>:
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:160

 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::send(MidiType inType,
     50a:	0f 93       	push	r16
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:165
                                               DataByte inData1,
                                               DataByte inData2,
                                               Channel inChannel)
{
    if (inType <= PitchBend)  // Channel messages
     50c:	61 3e       	cpi	r22, 0xE1	; 225
     50e:	18 f4       	brcc	.+6      	; 0x516 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char)+0xc>
     510:	cb df       	rcall	.-106    	; 0x4a8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:212
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
    }
}
     512:	0f 91       	pop	r16
     514:	08 95       	ret
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:208

            mTransport.endTransmission();
            UpdateLastSentTime();
        }
    }
    else if (inType >= Clock && inType <= SystemReset)
     516:	68 3f       	cpi	r22, 0xF8	; 248
     518:	e0 f3       	brcs	.-8      	; 0x512 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char)+0x8>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:210
    {
        sendRealTime(inType); // System Real-time and 1 byte.
     51a:	8a 96       	adiw	r24, 0x2a	; 42
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:212
    }
}
     51c:	0f 91       	pop	r16
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:210
            UpdateLastSentTime();
        }
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
     51e:	b7 cf       	rjmp	.-146    	; 0x48e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]>

00000520 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE17sendControlChangeEhhh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:270
 \param inControlValue  The value for the specified controller (0 to 127).
 \param inChannel       The channel on which the message will be sent (1 to 16).
 @see MidiControlChangeNumber
 */
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::sendControlChange(DataByte inControlNumber,
     520:	0f 93       	push	r16
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4sendENS_8MidiTypeEhhh():
     522:	02 2f       	mov	r16, r18
     524:	24 2f       	mov	r18, r20
     526:	46 2f       	mov	r20, r22
     528:	60 eb       	ldi	r22, 0xB0	; 176
     52a:	be df       	rcall	.-132    	; 0x4a8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE17sendControlChangeEhhh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:275
                                                            DataByte inControlValue,
                                                            Channel inChannel)
{
    send(ControlChange, inControlNumber, inControlValue, inChannel);
}
     52c:	0f 91       	pop	r16
     52e:	08 95       	ret

00000530 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE14launchCallbackEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1294

/*! @} */ // End of doc group MIDI Callbacks

// Private - launch callback function based on received type.
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::launchCallback()
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	ec 01       	movw	r28, r24
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1296
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);
     536:	e8 81       	ld	r30, Y
     538:	f9 81       	ldd	r31, Y+1	; 0x01
     53a:	30 97       	sbiw	r30, 0x00	; 0
     53c:	11 f0       	breq	.+4      	; 0x542 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x12>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1296 (discriminator 1)
     53e:	cb 96       	adiw	r24, 0x3b	; 59
     540:	09 95       	icall
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     542:	8c ad       	ldd	r24, Y+60	; 0x3c
     544:	82 3f       	cpi	r24, 0xF2	; 242
     546:	09 f4       	brne	.+2      	; 0x54a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x1a>
     548:	9e c0       	rjmp	.+316    	; 0x686 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x156>
     54a:	90 f5       	brcc	.+100    	; 0x5b0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x80>
     54c:	80 3c       	cpi	r24, 0xC0	; 192
     54e:	09 f4       	brne	.+2      	; 0x552 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x22>
     550:	86 c0       	rjmp	.+268    	; 0x65e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x12e>
     552:	90 f4       	brcc	.+36     	; 0x578 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x48>
     554:	80 39       	cpi	r24, 0x90	; 144
     556:	09 f4       	brne	.+2      	; 0x55a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x2a>
     558:	54 c0       	rjmp	.+168    	; 0x602 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xd2>
     55a:	30 f4       	brcc	.+12     	; 0x568 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x38>
     55c:	80 38       	cpi	r24, 0x80	; 128
     55e:	09 f4       	brne	.+2      	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
     560:	45 c0       	rjmp	.+138    	; 0x5ec <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xbc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     568:	80 3a       	cpi	r24, 0xA0	; 160
     56a:	09 f4       	brne	.+2      	; 0x56e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x3e>
     56c:	75 c0       	rjmp	.+234    	; 0x658 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x128>
     56e:	80 3b       	cpi	r24, 0xB0	; 176
     570:	c1 f7       	brne	.-16     	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1314
        case Continue:              if (mContinueCallback != nullptr)              mContinueCallback();        break;
        case Stop:                  if (mStopCallback != nullptr)                  mStopCallback();            break;
        case ActiveSensing:         if (mActiveSensingCallback != nullptr)         mActiveSensingCallback();   break;

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     572:	ea 85       	ldd	r30, Y+10	; 0x0a
     574:	fb 85       	ldd	r31, Y+11	; 0x0b
     576:	3c c0       	rjmp	.+120    	; 0x5f0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     578:	80 3e       	cpi	r24, 0xE0	; 224
     57a:	09 f4       	brne	.+2      	; 0x57e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x4e>
     57c:	59 c0       	rjmp	.+178    	; 0x630 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x100>
     57e:	58 f4       	brcc	.+22     	; 0x596 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x66>
     580:	80 3d       	cpi	r24, 0xD0	; 208
     582:	79 f7       	brne	.-34     	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1317

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != nullptr)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;
     584:	ee 85       	ldd	r30, Y+14	; 0x0e
     586:	ff 85       	ldd	r31, Y+15	; 0x0f
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1319

        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
     588:	30 97       	sbiw	r30, 0x00	; 0
     58a:	59 f3       	breq	.-42     	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1319 (discriminator 1)
     58c:	6d ad       	ldd	r22, Y+61	; 0x3d
     58e:	8b ad       	ldd	r24, Y+59	; 0x3b
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1319 (discriminator 1)
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != nullptr)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;

        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
     594:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     596:	80 3f       	cpi	r24, 0xF0	; 240
     598:	09 f4       	brne	.+2      	; 0x59c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x6c>
     59a:	64 c0       	rjmp	.+200    	; 0x664 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x134>
     59c:	81 3f       	cpi	r24, 0xF1	; 241
     59e:	09 f7       	brne	.-62     	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1323

        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
     5a0:	ec 89       	ldd	r30, Y+20	; 0x14
     5a2:	fd 89       	ldd	r31, Y+21	; 0x15
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1325
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
     5a4:	30 97       	sbiw	r30, 0x00	; 0
     5a6:	e9 f2       	breq	.-70     	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1325 (discriminator 1)
     5a8:	8d ad       	ldd	r24, Y+61	; 0x3d
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1325 (discriminator 1)
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
     5ae:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     5b0:	8a 3f       	cpi	r24, 0xFA	; 250
     5b2:	91 f1       	breq	.+100    	; 0x618 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xe8>
     5b4:	80 f4       	brcc	.+32     	; 0x5d6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xa6>
     5b6:	86 3f       	cpi	r24, 0xF6	; 246
     5b8:	09 f4       	brne	.+2      	; 0x5bc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x8c>
     5ba:	77 c0       	rjmp	.+238    	; 0x6aa <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x17a>
     5bc:	28 f4       	brcc	.+10     	; 0x5c8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x98>
     5be:	83 3f       	cpi	r24, 0xF3	; 243
     5c0:	81 f6       	brne	.-96     	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1325
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
     5c2:	e8 8d       	ldd	r30, Y+24	; 0x18
     5c4:	f9 8d       	ldd	r31, Y+25	; 0x19
     5c6:	ee cf       	rjmp	.-36     	; 0x5a4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x74>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     5c8:	88 3f       	cpi	r24, 0xF8	; 248
     5ca:	f1 f0       	breq	.+60     	; 0x608 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xd8>
     5cc:	89 3f       	cpi	r24, 0xF9	; 249
     5ce:	49 f6       	brne	.-110    	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1308
        case NoteOn:                if (mNoteOnCallback != nullptr)                mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;

            // Real-time messages
        case Clock:                 if (mClockCallback != nullptr)                 mClockCallback();           break;
        case Start:                 if (mStartCallback != nullptr)                 mStartCallback();           break;
        case Tick:                  if (mTickCallback != nullptr)                  mTickCallback();            break;
     5d0:	e8 a1       	ldd	r30, Y+32	; 0x20
     5d2:	f9 a1       	ldd	r31, Y+33	; 0x21
     5d4:	1b c0       	rjmp	.+54     	; 0x60c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     5d6:	8c 3f       	cpi	r24, 0xFC	; 252
     5d8:	29 f1       	breq	.+74     	; 0x624 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xf4>
     5da:	08 f1       	brcs	.+66     	; 0x61e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xee>
     5dc:	8e 3f       	cpi	r24, 0xFE	; 254
     5de:	29 f1       	breq	.+74     	; 0x62a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xfa>
     5e0:	8f 3f       	cpi	r24, 0xFF	; 255
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xb6>
     5e4:	be cf       	rjmp	.-132    	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1328
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
        case TuneRequest:           if (mTuneRequestCallback != nullptr)           mTuneRequestCallback();    break;

        case SystemReset:           if (mSystemResetCallback != nullptr)           mSystemResetCallback();    break;
     5e6:	e8 a5       	ldd	r30, Y+40	; 0x28
     5e8:	f9 a5       	ldd	r31, Y+41	; 0x29
     5ea:	10 c0       	rjmp	.+32     	; 0x60c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1302

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
    {
            // Notes
        case NoteOff:               if (mNoteOffCallback != nullptr)               mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);   break;
     5ec:	ec 81       	ldd	r30, Y+4	; 0x04
     5ee:	fd 81       	ldd	r31, Y+5	; 0x05
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1316
        case ActiveSensing:         if (mActiveSensingCallback != nullptr)         mActiveSensingCallback();   break;

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     5f0:	30 97       	sbiw	r30, 0x00	; 0
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xc6>
     5f4:	b6 cf       	rjmp	.-148    	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1316 (discriminator 1)
     5f6:	4e ad       	ldd	r20, Y+62	; 0x3e
     5f8:	6d ad       	ldd	r22, Y+61	; 0x3d
     5fa:	8b ad       	ldd	r24, Y+59	; 0x3b
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1316 (discriminator 1)
        case ActiveSensing:         if (mActiveSensingCallback != nullptr)         mActiveSensingCallback();   break;

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     600:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1303
    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
    {
            // Notes
        case NoteOff:               if (mNoteOffCallback != nullptr)               mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);   break;
        case NoteOn:                if (mNoteOnCallback != nullptr)                mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     602:	ee 81       	ldd	r30, Y+6	; 0x06
     604:	ff 81       	ldd	r31, Y+7	; 0x07
     606:	f4 cf       	rjmp	.-24     	; 0x5f0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1306

            // Real-time messages
        case Clock:                 if (mClockCallback != nullptr)                 mClockCallback();           break;
     608:	ec 8d       	ldd	r30, Y+28	; 0x1c
     60a:	fd 8d       	ldd	r31, Y+29	; 0x1d
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1328
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
        case TuneRequest:           if (mTuneRequestCallback != nullptr)           mTuneRequestCallback();    break;

        case SystemReset:           if (mSystemResetCallback != nullptr)           mSystemResetCallback();    break;
     60c:	30 97       	sbiw	r30, 0x00	; 0
     60e:	09 f4       	brne	.+2      	; 0x612 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xe2>
     610:	a8 cf       	rjmp	.-176    	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1328 (discriminator 1)
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
        case TuneRequest:           if (mTuneRequestCallback != nullptr)           mTuneRequestCallback();    break;

        case SystemReset:           if (mSystemResetCallback != nullptr)           mSystemResetCallback();    break;
     616:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1307
        case NoteOff:               if (mNoteOffCallback != nullptr)               mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);   break;
        case NoteOn:                if (mNoteOnCallback != nullptr)                mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;

            // Real-time messages
        case Clock:                 if (mClockCallback != nullptr)                 mClockCallback();           break;
        case Start:                 if (mStartCallback != nullptr)                 mStartCallback();           break;
     618:	ee 8d       	ldd	r30, Y+30	; 0x1e
     61a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     61c:	f7 cf       	rjmp	.-18     	; 0x60c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1309
        case Tick:                  if (mTickCallback != nullptr)                  mTickCallback();            break;
        case Continue:              if (mContinueCallback != nullptr)              mContinueCallback();        break;
     61e:	ea a1       	ldd	r30, Y+34	; 0x22
     620:	fb a1       	ldd	r31, Y+35	; 0x23
     622:	f4 cf       	rjmp	.-24     	; 0x60c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1310
        case Stop:                  if (mStopCallback != nullptr)                  mStopCallback();            break;
     624:	ec a1       	ldd	r30, Y+36	; 0x24
     626:	fd a1       	ldd	r31, Y+37	; 0x25
     628:	f1 cf       	rjmp	.-30     	; 0x60c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1311
        case ActiveSensing:         if (mActiveSensingCallback != nullptr)         mActiveSensingCallback();   break;
     62a:	ee a1       	ldd	r30, Y+38	; 0x26
     62c:	ff a1       	ldd	r31, Y+39	; 0x27
     62e:	ee cf       	rjmp	.-36     	; 0x60c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1315

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
     630:	e8 89       	ldd	r30, Y+16	; 0x10
     632:	f9 89       	ldd	r31, Y+17	; 0x11
     634:	30 97       	sbiw	r30, 0x00	; 0
     636:	09 f4       	brne	.+2      	; 0x63a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x10a>
     638:	94 cf       	rjmp	.-216    	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1315 (discriminator 1)
     63a:	6e ad       	ldd	r22, Y+62	; 0x3e
     63c:	20 e8       	ldi	r18, 0x80	; 128
     63e:	62 9f       	mul	r22, r18
     640:	b0 01       	movw	r22, r0
     642:	11 24       	eor	r1, r1
     644:	60 78       	andi	r22, 0x80	; 128
     646:	7f 73       	andi	r23, 0x3F	; 63
     648:	8d ad       	ldd	r24, Y+61	; 0x3d
     64a:	8f 77       	andi	r24, 0x7F	; 127
     64c:	68 2b       	or	r22, r24
     64e:	70 52       	subi	r23, 0x20	; 32
     650:	8b ad       	ldd	r24, Y+59	; 0x3b
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1315 (discriminator 1)
        case Stop:                  if (mStopCallback != nullptr)                  mStopCallback();            break;
        case ActiveSensing:         if (mActiveSensingCallback != nullptr)         mActiveSensingCallback();   break;

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
     656:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1316
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     658:	e8 85       	ldd	r30, Y+8	; 0x08
     65a:	f9 85       	ldd	r31, Y+9	; 0x09
     65c:	c9 cf       	rjmp	.-110    	; 0x5f0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1319
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != nullptr)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;

        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
     65e:	ec 85       	ldd	r30, Y+12	; 0x0c
     660:	fd 85       	ldd	r31, Y+13	; 0x0d
     662:	92 cf       	rjmp	.-220    	; 0x588 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x58>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1320
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	fb 89       	ldd	r31, Y+19	; 0x13
     668:	30 97       	sbiw	r30, 0x00	; 0
     66a:	09 f4       	brne	.+2      	; 0x66e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x13e>
     66c:	7a cf       	rjmp	.-268    	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1320 (discriminator 1)
     66e:	6d ad       	ldd	r22, Y+61	; 0x3d
     670:	7e ad       	ldd	r23, Y+62	; 0x3e
     672:	61 38       	cpi	r22, 0x81	; 129
     674:	71 05       	cpc	r23, r1
     676:	10 f0       	brcs	.+4      	; 0x67c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x14c>
     678:	60 e8       	ldi	r22, 0x80	; 128
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	ce 01       	movw	r24, r28
     67e:	cf 96       	adiw	r24, 0x3f	; 63
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1320 (discriminator 1)
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != nullptr)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;

        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;
     684:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1324

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
     686:	ee 89       	ldd	r30, Y+22	; 0x16
     688:	ff 89       	ldd	r31, Y+23	; 0x17
     68a:	30 97       	sbiw	r30, 0x00	; 0
     68c:	09 f4       	brne	.+2      	; 0x690 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x160>
     68e:	69 cf       	rjmp	.-302    	; 0x562 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1324 (discriminator 1)
     690:	8e ad       	ldd	r24, Y+62	; 0x3e
     692:	20 e8       	ldi	r18, 0x80	; 128
     694:	82 9f       	mul	r24, r18
     696:	c0 01       	movw	r24, r0
     698:	11 24       	eor	r1, r1
     69a:	80 78       	andi	r24, 0x80	; 128
     69c:	9f 73       	andi	r25, 0x3F	; 63
     69e:	2d ad       	ldd	r18, Y+61	; 0x3d
     6a0:	2f 77       	andi	r18, 0x7F	; 127
     6a2:	82 2b       	or	r24, r18
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1324 (discriminator 1)
        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
     6a8:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1326
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
        case TuneRequest:           if (mTuneRequestCallback != nullptr)           mTuneRequestCallback();    break;
     6aa:	ea 8d       	ldd	r30, Y+26	; 0x1a
     6ac:	fb 8d       	ldd	r31, Y+27	; 0x1b
     6ae:	ae cf       	rjmp	.-164    	; 0x60c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>

000006b0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10thruFilterEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1400
// - All system messages (System Exclusive, Common and Real Time) are passed
//   to output unless filter is set to Off.
// - Channel messages are passed to the output whether their channel
//   is matching the input channel and the filter setting
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::thruFilter(Channel inChannel)
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	ec 01       	movw	r28, r24
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1403
{
    // If the feature is disabled, don't do anything.
    if (!mThruActivated || (mThruFilterMode == Thru::Off))
     6be:	9a ad       	ldd	r25, Y+58	; 0x3a
     6c0:	29 2f       	mov	r18, r25
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	90 ff       	sbrs	r25, 0
     6c6:	1d c0       	rjmp	.+58     	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1403 (discriminator 1)
     6c8:	89 2f       	mov	r24, r25
     6ca:	8e 7f       	andi	r24, 0xFE	; 254
     6cc:	d1 f0       	breq	.+52     	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     6ce:	36 2f       	mov	r19, r22
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1407
        return;

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
     6d0:	6c ad       	ldd	r22, Y+60	; 0x3c
     6d2:	80 e8       	ldi	r24, 0x80	; 128
     6d4:	86 0f       	add	r24, r22
     6d6:	81 36       	cpi	r24, 0x61	; 97
     6d8:	f0 f4       	brcc	.+60     	; 0x716 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x66>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1409
    {
        const bool filter_condition = ((mMessage.channel == inChannel) ||
     6da:	0b ad       	ldd	r16, Y+59	; 0x3b
     6dc:	03 17       	cp	r16, r19
     6de:	19 f0       	breq	.+6      	; 0x6e6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x36>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1409 (discriminator 2)
     6e0:	21 e0       	ldi	r18, 0x01	; 1
     6e2:	31 11       	cpse	r19, r1
     6e4:	20 e0       	ldi	r18, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1413 (discriminator 6)
                                       (inChannel == MIDI_CHANNEL_OMNI));

        // Now let's pass it to the output
        switch (mThruFilterMode)
     6e6:	96 95       	lsr	r25
     6e8:	92 30       	cpi	r25, 0x02	; 2
     6ea:	49 f0       	breq	.+18     	; 0x6fe <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x4e>
     6ec:	93 30       	cpi	r25, 0x03	; 3
     6ee:	81 f0       	breq	.+32     	; 0x710 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x60>
     6f0:	91 30       	cpi	r25, 0x01	; 1
     6f2:	39 f4       	brne	.+14     	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1435
                break;

            case Thru::DifferentChannel:
                if (!filter_condition)
                {
                    send(mMessage.type,
     6f4:	2e ad       	ldd	r18, Y+62	; 0x3e
     6f6:	4d ad       	ldd	r20, Y+61	; 0x3d
     6f8:	ce 01       	movw	r24, r28
     6fa:	07 df       	rcall	.-498    	; 0x50a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char)>
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1423
                     mMessage.data2,
                     mMessage.channel);
                break;

            case Thru::SameChannel:
                if (filter_condition)
     6fe:	21 11       	cpse	r18, r1
     700:	f9 cf       	rjmp	.-14     	; 0x6f4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x44>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1483

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	08 95       	ret
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1433
                         mMessage.channel);
                }
                break;

            case Thru::DifferentChannel:
                if (!filter_condition)
     710:	21 11       	cpse	r18, r1
     712:	f7 cf       	rjmp	.-18     	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     714:	ef cf       	rjmp	.-34     	; 0x6f4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x44>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1449
        }
    }
    else
    {
        // Send the message to the output
        switch (mMessage.type)
     716:	e0 e1       	ldi	r30, 0x10	; 16
     718:	e6 0f       	add	r30, r22
     71a:	e0 31       	cpi	r30, 0x10	; 16
     71c:	90 f7       	brcc	.-28     	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	ed 56       	subi	r30, 0x6D	; 109
     722:	fc 4f       	sbci	r31, 0xFC	; 252
     724:	09 94       	ijmp
     726:	18 c0       	rjmp	.+48     	; 0x758 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xa8>
     728:	56 c0       	rjmp	.+172    	; 0x7d6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x126>
     72a:	3e c0       	rjmp	.+124    	; 0x7a8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xf8>
     72c:	2d c0       	rjmp	.+90     	; 0x788 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xd8>
     72e:	e9 cf       	rjmp	.-46     	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     730:	e8 cf       	rjmp	.-48     	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     732:	09 c0       	rjmp	.+18     	; 0x746 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     734:	e6 cf       	rjmp	.-52     	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     736:	07 c0       	rjmp	.+14     	; 0x746 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     738:	e4 cf       	rjmp	.-56     	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     73a:	05 c0       	rjmp	.+10     	; 0x746 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     73c:	04 c0       	rjmp	.+8      	; 0x746 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     73e:	03 c0       	rjmp	.+6      	; 0x746 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     740:	e0 cf       	rjmp	.-64     	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     742:	01 c0       	rjmp	.+2      	; 0x746 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     744:	00 c0       	rjmp	.+0      	; 0x746 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1459
            case Stop:
            case Continue:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                sendRealTime(mMessage.type);
     746:	ce 01       	movw	r24, r28
     748:	8a 96       	adiw	r24, 0x2a	; 42
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1483

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1459
            case Stop:
            case Continue:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                sendRealTime(mMessage.type);
     756:	9b ce       	rjmp	.-714    	; 0x48e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]>
_ZNK4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE13getSysExArrayEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1171
 @see getSysExArrayLength to get the array's length in bytes.
 */
template<class Transport, class Settings, class Platform>
inline const byte* MidiInterface<Transport, Settings, Platform>::getSysExArray() const
{
    return mMessage.sysexArray;
     758:	7e 01       	movw	r14, r28
     75a:	8f e3       	ldi	r24, 0x3F	; 63
     75c:	e8 0e       	add	r14, r24
     75e:	f1 1c       	adc	r15, r1
     760:	0d ad       	ldd	r16, Y+61	; 0x3d
     762:	1e ad       	ldd	r17, Y+62	; 0x3e
     764:	01 38       	cpi	r16, 0x81	; 129
     766:	11 05       	cpc	r17, r1
     768:	10 f0       	brcs	.+4      	; 0x76e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xbe>
     76a:	00 e8       	ldi	r16, 0x80	; 128
     76c:	10 e0       	ldi	r17, 0x00	; 0
     76e:	0e 0d       	add	r16, r14
     770:	1f 1d       	adc	r17, r15
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE9sendSysExEjPKhb():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:368
    if (mTransport.beginTransmission(MidiType::SystemExclusiveStart))
    {
        if (writeBeginEndBytes)
            mTransport.write(MidiType::SystemExclusiveStart);

        for (unsigned i = 0; i < inLength; ++i)
     772:	e0 16       	cp	r14, r16
     774:	f1 06       	cpc	r15, r17
     776:	09 f4       	brne	.+2      	; 0x77a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xca>
     778:	c4 cf       	rjmp	.-120    	; 0x702 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:369
            mTransport.write(inArray[i]);
     77a:	f7 01       	movw	r30, r14
     77c:	61 91       	ld	r22, Z+
     77e:	7f 01       	movw	r14, r30
     780:	8a a5       	ldd	r24, Y+42	; 0x2a
     782:	9b a5       	ldd	r25, Y+43	; 0x2b
     784:	7a de       	rcall	.-780    	; 0x47a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
     786:	f5 cf       	rjmp	.-22     	; 0x772 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xc2>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10thruFilterEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1468
                // Send SysEx (0xf0 and 0xf7 are included in the buffer)
                sendSysEx(getSysExArrayLength(), getSysExArray(), true);
                break;

            case SongSelect:
                sendSongSelect(mMessage.data1);
     788:	1d ad       	ldd	r17, Y+61	; 0x3d
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10sendCommonENS_8MidiTypeEj():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:459
            return;
    }

    if (mTransport.beginTransmission(inType))
    {
            mTransport.write((byte)inType);
     78a:	63 ef       	ldi	r22, 0xF3	; 243
     78c:	8a a5       	ldd	r24, Y+42	; 0x2a
     78e:	9b a5       	ldd	r25, Y+43	; 0x2b
     790:	74 de       	rcall	.-792    	; 0x47a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:470
            case SongPosition:
                mTransport.write(inData1 & 0x7f);
                mTransport.write((inData1 >> 7) & 0x7f);
                break;
            case SongSelect:
                mTransport.write(inData1 & 0x7f);
     792:	61 2f       	mov	r22, r17
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:467
            case TimeCodeQuarterFrame:
                mTransport.write(inData1);
                break;
            case SongPosition:
                mTransport.write(inData1 & 0x7f);
                mTransport.write((inData1 >> 7) & 0x7f);
     794:	6f 77       	andi	r22, 0x7F	; 127
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:463
    {
            mTransport.write((byte)inType);
            switch (inType)
            {
            case TimeCodeQuarterFrame:
                mTransport.write(inData1);
     796:	8a a5       	ldd	r24, Y+42	; 0x2a
     798:	9b a5       	ldd	r25, Y+43	; 0x2b
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10thruFilterEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1483

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10sendCommonENS_8MidiTypeEj():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:463
    {
            mTransport.write((byte)inType);
            switch (inType)
            {
            case TimeCodeQuarterFrame:
                mTransport.write(inData1);
     7a6:	69 ce       	rjmp	.-814    	; 0x47a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10thruFilterEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1472
            case SongSelect:
                sendSongSelect(mMessage.data1);
                break;

            case SongPosition:
                sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2 << 7));
     7a8:	0e ad       	ldd	r16, Y+62	; 0x3e
     7aa:	f0 e8       	ldi	r31, 0x80	; 128
     7ac:	0f 9f       	mul	r16, r31
     7ae:	80 01       	movw	r16, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     7b4:	08 2b       	or	r16, r24
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10sendCommonENS_8MidiTypeEj():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:459
            return;
    }

    if (mTransport.beginTransmission(inType))
    {
            mTransport.write((byte)inType);
     7b6:	62 ef       	ldi	r22, 0xF2	; 242
     7b8:	8a a5       	ldd	r24, Y+42	; 0x2a
     7ba:	9b a5       	ldd	r25, Y+43	; 0x2b
     7bc:	5e de       	rcall	.-836    	; 0x47a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:466
            {
            case TimeCodeQuarterFrame:
                mTransport.write(inData1);
                break;
            case SongPosition:
                mTransport.write(inData1 & 0x7f);
     7be:	60 2f       	mov	r22, r16
     7c0:	6f 77       	andi	r22, 0x7F	; 127
     7c2:	8a a5       	ldd	r24, Y+42	; 0x2a
     7c4:	9b a5       	ldd	r25, Y+43	; 0x2b
     7c6:	59 de       	rcall	.-846    	; 0x47a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:467
                mTransport.write((inData1 >> 7) & 0x7f);
     7c8:	00 0f       	add	r16, r16
     7ca:	01 2f       	mov	r16, r17
     7cc:	00 1f       	adc	r16, r16
     7ce:	11 0b       	sbc	r17, r17
     7d0:	11 95       	neg	r17
     7d2:	60 2f       	mov	r22, r16
     7d4:	df cf       	rjmp	.-66     	; 0x794 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xe4>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE24sendTimeCodeQuarterFrameEhh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:403
 */
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
                                                                            DataByte inValuesNibble)
{
    const byte data = byte((((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f)));
     7d6:	6d ad       	ldd	r22, Y+61	; 0x3d
     7d8:	80 e1       	ldi	r24, 0x10	; 16
     7da:	68 9f       	mul	r22, r24
     7dc:	b0 01       	movw	r22, r0
     7de:	11 24       	eor	r1, r1
     7e0:	60 77       	andi	r22, 0x70	; 112
     7e2:	1e ad       	ldd	r17, Y+62	; 0x3e
     7e4:	1f 70       	andi	r17, 0x0F	; 15
     7e6:	16 2b       	or	r17, r22
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10sendCommonENS_8MidiTypeEj():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:459
            return;
    }

    if (mTransport.beginTransmission(inType))
    {
            mTransport.write((byte)inType);
     7e8:	61 ef       	ldi	r22, 0xF1	; 241
     7ea:	8a a5       	ldd	r24, Y+42	; 0x2a
     7ec:	9b a5       	ldd	r25, Y+43	; 0x2b
     7ee:	45 de       	rcall	.-886    	; 0x47a <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:463
            switch (inType)
            {
            case TimeCodeQuarterFrame:
                mTransport.write(inData1);
     7f0:	61 2f       	mov	r22, r17
     7f2:	d1 cf       	rjmp	.-94     	; 0x796 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xe6>

000007f4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE16isChannelMessageENS_8MidiTypeE():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1249
    return (inType == NoteOff           ||
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
            inType == PitchBend         ||
     7f4:	98 2f       	mov	r25, r24
     7f6:	9f 7e       	andi	r25, 0xEF	; 239
     7f8:	28 2f       	mov	r18, r24
     7fa:	2f 7c       	andi	r18, 0xCF	; 207
     7fc:	20 38       	cpi	r18, 0x80	; 128
     7fe:	39 f0       	breq	.+14     	; 0x80e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)+0x1a>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1248
{
    return (inType == NoteOff           ||
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
     800:	80 3e       	cpi	r24, 0xE0	; 224
     802:	29 f0       	breq	.+10     	; 0x80e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)+0x1a>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1249
            inType == PitchBend         ||
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 3c       	cpi	r25, 0xC0	; 192
     808:	19 f0       	breq	.+6      	; 0x810 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)+0x1c>
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	08 95       	ret
     80e:	81 e0       	ldi	r24, 0x01	; 1
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1251
            inType == ProgramChange);
}
     810:	08 95       	ret

00000812 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE21getTypeFromStatusByteEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1220
 made public so you can handle MidiTypes more easily.
 */
template<class Transport, class Settings, class Platform>
MidiType MidiInterface<Transport, Settings, Platform>::getTypeFromStatusByte(byte inStatus)
{
    if ((inStatus  < 0x80) ||
     812:	87 ff       	sbrs	r24, 7
     814:	0a c0       	rjmp	.+20     	; 0x82a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)+0x18>
     816:	9c e0       	ldi	r25, 0x0C	; 12
     818:	98 0f       	add	r25, r24
     81a:	92 30       	cpi	r25, 0x02	; 2
     81c:	30 f0       	brcs	.+12     	; 0x82a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)+0x18>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1222
        (inStatus == Undefined_F4) ||
        (inStatus == Undefined_F5) ||
     81e:	8d 3f       	cpi	r24, 0xFD	; 253
     820:	21 f0       	breq	.+8      	; 0x82a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)+0x18>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1226
        (inStatus == Undefined_FD))
        return InvalidType; // Data bytes and undefined.

    if (inStatus < 0xf0)
     822:	80 3f       	cpi	r24, 0xF0	; 240
     824:	18 f4       	brcc	.+6      	; 0x82c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)+0x1a>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1228
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);
     826:	80 7f       	andi	r24, 0xF0	; 240
     828:	08 95       	ret
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1224
{
    if ((inStatus  < 0x80) ||
        (inStatus == Undefined_F4) ||
        (inStatus == Undefined_F5) ||
        (inStatus == Undefined_FD))
        return InvalidType; // Data bytes and undefined.
     82a:	80 e0       	ldi	r24, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1231
    if (inStatus < 0xf0)
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);

    return MidiType(inStatus);
}
     82c:	08 95       	ret

0000082e <readMIDI()>:
_Z8readMIDIv():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:140
  }

}


void readMIDI() {
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4readEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:706
 @see see setInputChannel()
 */
template<class Transport, class Settings, class Platform>
inline bool MidiInterface<Transport, Settings, Platform>::read()
{
    return read(mInputChannel);
     838:	10 91 df 00 	lds	r17, 0x00DF	; 0x8000df <MIDI+0x2c>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4readEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:739
        if (mErrorCallback)
            mErrorCallback(mLastError);
    }
    #endif

    if (inChannel >= MIDI_CHANNEL_OFF)
     83c:	11 31       	cpi	r17, 0x11	; 17
     83e:	08 f0       	brcs	.+2      	; 0x842 <readMIDI()+0x14>
     840:	73 c0       	rjmp	.+230    	; 0x928 <readMIDI()+0xfa>
_ZN4midi10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEE9availableEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/serialMIDI.h:87
		return mSerial.read();
	};

	unsigned available()
	{
        return mSerial.available();
     842:	e0 91 dd 00 	lds	r30, 0x00DD	; 0x8000dd <MIDI+0x2a>
     846:	f0 91 de 00 	lds	r31, 0x00DE	; 0x8000de <MIDI+0x2b>
     84a:	80 81       	ld	r24, Z
     84c:	91 81       	ldd	r25, Z+1	; 0x01
     84e:	dc 01       	movw	r26, r24
     850:	ed 91       	ld	r30, X+
     852:	fc 91       	ld	r31, X
     854:	00 84       	ldd	r0, Z+8	; 0x08
     856:	f1 85       	ldd	r31, Z+9	; 0x09
     858:	e0 2d       	mov	r30, r0
     85a:	09 95       	icall
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:785

// Private method: MIDI parser
template<class Transport, class Settings, class Platform>
bool MidiInterface<Transport, Settings, Platform>::parse()
{
    if (mTransport.available() == 0)
     85c:	89 2b       	or	r24, r25
     85e:	09 f4       	brne	.+2      	; 0x862 <readMIDI()+0x34>
     860:	63 c0       	rjmp	.+198    	; 0x928 <readMIDI()+0xfa>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:789
        return false; // No data available.

    // clear the ErrorParse bit
    mLastError &= ~(1UL << ErrorParse);
     862:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <MIDI+0xcf>
     866:	8e 7f       	andi	r24, 0xFE	; 254
     868:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <MIDI+0xcf>
_ZN4midi10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEE4readEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/serialMIDI.h:82
	{
	};

	byte read()
	{
		return mSerial.read();
     86c:	e0 91 dd 00 	lds	r30, 0x00DD	; 0x8000dd <MIDI+0x2a>
     870:	f0 91 de 00 	lds	r31, 0x00DE	; 0x8000de <MIDI+0x2b>
     874:	80 81       	ld	r24, Z
     876:	91 81       	ldd	r25, Z+1	; 0x01
     878:	dc 01       	movw	r26, r24
     87a:	ed 91       	ld	r30, X+
     87c:	fc 91       	ld	r31, X
     87e:	02 84       	ldd	r0, Z+10	; 0x0a
     880:	f3 85       	ldd	r31, Z+11	; 0x0b
     882:	e0 2d       	mov	r30, r0
     884:	09 95       	icall
     886:	c8 2f       	mov	r28, r24
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:803
    // When the message is done, store it.

    const byte extracted = mTransport.read();

    // Ignore Undefined
    if (extracted == Undefined_FD)
     888:	8d 3f       	cpi	r24, 0xFD	; 253
     88a:	09 f4       	brne	.+2      	; 0x88e <readMIDI()+0x60>
     88c:	4d c0       	rjmp	.+154    	; 0x928 <readMIDI()+0xfa>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:806
        return (Settings::Use1ByteParsing) ? false : parse();

    if (mPendingMessageIndex == 0)
     88e:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <MIDI+0x34>
     892:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <MIDI+0x35>
     896:	00 97       	sbiw	r24, 0x00	; 0
     898:	09 f0       	breq	.+2      	; 0x89c <readMIDI()+0x6e>
     89a:	fa c0       	rjmp	.+500    	; 0xa90 <readMIDI()+0x262>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:809
    {
        // Start a new pending message
        mPendingMessage[0] = extracted;
     89c:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <MIDI+0x2f>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:812

        // Check for running status first
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
     8a0:	d0 91 e0 00 	lds	r29, 0x00E0	; 0x8000e0 <MIDI+0x2d>
     8a4:	8d 2f       	mov	r24, r29
     8a6:	b5 df       	rcall	.-150    	; 0x812 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)>
     8a8:	a5 df       	rcall	.-182    	; 0x7f4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)>
     8aa:	88 23       	and	r24, r24
     8ac:	61 f0       	breq	.+24     	; 0x8c6 <readMIDI()+0x98>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:818
        {
            // Only these types allow Running Status

            // If the status byte is not received, prepend it
            // to the pending message
            if (extracted < 0x80)
     8ae:	c7 fd       	sbrc	r28, 7
     8b0:	0a c0       	rjmp	.+20     	; 0x8c6 <readMIDI()+0x98>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:820
            {
                mPendingMessage[0]   = mRunningStatus_RX;
     8b2:	d0 93 e2 00 	sts	0x00E2, r29	; 0x8000e2 <MIDI+0x2f>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:821
                mPendingMessage[1]   = extracted;
     8b6:	c0 93 e3 00 	sts	0x00E3, r28	; 0x8000e3 <MIDI+0x30>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:822
                mPendingMessageIndex = 1;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <MIDI+0x35>
     8c2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:829
            // Else: well, we received another status byte,
            // so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        const MidiType pendingType = getTypeFromStatusByte(mPendingMessage[0]);
     8c6:	c0 91 e2 00 	lds	r28, 0x00E2	; 0x8000e2 <MIDI+0x2f>
     8ca:	8c 2f       	mov	r24, r28
     8cc:	a2 df       	rcall	.-188    	; 0x812 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:831

        switch (pendingType)
     8ce:	81 3f       	cpi	r24, 0xF1	; 241
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <readMIDI()+0xa6>
     8d2:	a7 c0       	rjmp	.+334    	; 0xa22 <readMIDI()+0x1f4>
     8d4:	f0 f5       	brcc	.+124    	; 0x952 <readMIDI()+0x124>
     8d6:	80 3b       	cpi	r24, 0xB0	; 176
     8d8:	39 f0       	breq	.+14     	; 0x8e8 <readMIDI()+0xba>
     8da:	48 f4       	brcc	.+18     	; 0x8ee <readMIDI()+0xc0>
     8dc:	80 39       	cpi	r24, 0x90	; 144
     8de:	21 f0       	breq	.+8      	; 0x8e8 <readMIDI()+0xba>
     8e0:	80 3a       	cpi	r24, 0xA0	; 160
     8e2:	11 f0       	breq	.+4      	; 0x8e8 <readMIDI()+0xba>
     8e4:	80 38       	cpi	r24, 0x80	; 128
     8e6:	51 f4       	brne	.+20     	; 0x8fc <readMIDI()+0xce>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:872
            case NoteOff:
            case ControlChange:
            case PitchBend:
            case AfterTouchPoly:
            case SongPosition:
                mPendingMessageExpectedLength = 3;
     8e8:	23 e0       	ldi	r18, 0x03	; 3
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	9c c0       	rjmp	.+312    	; 0xa26 <readMIDI()+0x1f8>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:831
            // It will be updated upon completion of this message.
        }

        const MidiType pendingType = getTypeFromStatusByte(mPendingMessage[0]);

        switch (pendingType)
     8ee:	80 3d       	cpi	r24, 0xD0	; 208
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <readMIDI()+0xc6>
     8f2:	97 c0       	rjmp	.+302    	; 0xa22 <readMIDI()+0x1f4>
     8f4:	f8 f4       	brcc	.+62     	; 0x934 <readMIDI()+0x106>
     8f6:	80 3c       	cpi	r24, 0xC0	; 192
     8f8:	09 f4       	brne	.+2      	; 0x8fc <readMIDI()+0xce>
     8fa:	93 c0       	rjmp	.+294    	; 0xa22 <readMIDI()+0x1f4>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:887
                break;

            case InvalidType:
            default:
                // This is obviously wrong. Let's get the hell out'a here.
                mLastError |= 1UL << ErrorParse; // set the ErrorParse bit
     8fc:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <MIDI+0xcf>
     900:	81 60       	ori	r24, 0x01	; 1
     902:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <MIDI+0xcf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:888
                if (mErrorCallback)
     906:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <MIDI+0x2>
     90a:	f0 91 b6 00 	lds	r31, 0x00B6	; 0x8000b6 <MIDI+0x3>
     90e:	30 97       	sbiw	r30, 0x00	; 0
     910:	09 f0       	breq	.+2      	; 0x914 <readMIDI()+0xe6>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:889
                    mErrorCallback(mLastError); // LCOV_EXCL_LINE
     912:	09 95       	icall
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10resetInputEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1122

// Private method: reset input attributes
template<class Transport, class Settings, class Platform>
inline void MidiInterface<Transport, Settings, Platform>::resetInput()
{
    mPendingMessageIndex = 0;
     914:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <MIDI+0x35>
     918:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1123
    mPendingMessageExpectedLength = 0;
     91c:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <MIDI+0x33>
     920:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1124
    mRunningStatus_RX = InvalidType;
     924:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <MIDI+0x2d>
_Z8readMIDIv():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:149
      digitalWrite(PIN_PC5, HIGH);
      nextMillis = millis() +  (MIDI.getData1() * 8);
    break;
    }
  }
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	08 95       	ret
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:831
            // It will be updated upon completion of this message.
        }

        const MidiType pendingType = getTypeFromStatusByte(mPendingMessage[0]);

        switch (pendingType)
     934:	80 3e       	cpi	r24, 0xE0	; 224
     936:	c1 f2       	breq	.-80     	; 0x8e8 <readMIDI()+0xba>
     938:	80 3f       	cpi	r24, 0xF0	; 240
     93a:	01 f7       	brne	.-64     	; 0x8fc <readMIDI()+0xce>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:879

            case SystemExclusiveStart:
            case SystemExclusiveEnd:
                // The message can be any length
                // between 3 and MidiMessage::sSysExMaxSize bytes
                mPendingMessageExpectedLength = MidiMessage::sSysExMaxSize;
     93c:	20 e8       	ldi	r18, 0x80	; 128
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	30 93 e6 00 	sts	0x00E6, r19	; 0x8000e6 <MIDI+0x33>
     944:	20 93 e5 00 	sts	0x00E5, r18	; 0x8000e5 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:880
                mRunningStatus_RX = InvalidType;
     948:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <MIDI+0x2d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:881
                mMessage.sysexArray[0] = pendingType;
     94c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <MIDI+0x3f>
     950:	6e c0       	rjmp	.+220    	; 0xa2e <readMIDI()+0x200>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:831
            // It will be updated upon completion of this message.
        }

        const MidiType pendingType = getTypeFromStatusByte(mPendingMessage[0]);

        switch (pendingType)
     952:	87 3f       	cpi	r24, 0xF7	; 247
     954:	99 f3       	breq	.-26     	; 0x93c <readMIDI()+0x10e>
     956:	08 f0       	brcs	.+2      	; 0x95a <readMIDI()+0x12c>
     958:	5d c0       	rjmp	.+186    	; 0xa14 <readMIDI()+0x1e6>
     95a:	83 3f       	cpi	r24, 0xF3	; 243
     95c:	09 f4       	brne	.+2      	; 0x960 <readMIDI()+0x132>
     95e:	61 c0       	rjmp	.+194    	; 0xa22 <readMIDI()+0x1f4>
     960:	18 f2       	brcs	.-122    	; 0x8e8 <readMIDI()+0xba>
     962:	86 3f       	cpi	r24, 0xF6	; 246
     964:	59 f6       	brne	.-106    	; 0x8fc <readMIDI()+0xce>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:843
            case Tick:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                // Handle the message type directly here.
                mMessage.type    = pendingType;
     966:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:844
                mMessage.channel = 0;
     96a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:845
                mMessage.data1   = 0;
     96e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:846
                mMessage.data2   = 0;
     972:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:847
                mMessage.valid   = true;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <MIDI+0xbf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:851

                // Do not reset all input attributes, Running Status must remain unchanged.
                // We still need to reset these
                mPendingMessageIndex = 0;
     97c:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <MIDI+0x35>
     980:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:852
                mPendingMessageExpectedLength = 0;
     984:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <MIDI+0x33>
     988:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <MIDI+0x32>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE33handleNullVelocityNoteOnAsNoteOffEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1083
// Private method, see midi_Settings.h for documentation
template<class Transport, class Settings, class Platform>
inline void MidiInterface<Transport, Settings, Platform>::handleNullVelocityNoteOnAsNoteOff()
{
    if (Settings::HandleNullVelocityNoteOnAsNoteOff &&
        getType() == NoteOn && getData2() == 0)
     98c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <MIDI+0x3c>
     990:	80 39       	cpi	r24, 0x90	; 144
     992:	39 f4       	brne	.+14     	; 0x9a2 <readMIDI()+0x174>
     994:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <MIDI+0x3e>
     998:	81 11       	cpse	r24, r1
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <readMIDI()+0x174>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1085
    {
        mMessage.type = NoteOff;
     99c:	80 e8       	ldi	r24, 0x80	; 128
     99e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <MIDI+0x3c>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE11inputFilterEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1097
{
    // This method handles recognition of channel
    // (to know if the message is destinated to the Arduino)

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
     9a2:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <MIDI+0x3c>
     9a6:	80 58       	subi	r24, 0x80	; 128
     9a8:	81 36       	cpi	r24, 0x61	; 97
     9aa:	38 f4       	brcc	.+14     	; 0x9ba <readMIDI()+0x18c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1100
    {
        // Then we need to know if we listen to it
        if ((mMessage.channel == inChannel) ||
     9ac:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <MIDI+0x3b>
     9b0:	18 17       	cp	r17, r24
     9b2:	19 f0       	breq	.+6      	; 0x9ba <readMIDI()+0x18c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1108
            return true;
        }
        else
        {
            // We don't listen to this channel
            return false;
     9b4:	c0 e0       	ldi	r28, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1100

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
    {
        // Then we need to know if we listen to it
        if ((mMessage.channel == inChannel) ||
     9b6:	11 11       	cpse	r17, r1
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <readMIDI()+0x194>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4readEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:772

    handleNullVelocityNoteOnAsNoteOff();

    const bool channelMatch = inputFilter(inChannel);
    if (channelMatch)
        launchCallback();
     9ba:	83 eb       	ldi	r24, 0xB3	; 179
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	b8 dd       	rcall	.-1168   	; 0x530 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()>
     9c0:	c1 e0       	ldi	r28, 0x01	; 1
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:774

    thruFilter(inChannel);
     9c2:	61 2f       	mov	r22, r17
     9c4:	83 eb       	ldi	r24, 0xB3	; 179
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	73 de       	rcall	.-794    	; 0x6b0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)>
_Z8readMIDIv():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:141

}


void readMIDI() {
  if(MIDI.read()) {
     9ca:	cc 23       	and	r28, r28
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <readMIDI()+0x1a2>
     9ce:	ac cf       	rjmp	.-168    	; 0x928 <readMIDI()+0xfa>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:142
  switch(MIDI.getType()) {
     9d0:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <MIDI+0x3c>
     9d4:	80 39       	cpi	r24, 0x90	; 144
     9d6:	09 f0       	breq	.+2      	; 0x9da <readMIDI()+0x1ac>
     9d8:	a7 cf       	rjmp	.-178    	; 0x928 <readMIDI()+0xfa>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:144
    case midi::NoteOn:
      digitalWrite(PIN_PC5, HIGH);
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	83 e1       	ldi	r24, 0x13	; 19
     9de:	1c d8       	rcall	.-4040   	; 0xfffffa18 <__eeprom_end+0xff7efa18>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:145
      nextMillis = millis() +  (MIDI.getData1() * 8);
     9e0:	9e d7       	rcall	.+3900   	; 0x191e <millis>
     9e2:	ab 01       	movw	r20, r22
     9e4:	bc 01       	movw	r22, r24
     9e6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <MIDI+0x3d>
     9ea:	28 e0       	ldi	r18, 0x08	; 8
     9ec:	82 9f       	mul	r24, r18
     9ee:	c0 01       	movw	r24, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	09 2e       	mov	r0, r25
     9f4:	00 0c       	add	r0, r0
     9f6:	aa 0b       	sbc	r26, r26
     9f8:	bb 0b       	sbc	r27, r27
     9fa:	84 0f       	add	r24, r20
     9fc:	95 1f       	adc	r25, r21
     9fe:	a6 1f       	adc	r26, r22
     a00:	b7 1f       	adc	r27, r23
     a02:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <nextMillis>
     a06:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <nextMillis+0x1>
     a0a:	a0 93 7e 00 	sts	0x007E, r26	; 0x80007e <nextMillis+0x2>
     a0e:	b0 93 7f 00 	sts	0x007F, r27	; 0x80007f <nextMillis+0x3>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:149
    break;
    }
  }
}
     a12:	8a cf       	rjmp	.-236    	; 0x928 <readMIDI()+0xfa>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:831
            // It will be updated upon completion of this message.
        }

        const MidiType pendingType = getTypeFromStatusByte(mPendingMessage[0]);

        switch (pendingType)
     a14:	8d 3f       	cpi	r24, 0xFD	; 253
     a16:	08 f4       	brcc	.+2      	; 0xa1a <readMIDI()+0x1ec>
     a18:	a6 cf       	rjmp	.-180    	; 0x966 <readMIDI()+0x138>
     a1a:	8e 3f       	cpi	r24, 0xFE	; 254
     a1c:	08 f0       	brcs	.+2      	; 0xa20 <readMIDI()+0x1f2>
     a1e:	a3 cf       	rjmp	.-186    	; 0x966 <readMIDI()+0x138>
     a20:	6d cf       	rjmp	.-294    	; 0x8fc <readMIDI()+0xce>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:862
            // 2 bytes messages
            case ProgramChange:
            case AfterTouchChannel:
            case TimeCodeQuarterFrame:
            case SongSelect:
                mPendingMessageExpectedLength = 2;
     a22:	22 e0       	ldi	r18, 0x02	; 2
     a24:	30 e0       	ldi	r19, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:872
            case NoteOff:
            case ControlChange:
            case PitchBend:
            case AfterTouchPoly:
            case SongPosition:
                mPendingMessageExpectedLength = 3;
     a26:	30 93 e6 00 	sts	0x00E6, r19	; 0x8000e6 <MIDI+0x33>
     a2a:	20 93 e5 00 	sts	0x00E5, r18	; 0x8000e5 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:896
                resetInput();
                return false;
                break;
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
     a2e:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <MIDI+0x34>
     a32:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <MIDI+0x35>
     a36:	40 91 e5 00 	lds	r20, 0x00E5	; 0x8000e5 <MIDI+0x32>
     a3a:	50 91 e6 00 	lds	r21, 0x00E6	; 0x8000e6 <MIDI+0x33>
     a3e:	41 50       	subi	r20, 0x01	; 1
     a40:	51 09       	sbc	r21, r1
     a42:	24 17       	cp	r18, r20
     a44:	35 07       	cpc	r19, r21
     a46:	e8 f0       	brcs	.+58     	; 0xa82 <readMIDI()+0x254>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:899
        {
            // Reception complete
            mMessage.type    = pendingType;
     a48:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <MIDI+0x3c>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE24getChannelFromStatusByteEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1238
/*! \brief Returns channel in the range 1-16
 */
template<class Transport, class Settings, class Platform>
inline Channel MidiInterface<Transport, Settings, Platform>::getChannelFromStatusByte(byte inStatus)
{
    return Channel((inStatus & 0x0f) + 1);
     a4c:	cf 70       	andi	r28, 0x0F	; 15
     a4e:	cf 5f       	subi	r28, 0xFF	; 255
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:900

        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
        {
            // Reception complete
            mMessage.type    = pendingType;
            mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
     a50:	c0 93 ee 00 	sts	0x00EE, r28	; 0x8000ee <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:901
            mMessage.data1   = mPendingMessage[1];
     a54:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <MIDI+0x30>
     a58:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:902
            mMessage.data2   = 0; // Completed new message has 1 data byte
     a5c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:903
            mMessage.length  = 1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <MIDI+0xc1>
     a68:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <MIDI+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:905

            mPendingMessageIndex = 0;
     a6c:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <MIDI+0x35>
     a70:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:906
            mPendingMessageExpectedLength = 0;
     a74:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <MIDI+0x33>
     a78:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:948
                    mMessage.type    = (MidiType)extracted;
                    mMessage.data1   = 0;
                    mMessage.data2   = 0;
                    mMessage.channel = 0;
                    mMessage.length  = 1;
                    mMessage.valid   = true;
     a7c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <MIDI+0xbf>
     a80:	85 cf       	rjmp	.-246    	; 0x98c <readMIDI()+0x15e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:914
            return true;
        }
        else
        {
            // Waiting for more data
            mPendingMessageIndex++;
     a82:	2f 5f       	subi	r18, 0xFF	; 255
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <MIDI+0x35>
     a8a:	20 93 e7 00 	sts	0x00E7, r18	; 0x8000e7 <MIDI+0x34>
     a8e:	4c cf       	rjmp	.-360    	; 0x928 <readMIDI()+0xfa>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:922
        return (Settings::Use1ByteParsing) ? false : parse();
    }
    else
    {
        // First, test if this is a status byte
        if (extracted >= 0x80)
     a90:	c7 ff       	sbrs	r28, 7
     a92:	0c c0       	rjmp	.+24     	; 0xaac <readMIDI()+0x27e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:926
        {
            // Reception of status bytes in the middle of an uncompleted message
            // are allowed only for interleaved Real Time message or EOX
            switch (extracted)
     a94:	cd 3f       	cpi	r28, 0xFD	; 253
     a96:	08 f0       	brcs	.+2      	; 0xa9a <readMIDI()+0x26c>
     a98:	4c c0       	rjmp	.+152    	; 0xb32 <readMIDI()+0x304>
     a9a:	c8 3f       	cpi	r28, 0xF8	; 248
     a9c:	08 f0       	brcs	.+2      	; 0xaa0 <readMIDI()+0x272>
     a9e:	4c c0       	rjmp	.+152    	; 0xb38 <readMIDI()+0x30a>
     aa0:	c0 3f       	cpi	r28, 0xF0	; 240
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <readMIDI()+0x278>
     aa4:	58 c0       	rjmp	.+176    	; 0xb56 <readMIDI()+0x328>
     aa6:	c7 3f       	cpi	r28, 0xF7	; 247
     aa8:	09 f4       	brne	.+2      	; 0xaac <readMIDI()+0x27e>
     aaa:	55 c0       	rjmp	.+170    	; 0xb56 <readMIDI()+0x328>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:990
                    break; // LCOV_EXCL_LINE - Coverage blind spot
            }
        }

        // Add extracted data byte to pending message
        if ((mPendingMessage[0] == SystemExclusiveStart)
     aac:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <MIDI+0x2f>
     ab0:	fc 01       	movw	r30, r24
     ab2:	ed 54       	subi	r30, 0x4D	; 77
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
     ab6:	20 3f       	cpi	r18, 0xF0	; 240
     ab8:	19 f0       	breq	.+6      	; 0xac0 <readMIDI()+0x292>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:991
        ||  (mPendingMessage[0] == SystemExclusiveEnd))
     aba:	27 3f       	cpi	r18, 0xF7	; 247
     abc:	09 f0       	breq	.+2      	; 0xac0 <readMIDI()+0x292>
     abe:	74 c0       	rjmp	.+232    	; 0xba8 <readMIDI()+0x37a>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:992
            mMessage.sysexArray[mPendingMessageIndex] = extracted;
     ac0:	c7 af       	std	Z+63, r28	; 0x3f
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:997
        else
            mPendingMessage[mPendingMessageIndex] = extracted;

        // Now we are going to check if we have reached the end of the message
        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
     ac2:	e0 90 e5 00 	lds	r14, 0x00E5	; 0x8000e5 <MIDI+0x32>
     ac6:	f0 90 e6 00 	lds	r15, 0x00E6	; 0x8000e6 <MIDI+0x33>
     aca:	97 01       	movw	r18, r14
     acc:	21 50       	subi	r18, 0x01	; 1
     ace:	31 09       	sbc	r19, r1
     ad0:	82 17       	cp	r24, r18
     ad2:	93 07       	cpc	r25, r19
     ad4:	08 f4       	brcc	.+2      	; 0xad8 <readMIDI()+0x2aa>
     ad6:	a5 c0       	rjmp	.+330    	; 0xc22 <readMIDI()+0x3f4>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1004
            // SysEx larger than the allocated buffer size,
            // Split SysEx like so:
            //   first:  0xF0 .... 0xF0
            //   midlle: 0xF7 .... 0xF0
            //   last:   0xF7 .... 0xF7
            if ((mPendingMessage[0] == SystemExclusiveStart)
     ad8:	d0 91 e2 00 	lds	r29, 0x00E2	; 0x8000e2 <MIDI+0x2f>
     adc:	d0 3f       	cpi	r29, 0xF0	; 240
     ade:	19 f0       	breq	.+6      	; 0xae6 <readMIDI()+0x2b8>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1005
            ||  (mPendingMessage[0] == SystemExclusiveEnd))
     ae0:	d7 3f       	cpi	r29, 0xF7	; 247
     ae2:	09 f0       	breq	.+2      	; 0xae6 <readMIDI()+0x2b8>
     ae4:	63 c0       	rjmp	.+198    	; 0xbac <readMIDI()+0x37e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1007
            {
                auto lastByte = mMessage.sysexArray[Settings::SysExMaxSize - 1];
     ae6:	c0 91 71 01 	lds	r28, 0x0171	; 0x800171 <MIDI+0xbe>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1008
                mMessage.sysexArray[Settings::SysExMaxSize - 1] = SystemExclusiveStart;
     aea:	80 ef       	ldi	r24, 0xF0	; 240
     aec:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <MIDI+0xbe>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1009
                mMessage.type = SystemExclusive;
     af0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1012

                // Get length
                mMessage.data1   = Settings::SysExMaxSize & 0xff; // LSB
     af4:	80 e8       	ldi	r24, 0x80	; 128
     af6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1013
                mMessage.data2   = byte(Settings::SysExMaxSize >> 8); // MSB
     afa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1014
                mMessage.channel = 0;
     afe:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1015
                mMessage.length  = Settings::SysExMaxSize;
     b02:	80 e8       	ldi	r24, 0x80	; 128
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <MIDI+0xc1>
     b0a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <MIDI+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1016
                mMessage.valid   = true;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <MIDI+0xbf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1020

                // No need to check against the inputChannel,
                // SysEx ignores input channel
                launchCallback();
     b14:	83 eb       	ldi	r24, 0xB3	; 179
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0b dd       	rcall	.-1514   	; 0x530 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1022

                mMessage.sysexArray[0] = SystemExclusiveEnd;
     b1a:	87 ef       	ldi	r24, 0xF7	; 247
     b1c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <MIDI+0x3f>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1023
                mMessage.sysexArray[1] = lastByte;
     b20:	c0 93 f3 00 	sts	0x00F3, r28	; 0x8000f3 <MIDI+0x40>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1025

                mPendingMessageIndex = 2;
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	90 e0       	ldi	r25, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1071
            return true;
        }
        else
        {
            // Then update the index of the pending message.
            mPendingMessageIndex++;
     b28:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <MIDI+0x35>
     b2c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <MIDI+0x34>
     b30:	fb ce       	rjmp	.-522    	; 0x928 <readMIDI()+0xfa>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:926
        // First, test if this is a status byte
        if (extracted >= 0x80)
        {
            // Reception of status bytes in the middle of an uncompleted message
            // are allowed only for interleaved Real Time message or EOX
            switch (extracted)
     b32:	ce 3f       	cpi	r28, 0xFE	; 254
     b34:	08 f4       	brcc	.+2      	; 0xb38 <readMIDI()+0x30a>
     b36:	ba cf       	rjmp	.-140    	; 0xaac <readMIDI()+0x27e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:943
                    // the MIDI class, and recompose the message it was
                    // interleaved into. Oh, and without killing the running status..
                    // This is done by leaving the pending message as is,
                    // it will be completed on next calls.

                    mMessage.type    = (MidiType)extracted;
     b38:	c0 93 ef 00 	sts	0x00EF, r28	; 0x8000ef <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:944
                    mMessage.data1   = 0;
     b3c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:945
                    mMessage.data2   = 0;
     b40:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:946
                    mMessage.channel = 0;
     b44:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:947
                    mMessage.length  = 1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <MIDI+0xc1>
     b50:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <MIDI+0xc0>
     b54:	93 cf       	rjmp	.-218    	; 0xa7c <readMIDI()+0x24e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:955
                    return true;

                    // Exclusive
                case SystemExclusiveStart:
                case SystemExclusiveEnd:
                    if ((mMessage.sysexArray[0] == SystemExclusiveStart)
     b56:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <MIDI+0x3f>
     b5a:	20 3f       	cpi	r18, 0xF0	; 240
     b5c:	19 f0       	breq	.+6      	; 0xb64 <readMIDI()+0x336>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:956
                    ||  (mMessage.sysexArray[0] == SystemExclusiveEnd))
     b5e:	27 3f       	cpi	r18, 0xF7	; 247
     b60:	09 f0       	breq	.+2      	; 0xb64 <readMIDI()+0x336>
     b62:	cc ce       	rjmp	.-616    	; 0x8fc <readMIDI()+0xce>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:959
                    {
                        // Store the last byte (EOX)
                        mMessage.sysexArray[mPendingMessageIndex++] = extracted;
     b64:	9c 01       	movw	r18, r24
     b66:	2f 5f       	subi	r18, 0xFF	; 255
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	8d 54       	subi	r24, 0x4D	; 77
     b6c:	9f 4f       	sbci	r25, 0xFF	; 255
     b6e:	fc 01       	movw	r30, r24
     b70:	c7 af       	std	Z+63, r28	; 0x3f
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:960
                        mMessage.type = SystemExclusive;
     b72:	80 ef       	ldi	r24, 0xF0	; 240
     b74:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:963

                        // Get length
                        mMessage.data1   = mPendingMessageIndex & 0xff; // LSB
     b78:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:964
                        mMessage.data2   = byte(mPendingMessageIndex >> 8);   // MSB
     b7c:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:965
                        mMessage.channel = 0;
     b80:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:966
                        mMessage.length  = mPendingMessageIndex;
     b84:	30 93 74 01 	sts	0x0174, r19	; 0x800174 <MIDI+0xc1>
     b88:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <MIDI+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:967
                        mMessage.valid   = true;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <MIDI+0xbf>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10resetInputEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1122

// Private method: reset input attributes
template<class Transport, class Settings, class Platform>
inline void MidiInterface<Transport, Settings, Platform>::resetInput()
{
    mPendingMessageIndex = 0;
     b92:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <MIDI+0x35>
     b96:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1123
    mPendingMessageExpectedLength = 0;
     b9a:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <MIDI+0x33>
     b9e:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <MIDI+0x32>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1063
                    mRunningStatus_RX = mPendingMessage[0];
                    break;

                default:
                    // No running status
                    mRunningStatus_RX = InvalidType;
     ba2:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <MIDI+0x2d>
     ba6:	f2 ce       	rjmp	.-540    	; 0x98c <readMIDI()+0x15e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:994
        // Add extracted data byte to pending message
        if ((mPendingMessage[0] == SystemExclusiveStart)
        ||  (mPendingMessage[0] == SystemExclusiveEnd))
            mMessage.sysexArray[mPendingMessageIndex] = extracted;
        else
            mPendingMessage[mPendingMessageIndex] = extracted;
     ba8:	c7 a7       	std	Z+47, r28	; 0x2f
     baa:	8b cf       	rjmp	.-234    	; 0xac2 <readMIDI()+0x294>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1030
                mPendingMessageIndex = 2;

                return false;
            }

            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
     bac:	8d 2f       	mov	r24, r29
     bae:	31 de       	rcall	.-926    	; 0x812 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)>
     bb0:	c8 2f       	mov	r28, r24
     bb2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1032

            if (isChannelMessage(mMessage.type))
     bb6:	1e de       	rcall	.-964    	; 0x7f4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)>
     bb8:	88 23       	and	r24, r24
     bba:	49 f1       	breq	.+82     	; 0xc0e <readMIDI()+0x3e0>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE24getChannelFromStatusByteEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1238
/*! \brief Returns channel in the range 1-16
 */
template<class Transport, class Settings, class Platform>
inline Channel MidiInterface<Transport, Settings, Platform>::getChannelFromStatusByte(byte inStatus)
{
    return Channel((inStatus & 0x0f) + 1);
     bbc:	8d 2f       	mov	r24, r29
     bbe:	8f 70       	andi	r24, 0x0F	; 15
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1033
            }

            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);

            if (isChannelMessage(mMessage.type))
                mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
     bc2:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1037
            else
                mMessage.channel = 0;

            mMessage.data1 = mPendingMessage[1];
     bc6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <MIDI+0x30>
     bca:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1039
            // Save data2 only if applicable
            mMessage.data2 = mPendingMessageExpectedLength == 3 ? mPendingMessage[2] : 0;
     bce:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <MIDI+0x31>
     bd2:	f3 e0       	ldi	r31, 0x03	; 3
     bd4:	ef 16       	cp	r14, r31
     bd6:	f1 04       	cpc	r15, r1
     bd8:	09 f0       	breq	.+2      	; 0xbdc <readMIDI()+0x3ae>
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1042

            // Reset local variables
            mPendingMessageIndex = 0;
     be0:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <MIDI+0x35>
     be4:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1043
            mPendingMessageExpectedLength = 0;
     be8:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <MIDI+0x33>
     bec:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1045

            mMessage.valid = true;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <MIDI+0xbf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1048

            // Activate running status (if enabled for the received type)
            switch (mMessage.type)
     bf6:	c0 3b       	cpi	r28, 0xB0	; 176
     bf8:	39 f0       	breq	.+14     	; 0xc08 <readMIDI()+0x3da>
     bfa:	60 f4       	brcc	.+24     	; 0xc14 <readMIDI()+0x3e6>
     bfc:	c0 39       	cpi	r28, 0x90	; 144
     bfe:	21 f0       	breq	.+8      	; 0xc08 <readMIDI()+0x3da>
     c00:	c0 3a       	cpi	r28, 0xA0	; 160
     c02:	11 f0       	breq	.+4      	; 0xc08 <readMIDI()+0x3da>
     c04:	c0 38       	cpi	r28, 0x80	; 128
     c06:	69 f6       	brne	.-102    	; 0xba2 <readMIDI()+0x374>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1058
                case ControlChange:
                case ProgramChange:
                case AfterTouchChannel:
                case PitchBend:
                    // Running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
     c08:	d0 93 e0 00 	sts	0x00E0, r29	; 0x8000e0 <MIDI+0x2d>
     c0c:	bf ce       	rjmp	.-642    	; 0x98c <readMIDI()+0x15e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1035
            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);

            if (isChannelMessage(mMessage.type))
                mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
            else
                mMessage.channel = 0;
     c0e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <MIDI+0x3b>
     c12:	d9 cf       	rjmp	.-78     	; 0xbc6 <readMIDI()+0x398>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1048
            mPendingMessageExpectedLength = 0;

            mMessage.valid = true;

            // Activate running status (if enabled for the received type)
            switch (mMessage.type)
     c14:	c0 3d       	cpi	r28, 0xD0	; 208
     c16:	c1 f3       	breq	.-16     	; 0xc08 <readMIDI()+0x3da>
     c18:	c0 3e       	cpi	r28, 0xE0	; 224
     c1a:	b1 f3       	breq	.-20     	; 0xc08 <readMIDI()+0x3da>
     c1c:	c0 3c       	cpi	r28, 0xC0	; 192
     c1e:	09 f6       	brne	.-126    	; 0xba2 <readMIDI()+0x374>
     c20:	f3 cf       	rjmp	.-26     	; 0xc08 <readMIDI()+0x3da>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1071
            return true;
        }
        else
        {
            // Then update the index of the pending message.
            mPendingMessageIndex++;
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	81 cf       	rjmp	.-254    	; 0xb28 <readMIDI()+0x2fa>

00000c26 <loop>:
loop():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:79
  keyboardStatusCC = 8;
  keyboardCodeCC = 9;
}

int result = 0;
void loop() {
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:81

if(millis() >= nextMillisEnc) {
     c2a:	79 d6       	rcall	.+3314   	; 0x191e <millis>
     c2c:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <nextMillisEnc>
     c30:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <nextMillisEnc+0x1>
     c34:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <nextMillisEnc+0x2>
     c38:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <nextMillisEnc+0x3>
     c3c:	60 17       	cp	r22, r16
     c3e:	71 07       	cpc	r23, r17
     c40:	82 07       	cpc	r24, r18
     c42:	93 07       	cpc	r25, r19
     c44:	08 f4       	brcc	.+2      	; 0xc48 <loop+0x22>
     c46:	ae c0       	rjmp	.+348    	; 0xda4 <loop+0x17e>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:82
  if (digitalRead(PIN_PD4)) {
     c48:	84 e0       	ldi	r24, 0x04	; 4
     c4a:	13 d7       	rcall	.+3622   	; 0x1a72 <digitalRead>
     c4c:	89 2b       	or	r24, r25
     c4e:	09 f4       	brne	.+2      	; 0xc52 <loop+0x2c>
     c50:	ca c0       	rjmp	.+404    	; 0xde6 <loop+0x1c0>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     c52:	88 ea       	ldi	r24, 0xA8	; 168
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	33 db       	rcall	.-2458   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     c58:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <en0+0x7>
     c5c:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <en0+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     c60:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <en0+0x7>
     c64:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <en0+0x8>
     c68:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <en0+0x9>
     c6c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <en0+0xa>
loop():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:84
    
    result = en0.readAndReset();
     c70:	c9 01       	movw	r24, r18
     c72:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     c76:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:85
    if (result != 0) { MIDI.sendControlChange(0, 64 - result, adress); }
     c7a:	89 2b       	or	r24, r25
     c7c:	41 f0       	breq	.+16     	; 0xc8e <loop+0x68>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:85 (discriminator 1)
     c7e:	40 e4       	ldi	r20, 0x40	; 64
     c80:	42 1b       	sub	r20, r18
     c82:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	83 eb       	ldi	r24, 0xB3	; 179
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	49 dc       	rcall	.-1902   	; 0x520 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     c8e:	8d e9       	ldi	r24, 0x9D	; 157
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	15 db       	rcall	.-2518   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     c94:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <en1+0x7>
     c98:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <en1+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     c9c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <en1+0x7>
     ca0:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <en1+0x8>
     ca4:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <en1+0x9>
     ca8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <en1+0xa>
loop():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:87

    result = en1.readAndReset();
     cac:	c9 01       	movw	r24, r18
     cae:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     cb2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:88
    if (result != 0) { MIDI.sendControlChange(1, 64 - result, adress); }
     cb6:	89 2b       	or	r24, r25
     cb8:	41 f0       	breq	.+16     	; 0xcca <loop+0xa4>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:88 (discriminator 1)
     cba:	40 e4       	ldi	r20, 0x40	; 64
     cbc:	42 1b       	sub	r20, r18
     cbe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	83 eb       	ldi	r24, 0xB3	; 179
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	2b dc       	rcall	.-1962   	; 0x520 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     cca:	82 e9       	ldi	r24, 0x92	; 146
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	f7 da       	rcall	.-2578   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     cd0:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <en2+0x7>
     cd4:	30 91 9a 00 	lds	r19, 0x009A	; 0x80009a <en2+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     cd8:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <en2+0x7>
     cdc:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <en2+0x8>
     ce0:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <en2+0x9>
     ce4:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <en2+0xa>
loop():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:90
    
    result = en2.readAndReset();
     ce8:	c9 01       	movw	r24, r18
     cea:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     cee:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:91
    if (result != 0) { MIDI.sendControlChange(2, 64 - result, adress); }
     cf2:	89 2b       	or	r24, r25
     cf4:	41 f0       	breq	.+16     	; 0xd06 <loop+0xe0>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:91 (discriminator 1)
     cf6:	40 e4       	ldi	r20, 0x40	; 64
     cf8:	42 1b       	sub	r20, r18
     cfa:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     cfe:	62 e0       	ldi	r22, 0x02	; 2
     d00:	83 eb       	ldi	r24, 0xB3	; 179
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0d dc       	rcall	.-2022   	; 0x520 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     d06:	87 e8       	ldi	r24, 0x87	; 135
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	d9 da       	rcall	.-2638   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     d0c:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <en3+0x7>
     d10:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <en3+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     d14:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <en3+0x7>
     d18:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <en3+0x8>
     d1c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <en3+0x9>
     d20:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <en3+0xa>
loop():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:94

    
    result = en3.readAndReset();
     d24:	c9 01       	movw	r24, r18
     d26:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     d2a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:95
    if (result != 0) { MIDI.sendControlChange(3, 64 - result, adress); }
     d2e:	89 2b       	or	r24, r25
     d30:	41 f0       	breq	.+16     	; 0xd42 <loop+0x11c>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:95 (discriminator 1)
     d32:	40 e4       	ldi	r20, 0x40	; 64
     d34:	42 1b       	sub	r20, r18
     d36:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     d3a:	63 e0       	ldi	r22, 0x03	; 3
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:109 (discriminator 1)

    result = en2.readAndReset();
    if (result != 0) { MIDI.sendControlChange(6, 64 - result, adress); }

    result = en3.readAndReset();
    if (result != 0) { MIDI.sendControlChange(7, 64 - result, adress); }
     d3c:	83 eb       	ldi	r24, 0xB3	; 179
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	ef db       	rcall	.-2082   	; 0x520 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:111
  }
 if (keyboard.available()) {
     d42:	85 e8       	ldi	r24, 0x85	; 133
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	c0 d4       	rcall	.+2432   	; 0x16c8 <PS2KeyAdvanced::available()>
     d48:	88 23       	and	r24, r24
     d4a:	f9 f0       	breq	.+62     	; 0xd8a <loop+0x164>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:112
    code = keyboard.read();
     d4c:	85 e8       	ldi	r24, 0x85	; 133
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	e6 d4       	rcall	.+2508   	; 0x171e <PS2KeyAdvanced::read()>
     d52:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <code+0x1>
     d56:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <code>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:113
    readMIDI();
     d5a:	69 dd       	rcall	.-1326   	; 0x82e <readMIDI()>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:115

    if (code > 0) {
     d5c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <code>
     d60:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <code+0x1>
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	89 f0       	breq	.+34     	; 0xd8a <loop+0x164>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:117
     // MIDI.sendNoteOn(code >> 8, code & 0xFF, adress);
     MIDI.sendControlChange(keyboardStatusCC, code >> 8, adress);
     d68:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     d6c:	49 2f       	mov	r20, r25
     d6e:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <keyboardStatusCC>
     d72:	83 eb       	ldi	r24, 0xB3	; 179
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	d4 db       	rcall	.-2136   	; 0x520 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:118
     MIDI.sendControlChange(keyboardCodeCC, code & 0xFF, adress);
     d78:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     d7c:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <code>
     d80:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <keyboardCodeCC>
     d84:	83 eb       	ldi	r24, 0xB3	; 179
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	cb db       	rcall	.-2154   	; 0x520 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:122
    }
  }
 
  nextMillisEnc = millis() + 100;
     d8a:	c9 d5       	rcall	.+2962   	; 0x191e <millis>
     d8c:	6c 59       	subi	r22, 0x9C	; 156
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	8f 4f       	sbci	r24, 0xFF	; 255
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <nextMillisEnc>
     d98:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <nextMillisEnc+0x1>
     d9c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <nextMillisEnc+0x2>
     da0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <nextMillisEnc+0x3>
_ZN7Encoder4readEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:141
		encoder.position = p;
		interrupts();
	}
#else
	inline int32_t read() {
		update(&encoder);
     da4:	88 ea       	ldi	r24, 0xA8	; 168
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	8a da       	rcall	.-2796   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
     daa:	8d e9       	ldi	r24, 0x9D	; 157
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	87 da       	rcall	.-2802   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
     db0:	82 e9       	ldi	r24, 0x92	; 146
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	84 da       	rcall	.-2808   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
     db6:	87 e8       	ldi	r24, 0x87	; 135
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	81 da       	rcall	.-2814   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
loop():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:130
  en0.read();
  en1.read();
  en2.read();
  en3.read();

  readMIDI();
     dbc:	38 dd       	rcall	.-1424   	; 0x82e <readMIDI()>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:133


  if( millis() >= nextMillis ) {
     dbe:	af d5       	rcall	.+2910   	; 0x191e <millis>
     dc0:	00 91 7c 00 	lds	r16, 0x007C	; 0x80007c <nextMillis>
     dc4:	10 91 7d 00 	lds	r17, 0x007D	; 0x80007d <nextMillis+0x1>
     dc8:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <nextMillis+0x2>
     dcc:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <nextMillis+0x3>
     dd0:	60 17       	cp	r22, r16
     dd2:	71 07       	cpc	r23, r17
     dd4:	82 07       	cpc	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	08 f4       	brcc	.+2      	; 0xddc <loop+0x1b6>
     dda:	7c c0       	rjmp	.+248    	; 0xed4 <loop+0x2ae>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:134
        digitalWrite(PIN_PC5, LOW);
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	83 e1       	ldi	r24, 0x13	; 19
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:137
  }

}
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:134

  readMIDI();


  if( millis() >= nextMillis ) {
        digitalWrite(PIN_PC5, LOW);
     de4:	19 c6       	rjmp	.+3122   	; 0x1a18 <digitalWrite>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     de6:	88 ea       	ldi	r24, 0xA8	; 168
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	69 da       	rcall	.-2862   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     dec:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <en0+0x7>
     df0:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <en0+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     df4:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <en0+0x7>
     df8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <en0+0x8>
     dfc:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <en0+0x9>
     e00:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <en0+0xa>
loop():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:99
    result = en3.readAndReset();
    if (result != 0) { MIDI.sendControlChange(3, 64 - result, adress); }

    
  } else {
    result = en0.readAndReset();
     e04:	c9 01       	movw	r24, r18
     e06:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     e0a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:100
    if (result != 0) { MIDI.sendControlChange(4, 64 - result, adress); }
     e0e:	89 2b       	or	r24, r25
     e10:	41 f0       	breq	.+16     	; 0xe22 <loop+0x1fc>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:100 (discriminator 1)
     e12:	40 e4       	ldi	r20, 0x40	; 64
     e14:	42 1b       	sub	r20, r18
     e16:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     e1a:	64 e0       	ldi	r22, 0x04	; 4
     e1c:	83 eb       	ldi	r24, 0xB3	; 179
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	7f db       	rcall	.-2306   	; 0x520 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     e22:	8d e9       	ldi	r24, 0x9D	; 157
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	4b da       	rcall	.-2922   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     e28:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <en1+0x7>
     e2c:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <en1+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     e30:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <en1+0x7>
     e34:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <en1+0x8>
     e38:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <en1+0x9>
     e3c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <en1+0xa>
loop():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:102

    result = en1.readAndReset();
     e40:	c9 01       	movw	r24, r18
     e42:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     e46:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:103
    if (result != 0) { MIDI.sendControlChange(5, 64 - result, adress); }
     e4a:	89 2b       	or	r24, r25
     e4c:	41 f0       	breq	.+16     	; 0xe5e <loop+0x238>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:103 (discriminator 1)
     e4e:	40 e4       	ldi	r20, 0x40	; 64
     e50:	42 1b       	sub	r20, r18
     e52:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     e56:	65 e0       	ldi	r22, 0x05	; 5
     e58:	83 eb       	ldi	r24, 0xB3	; 179
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	61 db       	rcall	.-2366   	; 0x520 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     e5e:	82 e9       	ldi	r24, 0x92	; 146
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	2d da       	rcall	.-2982   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     e64:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <en2+0x7>
     e68:	30 91 9a 00 	lds	r19, 0x009A	; 0x80009a <en2+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     e6c:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <en2+0x7>
     e70:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <en2+0x8>
     e74:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <en2+0x9>
     e78:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <en2+0xa>
loop():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:105

    result = en2.readAndReset();
     e7c:	c9 01       	movw	r24, r18
     e7e:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     e82:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:106
    if (result != 0) { MIDI.sendControlChange(6, 64 - result, adress); }
     e86:	89 2b       	or	r24, r25
     e88:	41 f0       	breq	.+16     	; 0xe9a <loop+0x274>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:106 (discriminator 1)
     e8a:	40 e4       	ldi	r20, 0x40	; 64
     e8c:	42 1b       	sub	r20, r18
     e8e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     e92:	66 e0       	ldi	r22, 0x06	; 6
     e94:	83 eb       	ldi	r24, 0xB3	; 179
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	43 db       	rcall	.-2426   	; 0x520 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     e9a:	87 e8       	ldi	r24, 0x87	; 135
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0f da       	rcall	.-3042   	; 0x2be <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     ea0:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <en3+0x7>
     ea4:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <en3+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     ea8:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <en3+0x7>
     eac:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <en3+0x8>
     eb0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <en3+0x9>
     eb4:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <en3+0xa>
loop():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:108

    result = en3.readAndReset();
     eb8:	c9 01       	movw	r24, r18
     eba:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     ebe:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:109
    if (result != 0) { MIDI.sendControlChange(7, 64 - result, adress); }
     ec2:	89 2b       	or	r24, r25
     ec4:	09 f4       	brne	.+2      	; 0xec8 <loop+0x2a2>
     ec6:	3d cf       	rjmp	.-390    	; 0xd42 <loop+0x11c>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:109 (discriminator 1)
     ec8:	40 e4       	ldi	r20, 0x40	; 64
     eca:	42 1b       	sub	r20, r18
     ecc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <adress>
     ed0:	67 e0       	ldi	r22, 0x07	; 7
     ed2:	34 cf       	rjmp	.-408    	; 0xd3c <loop+0x116>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:137

  if( millis() >= nextMillis ) {
        digitalWrite(PIN_PC5, LOW);
  }

}
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	08 95       	ret

00000eda <_GLOBAL__sub_I_keyboard>:
_GLOBAL__sub_I_keyboard():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:36

#define DataPin PIN_PD2
#define IRQPin PIN_PD3


PS2KeyAdvanced keyboard;
     eda:	85 e8       	ldi	r24, 0x85	; 133
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	35 d4       	rcall	.+2154   	; 0x174a <PS2KeyAdvanced::PS2KeyAdvanced()>
_ZN4midi10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEC4ERS1_():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/serialMIDI.h:49
{
    typedef _Settings Settings;

public:
	SerialMIDI(SerialPort& inSerial)
        : mSerial(inSerial)
     ee0:	89 ec       	ldi	r24, 0xC9	; 201
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <serialMIDI+0x1>
     ee8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <serialMIDI>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEEC4ERS4_():
    , mThruFilterMode(Thru::Full)
    , mLastMessageSentTime(0)
    , mLastMessageReceivedTime(0)
    , mSenderActiveSensingPeriodicity(0)
    , mReceiverActiveSensingActivated(false)
    , mLastError(0)
     eec:	e3 eb       	ldi	r30, 0xB3	; 179
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	11 82       	std	Z+1, r1	; 0x01
     ef2:	10 82       	st	Z, r1
     ef4:	13 82       	std	Z+3, r1	; 0x03
     ef6:	12 82       	std	Z+2, r1	; 0x02
     ef8:	15 82       	std	Z+5, r1	; 0x05
     efa:	14 82       	std	Z+4, r1	; 0x04
     efc:	17 82       	std	Z+7, r1	; 0x07
     efe:	16 82       	std	Z+6, r1	; 0x06
     f00:	11 86       	std	Z+9, r1	; 0x09
     f02:	10 86       	std	Z+8, r1	; 0x08
     f04:	13 86       	std	Z+11, r1	; 0x0b
     f06:	12 86       	std	Z+10, r1	; 0x0a
     f08:	15 86       	std	Z+13, r1	; 0x0d
     f0a:	14 86       	std	Z+12, r1	; 0x0c
     f0c:	17 86       	std	Z+15, r1	; 0x0f
     f0e:	16 86       	std	Z+14, r1	; 0x0e
     f10:	11 8a       	std	Z+17, r1	; 0x11
     f12:	10 8a       	std	Z+16, r1	; 0x10
     f14:	13 8a       	std	Z+19, r1	; 0x13
     f16:	12 8a       	std	Z+18, r1	; 0x12
     f18:	15 8a       	std	Z+21, r1	; 0x15
     f1a:	14 8a       	std	Z+20, r1	; 0x14
     f1c:	17 8a       	std	Z+23, r1	; 0x17
     f1e:	16 8a       	std	Z+22, r1	; 0x16
     f20:	11 8e       	std	Z+25, r1	; 0x19
     f22:	10 8e       	std	Z+24, r1	; 0x18
     f24:	13 8e       	std	Z+27, r1	; 0x1b
     f26:	12 8e       	std	Z+26, r1	; 0x1a
     f28:	15 8e       	std	Z+29, r1	; 0x1d
     f2a:	14 8e       	std	Z+28, r1	; 0x1c
     f2c:	17 8e       	std	Z+31, r1	; 0x1f
     f2e:	16 8e       	std	Z+30, r1	; 0x1e
     f30:	11 a2       	std	Z+33, r1	; 0x21
     f32:	10 a2       	std	Z+32, r1	; 0x20
     f34:	13 a2       	std	Z+35, r1	; 0x23
     f36:	12 a2       	std	Z+34, r1	; 0x22
     f38:	15 a2       	std	Z+37, r1	; 0x25
     f3a:	14 a2       	std	Z+36, r1	; 0x24
     f3c:	17 a2       	std	Z+39, r1	; 0x27
     f3e:	16 a2       	std	Z+38, r1	; 0x26
     f40:	11 a6       	std	Z+41, r1	; 0x29
     f42:	10 a6       	std	Z+40, r1	; 0x28
     f44:	83 e8       	ldi	r24, 0x83	; 131
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	93 a7       	std	Z+43, r25	; 0x2b
     f4a:	82 a7       	std	Z+42, r24	; 0x2a
     f4c:	14 a6       	std	Z+44, r1	; 0x2c
     f4e:	15 a6       	std	Z+45, r1	; 0x2d
     f50:	16 a6       	std	Z+46, r1	; 0x2e
     f52:	13 aa       	std	Z+51, r1	; 0x33
     f54:	12 aa       	std	Z+50, r1	; 0x32
     f56:	15 aa       	std	Z+53, r1	; 0x35
     f58:	14 aa       	std	Z+52, r1	; 0x34
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	9f ef       	ldi	r25, 0xFF	; 255
     f5e:	97 ab       	std	Z+55, r25	; 0x37
     f60:	86 ab       	std	Z+54, r24	; 0x36
     f62:	91 af       	std	Z+57, r25	; 0x39
     f64:	80 af       	std	Z+56, r24	; 0x38
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <MIDI+0x3a>
_ZN4midi7MessageILj128EEC4Ev():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/midi_Message.h:52
    inline Message()
        : channel(0)
        , type(MIDI_NAMESPACE::InvalidType)
        , data1(0)
        , data2(0)
        , valid(false)
     f6c:	13 ae       	std	Z+59, r1	; 0x3b
     f6e:	14 ae       	std	Z+60, r1	; 0x3c
     f70:	15 ae       	std	Z+61, r1	; 0x3d
     f72:	16 ae       	std	Z+62, r1	; 0x3e
     f74:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <MIDI+0xbf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/midi_Message.h:54
    {
        memset(sysexArray, 0, sSysExMaxSize * sizeof(DataByte));
     f78:	e2 ef       	ldi	r30, 0xF2	; 242
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 e8       	ldi	r24, 0x80	; 128
     f7e:	df 01       	movw	r26, r30
     f80:	1d 92       	st	X+, r1
     f82:	8a 95       	dec	r24
     f84:	e9 f7       	brne	.-6      	; 0xf80 <_GLOBAL__sub_I_keyboard+0xa6>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEEC4ERS4_():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:49
     f86:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <MIDI+0xc2>
     f8a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <MIDI+0xc3>
     f8e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <MIDI+0xc4>
     f92:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <MIDI+0xc5>
     f96:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <MIDI+0xc6>
     f9a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <MIDI+0xc7>
     f9e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <MIDI+0xc8>
     fa2:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <MIDI+0xc9>
     fa6:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <MIDI+0xca>
     faa:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <MIDI+0xcb>
     fae:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <MIDI+0xcc>
     fb2:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <MIDI+0xcd>
     fb6:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <MIDI+0xce>
     fba:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <MIDI+0xcf>
_GLOBAL__sub_I_keyboard():
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:39
MIDI_CREATE_DEFAULT_INSTANCE();

Encoder en0(PIN_PD5, PIN_PD6);
     fbe:	46 e0       	ldi	r20, 0x06	; 6
     fc0:	65 e0       	ldi	r22, 0x05	; 5
     fc2:	88 ea       	ldi	r24, 0xA8	; 168
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	2a d9       	rcall	.-3500   	; 0x21c <Encoder::Encoder(unsigned char, unsigned char)>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:40
Encoder en1(PIN_PD7, PIN_PB0);
     fc8:	48 e0       	ldi	r20, 0x08	; 8
     fca:	67 e0       	ldi	r22, 0x07	; 7
     fcc:	8d e9       	ldi	r24, 0x9D	; 157
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	25 d9       	rcall	.-3510   	; 0x21c <Encoder::Encoder(unsigned char, unsigned char)>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:41
Encoder en2(PIN_PB1, PIN_PB2);
     fd2:	4a e0       	ldi	r20, 0x0A	; 10
     fd4:	69 e0       	ldi	r22, 0x09	; 9
     fd6:	82 e9       	ldi	r24, 0x92	; 146
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	20 d9       	rcall	.-3520   	; 0x21c <Encoder::Encoder(unsigned char, unsigned char)>
/Users/moritz/Nextcloud2/Bachelor/distel-hardware/arduino/Distel/Distel.ino:42
Encoder en3(PIN_PC0, PIN_PC1);
     fdc:	4f e0       	ldi	r20, 0x0F	; 15
     fde:	6e e0       	ldi	r22, 0x0E	; 14
     fe0:	87 e8       	ldi	r24, 0x87	; 135
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	1b c9       	rjmp	.-3530   	; 0x21c <Encoder::Encoder(unsigned char, unsigned char)>

00000fe6 <send_byte(unsigned char)>:
_Z9send_byteh():
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:920
                -5 parameter error
                */
int PS2KeyAdvanced::typematic( uint8_t rate, uint8_t delay )
{
if( rate > 31 || delay > 3 )
  return -5;
     fe6:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <_tx_head>
     fea:	9f 5f       	subi	r25, 0xFF	; 255
     fec:	96 30       	cpi	r25, 0x06	; 6
     fee:	08 f0       	brcs	.+2      	; 0xff2 <send_byte(unsigned char)+0xc>
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <_tx_tail>
     ff6:	29 17       	cp	r18, r25
     ff8:	51 f0       	breq	.+20     	; 0x100e <send_byte(unsigned char)+0x28>
     ffa:	e9 2f       	mov	r30, r25
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	ed 55       	subi	r30, 0x5D	; 93
    1000:	fe 4f       	sbci	r31, 0xFE	; 254
    1002:	80 83       	st	Z, r24
    1004:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <_tx_head>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	08 95       	ret
    100e:	8c ef       	ldi	r24, 0xFC	; 252
    1010:	9f ef       	ldi	r25, 0xFF	; 255
    1012:	08 95       	ret

00001014 <pininput(unsigned char)>:
_Z8pininputh():
    1014:	62 e0       	ldi	r22, 0x02	; 2
    1016:	c4 c4       	rjmp	.+2440   	; 0x19a0 <pinMode>

00001018 <send_now(unsigned char)>:
_Z8send_nowh():
    1018:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_shiftdata>
    101c:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <_now_send>
    1020:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <_bitcount>
    1024:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <_parity>
    1028:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    102c:	80 6c       	ori	r24, 0xC0	; 192
    102e:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <_ps2mode>
    1032:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_tx_ready>
    1036:	87 fd       	sbrc	r24, 7
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <send_now(unsigned char)+0x3c>
    103a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_tx_ready>
    103e:	80 ff       	sbrs	r24, 0
    1040:	09 c0       	rjmp	.+18     	; 0x1054 <send_now(unsigned char)+0x3c>
    1042:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_response_count>
    1046:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <_bytes_expected>
    104a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    104e:	80 61       	ori	r24, 0x10	; 16
    1050:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <_ps2mode>
    1054:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <PS2_IrqPin>
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	89 f1       	breq	.+98     	; 0x10be <send_now(unsigned char)+0xa6>
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	89 f1       	breq	.+98     	; 0x10c2 <send_now(unsigned char)+0xaa>
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	b0 d3       	rcall	.+1888   	; 0x17c4 <detachInterrupt>
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <PS2_DataPin>
    106a:	d6 d4       	rcall	.+2476   	; 0x1a18 <digitalWrite>
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <PS2_DataPin>
    1072:	96 d4       	rcall	.+2348   	; 0x19a0 <pinMode>
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <PS2_IrqPin>
    107a:	ce d4       	rcall	.+2460   	; 0x1a18 <digitalWrite>
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <PS2_IrqPin>
    1082:	8e d4       	rcall	.+2332   	; 0x19a0 <pinMode>
    1084:	8a e0       	ldi	r24, 0x0A	; 10
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	56 d4       	rcall	.+2220   	; 0x1936 <delayMicroseconds>
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <PS2_IrqPin>
    1090:	c3 d4       	rcall	.+2438   	; 0x1a18 <digitalWrite>
    1092:	8c e3       	ldi	r24, 0x3C	; 60
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	4f d4       	rcall	.+2206   	; 0x1936 <delayMicroseconds>
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <PS2_DataPin>
    109e:	bc d4       	rcall	.+2424   	; 0x1a18 <digitalWrite>
    10a0:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <PS2_IrqPin>
    10a4:	b7 df       	rcall	.-146    	; 0x1014 <pininput(unsigned char)>
    10a6:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <PS2_IrqPin>
    10aa:	82 30       	cpi	r24, 0x02	; 2
    10ac:	61 f0       	breq	.+24     	; 0x10c6 <send_now(unsigned char)+0xae>
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	61 f0       	breq	.+24     	; 0x10ca <send_now(unsigned char)+0xb2>
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	42 e0       	ldi	r20, 0x02	; 2
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	60 e9       	ldi	r22, 0x90	; 144
    10ba:	79 e0       	ldi	r23, 0x09	; 9
    10bc:	64 c3       	rjmp	.+1736   	; 0x1786 <attachInterrupt>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	d0 cf       	rjmp	.-96     	; 0x1062 <send_now(unsigned char)+0x4a>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	ce cf       	rjmp	.-100    	; 0x1062 <send_now(unsigned char)+0x4a>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	f5 cf       	rjmp	.-22     	; 0x10b4 <send_now(unsigned char)+0x9c>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	f3 cf       	rjmp	.-26     	; 0x10b4 <send_now(unsigned char)+0x9c>

000010ce <send_next()>:
_Z9send_nextv():
    10ce:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_tx_tail>
    10d2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_tx_head>
    10d6:	89 17       	cp	r24, r25
    10d8:	91 f1       	breq	.+100    	; 0x113e <send_next()+0x70>
    10da:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_tx_ready>
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_tx_ready>
    10e4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_tx_ready>
    10e8:	87 fd       	sbrc	r24, 7
    10ea:	2c c0       	rjmp	.+88     	; 0x1144 <send_next()+0x76>
    10ec:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    10f0:	87 fd       	sbrc	r24, 7
    10f2:	28 c0       	rjmp	.+80     	; 0x1144 <send_next()+0x76>
    10f4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_response_count>
    10f8:	2f ef       	ldi	r18, 0xFF	; 255
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	9f 5f       	subi	r25, 0xFF	; 255
    10fe:	96 30       	cpi	r25, 0x06	; 6
    1100:	08 f0       	brcs	.+2      	; 0x1104 <send_next()+0x36>
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	e9 2f       	mov	r30, r25
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	ed 55       	subi	r30, 0x5D	; 93
    110a:	fe 4f       	sbci	r31, 0xFE	; 254
    110c:	2f 3f       	cpi	r18, 0xFF	; 255
    110e:	32 07       	cpc	r19, r18
    1110:	69 f4       	brne	.+26     	; 0x112c <send_next()+0x5e>
    1112:	20 81       	ld	r18, Z
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <_tx_tail>
    111a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_tx_head>
    111e:	89 13       	cpse	r24, r25
    1120:	ed cf       	rjmp	.-38     	; 0x10fc <send_next()+0x2e>
    1122:	82 2f       	mov	r24, r18
    1124:	79 df       	rcall	.-270    	; 0x1018 <send_now(unsigned char)>
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	08 95       	ret
    112c:	80 81       	ld	r24, Z
    112e:	8b 3b       	cpi	r24, 0xBB	; 187
    1130:	c1 f7       	brne	.-16     	; 0x1122 <send_next()+0x54>
    1132:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_response_count>
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_response_count>
    113c:	ec cf       	rjmp	.-40     	; 0x1116 <send_next()+0x48>
    113e:	8e ef       	ldi	r24, 0xFE	; 254
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	08 95       	ret
    1144:	8a e7       	ldi	r24, 0x7A	; 122
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	08 95       	ret

0000114a <send_bit()>:
_Z8send_bitv():
    114a:	cf 93       	push	r28
    114c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_bitcount>
    1150:	8f 5f       	subi	r24, 0xFF	; 255
    1152:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_bitcount>
    1156:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_bitcount>
    115a:	8a 30       	cpi	r24, 0x0A	; 10
    115c:	48 f4       	brcc	.+18     	; 0x1170 <send_bit()+0x26>
    115e:	82 30       	cpi	r24, 0x02	; 2
    1160:	90 f5       	brcc	.+100    	; 0x11c6 <send_bit()+0x7c>
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	09 f4       	brne	.+2      	; 0x116a <send_bit()+0x20>
    1168:	47 c0       	rjmp	.+142    	; 0x11f8 <send_bit()+0xae>
    116a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <_bitcount>
    116e:	3e c0       	rjmp	.+124    	; 0x11ec <send_bit()+0xa2>
    1170:	8b 30       	cpi	r24, 0x0B	; 11
    1172:	09 f4       	brne	.+2      	; 0x1176 <send_bit()+0x2c>
    1174:	45 c0       	rjmp	.+138    	; 0x1200 <send_bit()+0xb6>
    1176:	e0 f1       	brcs	.+120    	; 0x11f0 <send_bit()+0xa6>
    1178:	8c 30       	cpi	r24, 0x0C	; 12
    117a:	b9 f7       	brne	.-18     	; 0x116a <send_bit()+0x20>
    117c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_now_send>
    1180:	8e 3e       	cpi	r24, 0xEE	; 238
    1182:	69 f0       	breq	.+26     	; 0x119e <send_bit()+0x54>
    1184:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_now_send>
    1188:	8e 3f       	cpi	r24, 0xFE	; 254
    118a:	49 f0       	breq	.+18     	; 0x119e <send_bit()+0x54>
    118c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_now_send>
    1190:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <_last_sent>
    1194:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    1198:	82 60       	ori	r24, 0x02	; 2
    119a:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <_ps2mode>
    119e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    11a2:	8f 7b       	andi	r24, 0xBF	; 191
    11a4:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <_ps2mode>
    11a8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_tx_ready>
    11ac:	87 ff       	sbrs	r24, 7
    11ae:	2c c0       	rjmp	.+88     	; 0x1208 <send_bit()+0xbe>
    11b0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_tx_ready>
    11b4:	8f 77       	andi	r24, 0x7F	; 127
    11b6:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_tx_ready>
    11ba:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    11be:	84 fd       	sbrc	r24, 4
    11c0:	d4 cf       	rjmp	.-88     	; 0x116a <send_bit()+0x20>
    11c2:	85 df       	rcall	.-246    	; 0x10ce <send_next()>
    11c4:	d2 cf       	rjmp	.-92     	; 0x116a <send_bit()+0x20>
    11c6:	c0 91 aa 01 	lds	r28, 0x01AA	; 0x8001aa <_shiftdata>
    11ca:	c1 70       	andi	r28, 0x01	; 1
    11cc:	6c 2f       	mov	r22, r28
    11ce:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <PS2_DataPin>
    11d2:	22 d4       	rcall	.+2116   	; 0x1a18 <digitalWrite>
    11d4:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_parity>
    11d8:	c8 0f       	add	r28, r24
    11da:	c0 93 a9 01 	sts	0x01A9, r28	; 0x8001a9 <_parity>
    11de:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_shiftdata>
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	95 95       	asr	r25
    11e6:	87 95       	ror	r24
    11e8:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_shiftdata>
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret
    11f0:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <_parity>
    11f4:	60 95       	com	r22
    11f6:	61 70       	andi	r22, 0x01	; 1
    11f8:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <PS2_DataPin>
    11fc:	cf 91       	pop	r28
    11fe:	0c c4       	rjmp	.+2072   	; 0x1a18 <digitalWrite>
    1200:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <PS2_DataPin>
    1204:	cf 91       	pop	r28
    1206:	06 cf       	rjmp	.-500    	; 0x1014 <pininput(unsigned char)>
    1208:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_tx_ready>
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	d3 cf       	rjmp	.-90     	; 0x11b6 <send_bit()+0x6c>

00001210 <ps2_reset()>:
_Z9ps2_resetv():
    1210:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <_tx_head>
    1214:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <_tx_tail>
    1218:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <_tx_ready>
    121c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_response_count>
    1220:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <_head>
    1224:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <_tail>
    1228:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <_bitcount>
    122c:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <PS2_keystatus>
    1230:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <PS2_led_lock>
    1234:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <_ps2mode>
    1238:	08 95       	ret

0000123a <decode_key(unsigned char)>:
_Z10decode_keyh():
    123a:	8e 3f       	cpi	r24, 0xFE	; 254
    123c:	29 f0       	breq	.+10     	; 0x1248 <decode_key(unsigned char)+0xe>
    123e:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <_ps2mode>
    1242:	9d 7f       	andi	r25, 0xFD	; 253
    1244:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <_ps2mode>
    1248:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <_ps2mode>
    124c:	94 ff       	sbrs	r25, 4
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <decode_key(unsigned char)+0x1a>
    1250:	80 3f       	cpi	r24, 0xF0	; 240
    1252:	70 f0       	brcs	.+28     	; 0x1270 <decode_key(unsigned char)+0x36>
    1254:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <_ps2mode>
    1258:	92 fd       	sbrc	r25, 2
    125a:	60 c0       	rjmp	.+192    	; 0x131c <decode_key(unsigned char)+0xe2>
    125c:	8e 3e       	cpi	r24, 0xEE	; 238
    125e:	09 f4       	brne	.+2      	; 0x1262 <decode_key(unsigned char)+0x28>
    1260:	46 c0       	rjmp	.+140    	; 0x12ee <decode_key(unsigned char)+0xb4>
    1262:	e8 f4       	brcc	.+58     	; 0x129e <decode_key(unsigned char)+0x64>
    1264:	8a 3a       	cpi	r24, 0xAA	; 170
    1266:	09 f4       	brne	.+2      	; 0x126a <decode_key(unsigned char)+0x30>
    1268:	4e c0       	rjmp	.+156    	; 0x1306 <decode_key(unsigned char)+0xcc>
    126a:	20 f4       	brcc	.+8      	; 0x1274 <decode_key(unsigned char)+0x3a>
    126c:	88 23       	and	r24, r24
    126e:	51 f1       	breq	.+84     	; 0x12c4 <decode_key(unsigned char)+0x8a>
    1270:	86 e0       	ldi	r24, 0x06	; 6
    1272:	08 95       	ret
    1274:	80 3e       	cpi	r24, 0xE0	; 224
    1276:	09 f4       	brne	.+2      	; 0x127a <decode_key(unsigned char)+0x40>
    1278:	4a c0       	rjmp	.+148    	; 0x130e <decode_key(unsigned char)+0xd4>
    127a:	81 3e       	cpi	r24, 0xE1	; 225
    127c:	c9 f7       	brne	.-14     	; 0x1270 <decode_key(unsigned char)+0x36>
    127e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    1282:	82 fd       	sbrc	r24, 2
    1284:	19 c0       	rjmp	.+50     	; 0x12b8 <decode_key(unsigned char)+0x7e>
    1286:	87 e0       	ldi	r24, 0x07	; 7
    1288:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <_bytes_expected>
    128c:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    1290:	84 60       	ori	r24, 0x04	; 4
    1292:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <_ps2mode>
    1296:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    129a:	8f 7d       	andi	r24, 0xDF	; 223
    129c:	0b c0       	rjmp	.+22     	; 0x12b4 <decode_key(unsigned char)+0x7a>
    129e:	8c 3f       	cpi	r24, 0xFC	; 252
    12a0:	f1 f0       	breq	.+60     	; 0x12de <decode_key(unsigned char)+0xa4>
    12a2:	60 f4       	brcc	.+24     	; 0x12bc <decode_key(unsigned char)+0x82>
    12a4:	80 3f       	cpi	r24, 0xF0	; 240
    12a6:	21 f7       	brne	.-56     	; 0x1270 <decode_key(unsigned char)+0x36>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <_bytes_expected>
    12ae:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    12b2:	80 62       	ori	r24, 0x20	; 32
    12b4:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <_ps2mode>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	08 95       	ret
    12bc:	8e 3f       	cpi	r24, 0xFE	; 254
    12be:	29 f0       	breq	.+10     	; 0x12ca <decode_key(unsigned char)+0x90>
    12c0:	8f 3f       	cpi	r24, 0xFF	; 255
    12c2:	b1 f6       	brne	.-84     	; 0x1270 <decode_key(unsigned char)+0x36>
    12c4:	a5 df       	rcall	.-182    	; 0x1210 <ps2_reset()>
    12c6:	8c e0       	ldi	r24, 0x0C	; 12
    12c8:	08 95       	ret
    12ca:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    12ce:	81 ff       	sbrs	r24, 1
    12d0:	f3 cf       	rjmp	.-26     	; 0x12b8 <decode_key(unsigned char)+0x7e>
    12d2:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_last_sent>
    12d6:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <_now_send>
    12da:	80 e1       	ldi	r24, 0x10	; 16
    12dc:	08 95       	ret
    12de:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <_bytes_expected>
    12e2:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <_ps2mode>
    12e6:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <_tx_ready>
    12ea:	8e e0       	ldi	r24, 0x0E	; 14
    12ec:	08 95       	ret
    12ee:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <_ps2mode>
    12f2:	91 ff       	sbrs	r25, 1
    12f4:	0a c0       	rjmp	.+20     	; 0x130a <decode_key(unsigned char)+0xd0>
    12f6:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <_last_sent>
    12fa:	9e 3e       	cpi	r25, 0xEE	; 238
    12fc:	31 f0       	breq	.+12     	; 0x130a <decode_key(unsigned char)+0xd0>
    12fe:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <_now_send>
    1302:	84 e1       	ldi	r24, 0x14	; 20
    1304:	08 95       	ret
    1306:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <_bytes_expected>
    130a:	84 e0       	ldi	r24, 0x04	; 4
    130c:	08 95       	ret
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <_bytes_expected>
    1314:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    1318:	88 60       	ori	r24, 0x08	; 8
    131a:	cc cf       	rjmp	.-104    	; 0x12b4 <decode_key(unsigned char)+0x7a>
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	08 95       	ret

00001320 <ps2interrupt()>:
_Z12ps2interruptv():
    1320:	cf 92       	push	r12
    1322:	df 92       	push	r13
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    1332:	86 ff       	sbrs	r24, 6
    1334:	08 c0       	rjmp	.+16     	; 0x1346 <ps2interrupt()+0x26>
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	cf 90       	pop	r12
    1344:	02 cf       	rjmp	.-508    	; 0x114a <send_bit()>
    1346:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <PS2_DataPin>
    134a:	93 d3       	rcall	.+1830   	; 0x1a72 <digitalRead>
    134c:	c8 2f       	mov	r28, r24
    134e:	e7 d2       	rcall	.+1486   	; 0x191e <millis>
    1350:	00 91 86 01 	lds	r16, 0x0186	; 0x800186 <ps2interrupt()::prev_ms>
    1354:	10 91 87 01 	lds	r17, 0x0187	; 0x800187 <ps2interrupt()::prev_ms+0x1>
    1358:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <ps2interrupt()::prev_ms+0x2>
    135c:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <ps2interrupt()::prev_ms+0x3>
    1360:	6b 01       	movw	r12, r22
    1362:	7c 01       	movw	r14, r24
    1364:	c0 1a       	sub	r12, r16
    1366:	d1 0a       	sbc	r13, r17
    1368:	e2 0a       	sbc	r14, r18
    136a:	f3 0a       	sbc	r15, r19
    136c:	97 01       	movw	r18, r14
    136e:	86 01       	movw	r16, r12
    1370:	0b 3f       	cpi	r16, 0xFB	; 251
    1372:	11 05       	cpc	r17, r1
    1374:	21 05       	cpc	r18, r1
    1376:	31 05       	cpc	r19, r1
    1378:	20 f0       	brcs	.+8      	; 0x1382 <ps2interrupt()+0x62>
    137a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <_bitcount>
    137e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <_shiftdata>
    1382:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <ps2interrupt()::prev_ms>
    1386:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <ps2interrupt()::prev_ms+0x1>
    138a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ps2interrupt()::prev_ms+0x2>
    138e:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <ps2interrupt()::prev_ms+0x3>
    1392:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_bitcount>
    1396:	8f 5f       	subi	r24, 0xFF	; 255
    1398:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_bitcount>
    139c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_bitcount>
    13a0:	8a 30       	cpi	r24, 0x0A	; 10
    13a2:	38 f4       	brcc	.+14     	; 0x13b2 <ps2interrupt()+0x92>
    13a4:	82 30       	cpi	r24, 0x02	; 2
    13a6:	20 f5       	brcc	.+72     	; 0x13f0 <ps2interrupt()+0xd0>
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	99 f0       	breq	.+38     	; 0x13d2 <ps2interrupt()+0xb2>
    13ac:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <_bitcount>
    13b0:	17 c0       	rjmp	.+46     	; 0x13e0 <ps2interrupt()+0xc0>
    13b2:	8a 30       	cpi	r24, 0x0A	; 10
    13b4:	91 f1       	breq	.+100    	; 0x141a <ps2interrupt()+0xfa>
    13b6:	8b 30       	cpi	r24, 0x0B	; 11
    13b8:	c9 f7       	brne	.-14     	; 0x13ac <ps2interrupt()+0x8c>
    13ba:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_parity>
    13be:	8d 3f       	cpi	r24, 0xFD	; 253
    13c0:	c8 f1       	brcs	.+114    	; 0x1434 <ps2interrupt()+0x114>
    13c2:	8e ef       	ldi	r24, 0xFE	; 254
    13c4:	29 de       	rcall	.-942    	; 0x1018 <send_now(unsigned char)>
    13c6:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_tx_ready>
    13ca:	80 68       	ori	r24, 0x80	; 128
    13cc:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_tx_ready>
    13d0:	ed cf       	rjmp	.-38     	; 0x13ac <ps2interrupt()+0x8c>
    13d2:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <_parity>
    13d6:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <_ps2mode>
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	08 95       	ret
    13f0:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_parity>
    13f4:	8c 0f       	add	r24, r28
    13f6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_parity>
    13fa:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_shiftdata>
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	95 95       	asr	r25
    1402:	87 95       	ror	r24
    1404:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_shiftdata>
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	c1 11       	cpse	r28, r1
    140c:	90 e8       	ldi	r25, 0x80	; 128
    140e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_shiftdata>
    1412:	89 2b       	or	r24, r25
    1414:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_shiftdata>
    1418:	e3 cf       	rjmp	.-58     	; 0x13e0 <ps2interrupt()+0xc0>
    141a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_parity>
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_parity>
    1424:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_parity>
    1428:	c8 13       	cpse	r28, r24
    142a:	da cf       	rjmp	.-76     	; 0x13e0 <ps2interrupt()+0xc0>
    142c:	8d ef       	ldi	r24, 0xFD	; 253
    142e:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_parity>
    1432:	d6 cf       	rjmp	.-84     	; 0x13e0 <ps2interrupt()+0xc0>
    1434:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_shiftdata>
    1438:	00 df       	rcall	.-512    	; 0x123a <decode_key(unsigned char)>
    143a:	81 ff       	sbrs	r24, 1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <ps2interrupt()+0x128>
    143e:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_bytes_expected>
    1442:	91 50       	subi	r25, 0x01	; 1
    1444:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_bytes_expected>
    1448:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_bytes_expected>
    144c:	19 16       	cp	r1, r25
    144e:	14 f4       	brge	.+4      	; 0x1454 <ps2interrupt()+0x134>
    1450:	82 ff       	sbrs	r24, 2
    1452:	1e c0       	rjmp	.+60     	; 0x1490 <ps2interrupt()+0x170>
    1454:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_head>
    1458:	9f 5f       	subi	r25, 0xFF	; 255
    145a:	98 30       	cpi	r25, 0x08	; 8
    145c:	08 f0       	brcs	.+2      	; 0x1460 <ps2interrupt()+0x140>
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <_tail>
    1464:	29 17       	cp	r18, r25
    1466:	a1 f0       	breq	.+40     	; 0x1490 <ps2interrupt()+0x170>
    1468:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <_shiftdata>
    146c:	e9 2f       	mov	r30, r25
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	e1 55       	subi	r30, 0x51	; 81
    1478:	fe 4f       	sbci	r31, 0xFE	; 254
    147a:	31 83       	std	Z+1, r19	; 0x01
    147c:	20 83       	st	Z, r18
    147e:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <_ps2mode>
    1482:	20 81       	ld	r18, Z
    1484:	31 81       	ldd	r19, Z+1	; 0x01
    1486:	34 2b       	or	r19, r20
    1488:	31 83       	std	Z+1, r19	; 0x01
    148a:	20 83       	st	Z, r18
    148c:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <_head>
    1490:	84 ff       	sbrs	r24, 4
    1492:	03 c0       	rjmp	.+6      	; 0x149a <ps2interrupt()+0x17a>
    1494:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_now_send>
    1498:	95 cf       	rjmp	.-214    	; 0x13c4 <ps2interrupt()+0xa4>
    149a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <_bytes_expected>
    149e:	18 16       	cp	r1, r24
    14a0:	0c f4       	brge	.+2      	; 0x14a4 <ps2interrupt()+0x184>
    14a2:	84 cf       	rjmp	.-248    	; 0x13ac <ps2interrupt()+0x8c>
    14a4:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    14a8:	83 7c       	andi	r24, 0xC3	; 195
    14aa:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <_ps2mode>
    14ae:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <_bytes_expected>
    14b2:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ps2mode>
    14b6:	8f 77       	andi	r24, 0x7F	; 127
    14b8:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <_ps2mode>
    14bc:	08 de       	rcall	.-1008   	; 0x10ce <send_next()>
    14be:	76 cf       	rjmp	.-276    	; 0x13ac <ps2interrupt()+0x8c>

000014c0 <key_available()>:
_Z13key_availablev():
    14c0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_head>
    14c4:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <_tail>
    14c8:	89 1b       	sub	r24, r25
    14ca:	87 fd       	sbrc	r24, 7
    14cc:	88 5f       	subi	r24, 0xF8	; 248
    14ce:	08 95       	ret

000014d0 <set_lock()>:
_Z8set_lockv():
    14d0:	8d ee       	ldi	r24, 0xED	; 237
    14d2:	89 dd       	rcall	.-1262   	; 0xfe6 <send_byte(unsigned char)>
    14d4:	8b eb       	ldi	r24, 0xBB	; 187
    14d6:	87 dd       	rcall	.-1266   	; 0xfe6 <send_byte(unsigned char)>
    14d8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <PS2_led_lock>
    14dc:	84 dd       	rcall	.-1272   	; 0xfe6 <send_byte(unsigned char)>
    14de:	8b eb       	ldi	r24, 0xBB	; 187
    14e0:	82 dd       	rcall	.-1276   	; 0xfe6 <send_byte(unsigned char)>
    14e2:	89 2b       	or	r24, r25
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <set_lock()+0x18>
    14e6:	f3 cd       	rjmp	.-1050   	; 0x10ce <send_next()>
    14e8:	08 95       	ret

000014ea <translate()>:
_Z9translatev():
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <_tail>
    14f2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_head>
    14f6:	8e 17       	cp	r24, r30
    14f8:	09 f4       	brne	.+2      	; 0x14fc <translate()+0x12>
    14fa:	c9 c0       	rjmp	.+402    	; 0x168e <translate()+0x1a4>
    14fc:	ef 5f       	subi	r30, 0xFF	; 255
    14fe:	e8 30       	cpi	r30, 0x08	; 8
    1500:	08 f0       	brcs	.+2      	; 0x1504 <translate()+0x1a>
    1502:	e0 e0       	ldi	r30, 0x00	; 0
    1504:	e0 93 ad 01 	sts	0x01AD, r30	; 0x8001ad <_tail>
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	e1 55       	subi	r30, 0x51	; 81
    1510:	fe 4f       	sbci	r31, 0xFE	; 254
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	20 81       	ld	r18, Z
    1518:	31 81       	ldd	r19, Z+1	; 0x01
    151a:	23 2f       	mov	r18, r19
    151c:	32 fd       	sbrc	r19, 2
    151e:	ba c0       	rjmp	.+372    	; 0x1694 <translate()+0x1aa>
    1520:	38 2f       	mov	r19, r24
    1522:	8a 3a       	cpi	r24, 0xAA	; 170
    1524:	20 f0       	brcs	.+8      	; 0x152e <translate()+0x44>
    1526:	4f e0       	ldi	r20, 0x0F	; 15
    1528:	48 0f       	add	r20, r24
    152a:	42 30       	cpi	r20, 0x02	; 2
    152c:	10 f4       	brcc	.+4      	; 0x1532 <translate()+0x48>
    152e:	24 ff       	sbrs	r18, 4
    1530:	04 c0       	rjmp	.+8      	; 0x153a <translate()+0x50>
    1532:	99 27       	eor	r25, r25
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret
    153a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <PS2_keystatus>
    153e:	25 ff       	sbrs	r18, 5
    1540:	1a c0       	rjmp	.+52     	; 0x1576 <translate()+0x8c>
    1542:	80 68       	ori	r24, 0x80	; 128
    1544:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS2_keystatus>
    1548:	d0 e0       	ldi	r29, 0x00	; 0
    154a:	c0 e0       	ldi	r28, 0x00	; 0
    154c:	23 ff       	sbrs	r18, 3
    154e:	20 c0       	rjmp	.+64     	; 0x1590 <translate()+0xa6>
    1550:	fe 01       	movw	r30, r28
    1552:	e7 5c       	subi	r30, 0xC7	; 199
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	e4 91       	lpm	r30, Z
    1558:	3e 13       	cpse	r19, r30
    155a:	0f c0       	rjmp	.+30     	; 0x157a <translate()+0x90>
    155c:	c6 5c       	subi	r28, 0xC6	; 198
    155e:	df 4f       	sbci	r29, 0xFF	; 255
    1560:	fe 01       	movw	r30, r28
    1562:	c4 91       	lpm	r28, Z
    1564:	d0 e0       	ldi	r29, 0x00	; 0
    1566:	20 97       	sbiw	r28, 0x00	; 0
    1568:	e1 f4       	brne	.+56     	; 0x15a2 <translate()+0xb8>
    156a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <PS2_keystatus>
    156e:	9e 01       	movw	r18, r28
    1570:	38 2b       	or	r19, r24
    1572:	c9 01       	movw	r24, r18
    1574:	df cf       	rjmp	.-66     	; 0x1534 <translate()+0x4a>
    1576:	8f 77       	andi	r24, 0x7F	; 127
    1578:	e5 cf       	rjmp	.-54     	; 0x1544 <translate()+0x5a>
    157a:	22 96       	adiw	r28, 0x02	; 2
    157c:	c2 35       	cpi	r28, 0x52	; 82
    157e:	d1 05       	cpc	r29, r1
    1580:	39 f7       	brne	.-50     	; 0x1550 <translate()+0x66>
    1582:	d0 e0       	ldi	r29, 0x00	; 0
    1584:	c0 e0       	ldi	r28, 0x00	; 0
    1586:	f1 cf       	rjmp	.-30     	; 0x156a <translate()+0x80>
    1588:	22 96       	adiw	r28, 0x02	; 2
    158a:	ce 3d       	cpi	r28, 0xDE	; 222
    158c:	d1 05       	cpc	r29, r1
    158e:	c9 f3       	breq	.-14     	; 0x1582 <translate()+0x98>
    1590:	fe 01       	movw	r30, r28
    1592:	e5 57       	subi	r30, 0x75	; 117
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	e4 91       	lpm	r30, Z
    1598:	3e 13       	cpse	r19, r30
    159a:	f6 cf       	rjmp	.-20     	; 0x1588 <translate()+0x9e>
    159c:	c4 57       	subi	r28, 0x74	; 116
    159e:	df 4f       	sbci	r29, 0xFF	; 255
    15a0:	df cf       	rjmp	.-66     	; 0x1560 <translate()+0x76>
    15a2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <PS2_keystatus>
    15a6:	fe 01       	movw	r30, r28
    15a8:	c4 30       	cpi	r28, 0x04	; 4
    15aa:	d1 05       	cpc	r29, r1
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <translate()+0xc6>
    15ae:	45 c0       	rjmp	.+138    	; 0x163a <translate()+0x150>
    15b0:	e5 57       	subi	r30, 0x75	; 117
    15b2:	fe 4f       	sbci	r31, 0xFE	; 254
    15b4:	97 ff       	sbrs	r25, 7
    15b6:	04 c0       	rjmp	.+8      	; 0x15c0 <translate()+0xd6>
    15b8:	10 82       	st	Z, r1
    15ba:	cb eb       	ldi	r28, 0xBB	; 187
    15bc:	d0 e0       	ldi	r29, 0x00	; 0
    15be:	22 c0       	rjmp	.+68     	; 0x1604 <translate()+0x11a>
    15c0:	80 81       	ld	r24, Z
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	d1 f3       	breq	.-12     	; 0x15ba <translate()+0xd0>
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 83       	st	Z, r24
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	c2 30       	cpi	r28, 0x02	; 2
    15ce:	d1 05       	cpc	r29, r1
    15d0:	51 f0       	breq	.+20     	; 0x15e6 <translate()+0xfc>
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	c3 30       	cpi	r28, 0x03	; 3
    15d6:	d1 05       	cpc	r29, r1
    15d8:	31 f4       	brne	.+12     	; 0x15e6 <translate()+0xfc>
    15da:	94 ff       	sbrs	r25, 4
    15dc:	28 c0       	rjmp	.+80     	; 0x162e <translate()+0x144>
    15de:	9f 7e       	andi	r25, 0xEF	; 239
    15e0:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <PS2_keystatus>
    15e4:	84 e0       	ldi	r24, 0x04	; 4
    15e6:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <PS2_led_lock>
    15ea:	29 2f       	mov	r18, r25
    15ec:	28 23       	and	r18, r24
    15ee:	09 f1       	breq	.+66     	; 0x1632 <translate()+0x148>
    15f0:	80 95       	com	r24
    15f2:	89 23       	and	r24, r25
    15f4:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <PS2_led_lock>
    15f8:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <PS2_keystatus>
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS2_keystatus>
    1602:	66 df       	rcall	.-308    	; 0x14d0 <set_lock()>
    1604:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <PS2_keystatus>
    1608:	87 ff       	sbrs	r24, 7
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <translate()+0x12a>
    160c:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <_mode>
    1610:	93 fd       	sbrc	r25, 3
    1612:	43 c0       	rjmp	.+134    	; 0x169a <translate()+0x1b0>
    1614:	9e 01       	movw	r18, r28
    1616:	20 52       	subi	r18, 0x20	; 32
    1618:	31 09       	sbc	r19, r1
    161a:	21 34       	cpi	r18, 0x41	; 65
    161c:	31 05       	cpc	r19, r1
    161e:	a8 f1       	brcs	.+106    	; 0x168a <translate()+0x1a0>
    1620:	cb 38       	cpi	r28, 0x8B	; 139
    1622:	d1 05       	cpc	r29, r1
    1624:	91 f1       	breq	.+100    	; 0x168a <translate()+0x1a0>
    1626:	81 60       	ori	r24, 0x01	; 1
    1628:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS2_keystatus>
    162c:	9e cf       	rjmp	.-196    	; 0x156a <translate()+0x80>
    162e:	90 61       	ori	r25, 0x10	; 16
    1630:	d7 cf       	rjmp	.-82     	; 0x15e0 <translate()+0xf6>
    1632:	89 2b       	or	r24, r25
    1634:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <PS2_led_lock>
    1638:	e4 cf       	rjmp	.-56     	; 0x1602 <translate()+0x118>
    163a:	36 97       	sbiw	r30, 0x06	; 6
    163c:	e8 30       	cpi	r30, 0x08	; 8
    163e:	f1 05       	cpc	r31, r1
    1640:	98 f4       	brcc	.+38     	; 0x1668 <translate()+0x17e>
    1642:	ea 5d       	subi	r30, 0xDA	; 218
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	e4 91       	lpm	r30, Z
    1648:	97 ff       	sbrs	r25, 7
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <translate()+0x16c>
    164c:	e0 95       	com	r30
    164e:	e9 23       	and	r30, r25
    1650:	e0 93 8a 01 	sts	0x018A, r30	; 0x80018a <PS2_keystatus>
    1654:	d7 cf       	rjmp	.-82     	; 0x1604 <translate()+0x11a>
    1656:	8e 2f       	mov	r24, r30
    1658:	89 23       	and	r24, r25
    165a:	21 f0       	breq	.+8      	; 0x1664 <translate()+0x17a>
    165c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_mode>
    1660:	87 fd       	sbrc	r24, 7
    1662:	ab cf       	rjmp	.-170    	; 0x15ba <translate()+0xd0>
    1664:	e9 2b       	or	r30, r25
    1666:	f4 cf       	rjmp	.-24     	; 0x1650 <translate()+0x166>
    1668:	fe 01       	movw	r30, r28
    166a:	b0 97       	sbiw	r30, 0x20	; 32
    166c:	eb 30       	cpi	r30, 0x0B	; 11
    166e:	f1 05       	cpc	r31, r1
    1670:	48 f6       	brcc	.-110    	; 0x1604 <translate()+0x11a>
    1672:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <PS2_led_lock>
    1676:	81 ff       	sbrs	r24, 1
    1678:	02 c0       	rjmp	.+4      	; 0x167e <translate()+0x194>
    167a:	96 ff       	sbrs	r25, 6
    167c:	c3 cf       	rjmp	.-122    	; 0x1604 <translate()+0x11a>
    167e:	e2 5d       	subi	r30, 0xD2	; 210
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	e4 91       	lpm	r30, Z
    1684:	ce 2f       	mov	r28, r30
    1686:	d0 e0       	ldi	r29, 0x00	; 0
    1688:	bd cf       	rjmp	.-134    	; 0x1604 <translate()+0x11a>
    168a:	8e 7f       	andi	r24, 0xFE	; 254
    168c:	cd cf       	rjmp	.-102    	; 0x1628 <translate()+0x13e>
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	50 cf       	rjmp	.-352    	; 0x1534 <translate()+0x4a>
    1694:	86 e0       	ldi	r24, 0x06	; 6
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	4d cf       	rjmp	.-358    	; 0x1534 <translate()+0x4a>
    169a:	8b eb       	ldi	r24, 0xBB	; 187
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	4a cf       	rjmp	.-364    	; 0x1534 <translate()+0x4a>

000016a0 <PS2KeyAdvanced::setNoBreak(unsigned char)>:
_ZN14PS2KeyAdvanced10setNoBreakEh():
    16a0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_mode>
    16a4:	87 7f       	andi	r24, 0xF7	; 247
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	61 11       	cpse	r22, r1
    16aa:	98 e0       	ldi	r25, 0x08	; 8
    16ac:	89 2b       	or	r24, r25
    16ae:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_mode>
    16b2:	08 95       	ret

000016b4 <PS2KeyAdvanced::setNoRepeat(unsigned char)>:
_ZN14PS2KeyAdvanced11setNoRepeatEh():
    16b4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_mode>
    16b8:	8f 77       	andi	r24, 0x7F	; 127
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	61 11       	cpse	r22, r1
    16be:	90 e8       	ldi	r25, 0x80	; 128
    16c0:	89 2b       	or	r24, r25
    16c2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_mode>
    16c6:	08 95       	ret

000016c8 <PS2KeyAdvanced::available()>:
_ZN14PS2KeyAdvanced9availableEv():
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:944
            1 to buffer size less 1 as 1 to full buffer

  As with other ring buffers here when pointers match
  buffer empty so cannot actually hold buffer size values  */
uint8_t PS2KeyAdvanced::available( )
{
    16c8:	cf 93       	push	r28
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:949
int8_t  i, idx;
uint16_t data;

// check output queue
i = _key_head - _key_tail;
    16ca:	c0 91 94 01 	lds	r28, 0x0194	; 0x800194 <_key_head>
    16ce:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_key_tail>
    16d2:	c8 1b       	sub	r28, r24
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:950
if( i < 0 )
    16d4:	c7 fd       	sbrc	r28, 7
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:951
  i += _KEY_BUFF_SIZE;
    16d6:	cc 5f       	subi	r28, 0xFC	; 252
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:952
while( i < ( _KEY_BUFF_SIZE - 1 ) ) // process if not full
    16d8:	c3 30       	cpi	r28, 0x03	; 3
    16da:	f4 f4       	brge	.+60     	; 0x1718 <PS2KeyAdvanced::available()+0x50>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:953
  if( key_available( ) )         // not check for more keys to process
    16dc:	f1 de       	rcall	.-542    	; 0x14c0 <key_available()>
    16de:	88 23       	and	r24, r24
    16e0:	d9 f0       	breq	.+54     	; 0x1718 <PS2KeyAdvanced::available()+0x50>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:955
    {
    data = translate( );         // get next translated key
    16e2:	03 df       	rcall	.-506    	; 0x14ea <translate()>
    16e4:	9c 01       	movw	r18, r24
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:956
    if( data == 0 )             // unless in buffer is empty
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	b9 f0       	breq	.+46     	; 0x1718 <PS2KeyAdvanced::available()+0x50>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:958
      break;
    if( ( data & 0xFF ) != PS2_KEY_IGNORE
    16ea:	99 27       	eor	r25, r25
    16ec:	8b 3b       	cpi	r24, 0xBB	; 187
    16ee:	91 05       	cpc	r25, r1
    16f0:	99 f3       	breq	.-26     	; 0x16d8 <PS2KeyAdvanced::available()+0x10>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:959
            && ( data & 0xFF ) > 0 )
    16f2:	89 2b       	or	r24, r25
    16f4:	89 f3       	breq	.-30     	; 0x16d8 <PS2KeyAdvanced::available()+0x10>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:961
      {
      idx = _key_head + 1;         // point to next space
    16f6:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <_key_head>
    16fa:	9f 5f       	subi	r25, 0xFF	; 255
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:962
      if( idx >= _KEY_BUFF_SIZE )  // loop to front if necessary
    16fc:	94 30       	cpi	r25, 0x04	; 4
    16fe:	0c f0       	brlt	.+2      	; 0x1702 <PS2KeyAdvanced::available()+0x3a>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:963
        idx = 0;
    1700:	90 e0       	ldi	r25, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:964
      _key_buffer[ idx ] = data; // save the data to out buffer
    1702:	e9 2f       	mov	r30, r25
    1704:	ee 0f       	add	r30, r30
    1706:	ff 0b       	sbc	r31, r31
    1708:	eb 56       	subi	r30, 0x6B	; 107
    170a:	fe 4f       	sbci	r31, 0xFE	; 254
    170c:	31 83       	std	Z+1, r19	; 0x01
    170e:	20 83       	st	Z, r18
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:965
      _key_head = idx;
    1710:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <_key_head>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:966
      i++;                      // update count
    1714:	cf 5f       	subi	r28, 0xFF	; 255
    1716:	e0 cf       	rjmp	.-64     	; 0x16d8 <PS2KeyAdvanced::available()+0x10>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:972
      }
    }
  else
    break;                      // exit nothing coming in
return uint8_t( i );
}
    1718:	8c 2f       	mov	r24, r28
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <PS2KeyAdvanced::read()>:
_ZN14PS2KeyAdvanced4readEv():
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:982
uint16_t PS2KeyAdvanced::read( )
{
uint16_t result;
uint8_t idx;

if( ( result = available( ) ) )
    171e:	d4 df       	rcall	.-88     	; 0x16c8 <PS2KeyAdvanced::available()>
    1720:	88 23       	and	r24, r24
    1722:	81 f0       	breq	.+32     	; 0x1744 <PS2KeyAdvanced::read()+0x26>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:984
  {
  idx = _key_tail;
    1724:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <_key_tail>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:985
  idx++;
    1728:	ef 5f       	subi	r30, 0xFF	; 255
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:986
  if( idx >= _KEY_BUFF_SIZE )  // loop to front if necessary
    172a:	e4 30       	cpi	r30, 0x04	; 4
    172c:	08 f0       	brcs	.+2      	; 0x1730 <PS2KeyAdvanced::read()+0x12>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:987
    idx = 0;
    172e:	e0 e0       	ldi	r30, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:988
  _key_tail = idx;
    1730:	e0 93 93 01 	sts	0x0193, r30	; 0x800193 <_key_tail>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:989
  result = _key_buffer[ idx ];
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	ee 0f       	add	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	eb 56       	subi	r30, 0x6B	; 107
    173c:	fe 4f       	sbci	r31, 0xFE	; 254
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	08 95       	ret
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	80 e0       	ldi	r24, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:992
  }
return result;
}
    1748:	08 95       	ret

0000174a <PS2KeyAdvanced::PS2KeyAdvanced()>:
_ZN14PS2KeyAdvancedC2Ev():
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:998


PS2KeyAdvanced::PS2KeyAdvanced( )
{
// nothing to do here, begin( ) does it all
}
    174a:	08 95       	ret

0000174c <PS2KeyAdvanced::begin(unsigned char, unsigned char)>:
_ZN14PS2KeyAdvanced5beginEhh():
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1003


/* instantiate class for keyboard  */
void PS2KeyAdvanced::begin( uint8_t data_pin, uint8_t irq_pin )
{
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	d6 2f       	mov	r29, r22
    1752:	c4 2f       	mov	r28, r20
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1005
/* PS2 variables reset */
ps2_reset( );
    1754:	5d dd       	rcall	.-1350   	; 0x1210 <ps2_reset()>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1007

PS2_DataPin = data_pin;
    1756:	d0 93 91 01 	sts	0x0191, r29	; 0x800191 <PS2_DataPin>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1008
PS2_IrqPin = irq_pin;
    175a:	c0 93 90 01 	sts	0x0190, r28	; 0x800190 <PS2_IrqPin>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1011

// initialize the pins
pininput( PS2_IrqPin );            /* Setup Clock pin */
    175e:	8c 2f       	mov	r24, r28
    1760:	59 dc       	rcall	.-1870   	; 0x1014 <pininput(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1012
pininput( PS2_DataPin );           /* Setup Data pin */
    1762:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <PS2_DataPin>
    1766:	56 dc       	rcall	.-1876   	; 0x1014 <pininput(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1015

// Start interrupt handler
attachInterrupt( digitalPinToInterrupt( irq_pin ), ps2interrupt, FALLING );
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	c2 30       	cpi	r28, 0x02	; 2
    176c:	21 f0       	breq	.+8      	; 0x1776 <PS2KeyAdvanced::begin(unsigned char, unsigned char)+0x2a>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1015 (discriminator 1)
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	c3 30       	cpi	r28, 0x03	; 3
    1772:	09 f4       	brne	.+2      	; 0x1776 <PS2KeyAdvanced::begin(unsigned char, unsigned char)+0x2a>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1015
    1774:	81 e0       	ldi	r24, 0x01	; 1
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1015 (discriminator 8)
    1776:	42 e0       	ldi	r20, 0x02	; 2
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	60 e9       	ldi	r22, 0x90	; 144
    177c:	79 e0       	ldi	r23, 0x09	; 9
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1016 (discriminator 8)
}
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1015 (discriminator 8)
// initialize the pins
pininput( PS2_IrqPin );            /* Setup Clock pin */
pininput( PS2_DataPin );           /* Setup Data pin */

// Start interrupt handler
attachInterrupt( digitalPinToInterrupt( irq_pin ), ps2interrupt, FALLING );
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <attachInterrupt>

00001784 <nothing>:
nothing():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
    1784:	08 95       	ret

00001786 <attachInterrupt>:
attachInterrupt():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:64
  #endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
    1786:	82 30       	cpi	r24, 0x02	; 2
    1788:	88 f4       	brcc	.+34     	; 0x17ac <attachInterrupt+0x26>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:66
  {
    intFunc[interruptNum] = userFunc;
    178a:	e8 2f       	mov	r30, r24
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	ee 0f       	add	r30, r30
    1790:	ff 1f       	adc	r31, r31
    1792:	e0 5a       	subi	r30, 0xA0	; 160
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	71 83       	std	Z+1, r23	; 0x01
    1798:	60 83       	st	Z, r22
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:74
    // edge, or falling edge).  The mode constants were chosen to correspond
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.

    // Enable interrupt
    switch(interruptNum)
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	41 f0       	breq	.+16     	; 0x17ae <attachInterrupt+0x28>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:189

// ATmega8, ATmega8515, ATmega8535, ATmega16, ATmega32, ATmega162
      #elif defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) \
      || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega162__)
        case 0:
          MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    179e:	85 b7       	in	r24, 0x35	; 53
    17a0:	8c 7f       	andi	r24, 0xFC	; 252
    17a2:	48 2b       	or	r20, r24
    17a4:	45 bf       	out	0x35, r20	; 53
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:190
          GICR |= (1 << INT0);
    17a6:	8b b7       	in	r24, 0x3b	; 59
    17a8:	80 64       	ori	r24, 0x40	; 64
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:194
          break;
        case 1:
          MCUCR = (MCUCR & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
          GICR |= (1 << INT1);
    17aa:	8b bf       	out	0x3b, r24	; 59
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:261
          break;

      #endif
    }
  }
}
    17ac:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:193
        case 0:
          MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
          GICR |= (1 << INT0);
          break;
        case 1:
          MCUCR = (MCUCR & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    17ae:	85 b7       	in	r24, 0x35	; 53
    17b0:	83 7f       	andi	r24, 0xF3	; 243
    17b2:	44 0f       	add	r20, r20
    17b4:	55 1f       	adc	r21, r21
    17b6:	44 0f       	add	r20, r20
    17b8:	55 1f       	adc	r21, r21
    17ba:	48 2b       	or	r20, r24
    17bc:	45 bf       	out	0x35, r20	; 53
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:194
          GICR |= (1 << INT1);
    17be:	8b b7       	in	r24, 0x3b	; 59
    17c0:	80 68       	ori	r24, 0x80	; 128
    17c2:	f3 cf       	rjmp	.-26     	; 0x17aa <attachInterrupt+0x24>

000017c4 <detachInterrupt>:
detachInterrupt():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:265
  }
}

void detachInterrupt(uint8_t interruptNum)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	78 f4       	brcc	.+30     	; 0x17e6 <detachInterrupt+0x22>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:268
  {
    // Disable interrupt
    switch(interruptNum)
    17c8:	e8 2f       	mov	r30, r24
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	61 f0       	breq	.+24     	; 0x17e8 <detachInterrupt+0x24>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:356

// ATmega8, ATmega8515, ATmega8535, ATmega16, ATmega32, ATmega162
      #elif defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) \
      || defined(__AVR_ATmega16__)   || defined(__AVR_ATmega32__)   || defined(__AVR_ATmega162__)
        case 0:
          GICR &= ~(1 << INT0);
    17d0:	8b b7       	in	r24, 0x3b	; 59
    17d2:	8f 7b       	andi	r24, 0xBF	; 191
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:359
          break;
        case 1:
          GICR &= ~(1 << INT1);
    17d4:	8b bf       	out	0x3b, r24	; 59
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:414
          EIMSK &= ~(1 << INT0);
          break;

      #endif
    }
    intFunc[interruptNum] = nothing;
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	e0 5a       	subi	r30, 0xA0	; 160
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	82 ec       	ldi	r24, 0xC2	; 194
    17e0:	9b e0       	ldi	r25, 0x0B	; 11
    17e2:	91 83       	std	Z+1, r25	; 0x01
    17e4:	80 83       	st	Z, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:416
  }
}
    17e6:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:359
      || defined(__AVR_ATmega16__)   || defined(__AVR_ATmega32__)   || defined(__AVR_ATmega162__)
        case 0:
          GICR &= ~(1 << INT0);
          break;
        case 1:
          GICR &= ~(1 << INT1);
    17e8:	8b b7       	in	r24, 0x3b	; 59
    17ea:	8f 77       	andi	r24, 0x7F	; 127
    17ec:	f3 cf       	rjmp	.-26     	; 0x17d4 <detachInterrupt+0x10>

000017ee <__vector_1>:
__vector_1():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	ef 93       	push	r30
    180e:	ff 93       	push	r31
    1810:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1814:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1818:	09 95       	icall
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
    181e:	bf 91       	pop	r27
    1820:	af 91       	pop	r26
    1822:	9f 91       	pop	r25
    1824:	8f 91       	pop	r24
    1826:	7f 91       	pop	r23
    1828:	6f 91       	pop	r22
    182a:	5f 91       	pop	r21
    182c:	4f 91       	pop	r20
    182e:	3f 91       	pop	r19
    1830:	2f 91       	pop	r18
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	0f 90       	pop	r0
    1838:	1f 90       	pop	r1
    183a:	18 95       	reti

0000183c <__vector_2>:
__vector_2():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:489
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    183c:	1f 92       	push	r1
    183e:	0f 92       	push	r0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	0f 92       	push	r0
    1844:	11 24       	eor	r1, r1
    1846:	2f 93       	push	r18
    1848:	3f 93       	push	r19
    184a:	4f 93       	push	r20
    184c:	5f 93       	push	r21
    184e:	6f 93       	push	r22
    1850:	7f 93       	push	r23
    1852:	8f 93       	push	r24
    1854:	9f 93       	push	r25
    1856:	af 93       	push	r26
    1858:	bf 93       	push	r27
    185a:	ef 93       	push	r30
    185c:	ff 93       	push	r31
    185e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    1862:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1866:	09 95       	icall
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	7f 91       	pop	r23
    1876:	6f 91       	pop	r22
    1878:	5f 91       	pop	r21
    187a:	4f 91       	pop	r20
    187c:	3f 91       	pop	r19
    187e:	2f 91       	pop	r18
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	0f 90       	pop	r0
    1886:	1f 90       	pop	r1
    1888:	18 95       	reti

0000188a <__vector_9>:
__vector_9():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:406
    while (ms > 0UL && (micros() - start) >= 1000UL) {
      ms--;
      start += 1000UL;
    }
  }
}
    188a:	1f 92       	push	r1
    188c:	0f 92       	push	r0
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	0f 92       	push	r0
    1892:	11 24       	eor	r1, r1
    1894:	2f 93       	push	r18
    1896:	3f 93       	push	r19
    1898:	8f 93       	push	r24
    189a:	9f 93       	push	r25
    189c:	af 93       	push	r26
    189e:	bf 93       	push	r27
    18a0:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <timer0_millis>
    18a4:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <timer0_millis+0x1>
    18a8:	a0 91 c7 01 	lds	r26, 0x01C7	; 0x8001c7 <timer0_millis+0x2>
    18ac:	b0 91 c8 01 	lds	r27, 0x01C8	; 0x8001c8 <timer0_millis+0x3>
    18b0:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <timer0_fract>
    18b4:	23 e0       	ldi	r18, 0x03	; 3
    18b6:	23 0f       	add	r18, r19
    18b8:	2d 37       	cpi	r18, 0x7D	; 125
    18ba:	68 f1       	brcs	.+90     	; 0x1916 <__vector_9+0x8c>
    18bc:	26 e8       	ldi	r18, 0x86	; 134
    18be:	23 0f       	add	r18, r19
    18c0:	02 96       	adiw	r24, 0x02	; 2
    18c2:	a1 1d       	adc	r26, r1
    18c4:	b1 1d       	adc	r27, r1
    18c6:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <timer0_fract>
    18ca:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <timer0_millis>
    18ce:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <timer0_millis+0x1>
    18d2:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <timer0_millis+0x2>
    18d6:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <timer0_millis+0x3>
    18da:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <timer0_overflow_count>
    18de:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <timer0_overflow_count+0x1>
    18e2:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <timer0_overflow_count+0x2>
    18e6:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <timer0_overflow_count+0x3>
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	a1 1d       	adc	r26, r1
    18ee:	b1 1d       	adc	r27, r1
    18f0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <timer0_overflow_count>
    18f4:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <timer0_overflow_count+0x1>
    18f8:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <timer0_overflow_count+0x2>
    18fc:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <timer0_overflow_count+0x3>
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	3f 91       	pop	r19
    190a:	2f 91       	pop	r18
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	a1 1d       	adc	r26, r1
    191a:	b1 1d       	adc	r27, r1
    191c:	d4 cf       	rjmp	.-88     	; 0x18c6 <__vector_9+0x3c>

0000191e <millis>:
millis():
    191e:	2f b7       	in	r18, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <timer0_millis>
    1926:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <timer0_millis+0x1>
    192a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <timer0_millis+0x2>
    192e:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <timer0_millis+0x3>
    1932:	2f bf       	out	0x3f, r18	; 63
    1934:	08 95       	ret

00001936 <delayMicroseconds>:
delayMicroseconds():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    1936:	82 30       	cpi	r24, 0x02	; 2
    1938:	91 05       	cpc	r25, r1
    193a:	38 f0       	brcs	.+14     	; 0x194a <delayMicroseconds+0x14>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    1944:	05 97       	sbiw	r24, 0x05	; 5
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <delayMicroseconds+0x10>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    194a:	08 95       	ret

0000194c <init>:
init():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    194c:	78 94       	sei
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
    194e:	83 b7       	in	r24, 0x33	; 51
    1950:	83 60       	ori	r24, 0x03	; 3
    1952:	83 bf       	out	0x33, r24	; 51
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    1954:	89 b7       	in	r24, 0x39	; 57
    1956:	81 60       	ori	r24, 0x01	; 1
    1958:	89 bf       	out	0x39, r24	; 57
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	8e bd       	out	0x2e, r24	; 46
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    195e:	8e b5       	in	r24, 0x2e	; 46
    1960:	81 60       	ori	r24, 0x01	; 1
    1962:	8e bd       	out	0x2e, r24	; 46
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1964:	8f b5       	in	r24, 0x2f	; 47
    1966:	81 60       	ori	r24, 0x01	; 1
    1968:	8f bd       	out	0x2f, r24	; 47
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    196a:	85 b5       	in	r24, 0x25	; 37
    196c:	84 60       	ori	r24, 0x04	; 4
    196e:	85 bd       	out	0x25, r24	; 37
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    1970:	85 b5       	in	r24, 0x25	; 37
    1972:	80 64       	ori	r24, 0x40	; 64
    1974:	85 bd       	out	0x25, r24	; 37
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1976:	87 e8       	ldi	r24, 0x87	; 135
    1978:	86 b9       	out	0x06, r24	; 6
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
    197a:	1a b8       	out	0x0a, r1	; 10
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1072
#elif defined(UCSR0B)
  UCSR0B = 0;
#endif
}
    197c:	08 95       	ret

0000197e <turnOffPWM>:
turnOffPWM():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    197e:	85 30       	cpi	r24, 0x05	; 5
    1980:	41 f0       	breq	.+16     	; 0x1992 <turnOffPWM+0x14>
    1982:	87 30       	cpi	r24, 0x07	; 7
    1984:	49 f0       	breq	.+18     	; 0x1998 <turnOffPWM+0x1a>
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	51 f4       	brne	.+20     	; 0x199e <turnOffPWM+0x20>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    198a:	8f b5       	in	r24, 0x2f	; 47
    198c:	8f 77       	andi	r24, 0x7F	; 127
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    198e:	8f bd       	out	0x2f, r24	; 47
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    1990:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1992:	8f b5       	in	r24, 0x2f	; 47
    1994:	8f 7d       	andi	r24, 0xDF	; 223
    1996:	fb cf       	rjmp	.-10     	; 0x198e <turnOffPWM+0x10>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
    1998:	85 b5       	in	r24, 0x25	; 37
    199a:	8f 7d       	andi	r24, 0xDF	; 223
    199c:	85 bd       	out	0x25, r24	; 37
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
    199e:	08 95       	ret

000019a0 <pinMode>:
pinMode():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	fc 01       	movw	r30, r24
    19a8:	e0 58       	subi	r30, 0x80	; 128
    19aa:	fe 4f       	sbci	r31, 0xFE	; 254
    19ac:	24 91       	lpm	r18, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    19ae:	89 56       	subi	r24, 0x69	; 105
    19b0:	9e 4f       	sbci	r25, 0xFE	; 254
    19b2:	fc 01       	movw	r30, r24
    19b4:	84 91       	lpm	r24, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    19b6:	88 23       	and	r24, r24
    19b8:	c9 f0       	breq	.+50     	; 0x19ec <pinMode+0x4c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	fc 01       	movw	r30, r24
    19c2:	ee 53       	subi	r30, 0x3E	; 62
    19c4:	fe 4f       	sbci	r31, 0xFE	; 254
    19c6:	a5 91       	lpm	r26, Z+
    19c8:	b4 91       	lpm	r27, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    19ca:	fc 01       	movw	r30, r24
    19cc:	e8 54       	subi	r30, 0x48	; 72
    19ce:	fe 4f       	sbci	r31, 0xFE	; 254
    19d0:	c5 91       	lpm	r28, Z+
    19d2:	d4 91       	lpm	r29, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    19d4:	61 11       	cpse	r22, r1
    19d6:	0d c0       	rjmp	.+26     	; 0x19f2 <pinMode+0x52>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    19d8:	9f b7       	in	r25, 0x3f	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    19da:	f8 94       	cli
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    19dc:	8c 91       	ld	r24, X
    19de:	20 95       	com	r18
    19e0:	82 23       	and	r24, r18
    19e2:	8c 93       	st	X, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    19e4:	88 81       	ld	r24, Y
    19e6:	28 23       	and	r18, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    19e8:	28 83       	st	Y, r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    19ea:	9f bf       	out	0x3f, r25	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    19f2:	62 30       	cpi	r22, 0x02	; 2
    19f4:	51 f4       	brne	.+20     	; 0x1a0a <pinMode+0x6a>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    19f6:	9f b7       	in	r25, 0x3f	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    19f8:	f8 94       	cli
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    19fa:	3c 91       	ld	r19, X
    19fc:	82 2f       	mov	r24, r18
    19fe:	80 95       	com	r24
    1a00:	83 23       	and	r24, r19
    1a02:	8c 93       	st	X, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1a04:	e8 81       	ld	r30, Y
    1a06:	2e 2b       	or	r18, r30
    1a08:	ef cf       	rjmp	.-34     	; 0x19e8 <pinMode+0x48>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1a0a:	8f b7       	in	r24, 0x3f	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    1a0c:	f8 94       	cli
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1a0e:	ec 91       	ld	r30, X
    1a10:	2e 2b       	or	r18, r30
    1a12:	2c 93       	st	X, r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1a14:	8f bf       	out	0x3f, r24	; 63
    1a16:	ea cf       	rjmp	.-44     	; 0x19ec <pinMode+0x4c>

00001a18 <digitalWrite>:
digitalWrite():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	f9 01       	movw	r30, r18
    1a24:	e7 59       	subi	r30, 0x97	; 151
    1a26:	fe 4f       	sbci	r31, 0xFE	; 254
    1a28:	84 91       	lpm	r24, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1a2a:	f9 01       	movw	r30, r18
    1a2c:	e0 58       	subi	r30, 0x80	; 128
    1a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a30:	d4 91       	lpm	r29, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    1a32:	f9 01       	movw	r30, r18
    1a34:	e9 56       	subi	r30, 0x69	; 105
    1a36:	fe 4f       	sbci	r31, 0xFE	; 254
    1a38:	c4 91       	lpm	r28, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1a3a:	cc 23       	and	r28, r28
    1a3c:	a1 f0       	breq	.+40     	; 0x1a66 <digitalWrite+0x4e>
    1a3e:	16 2f       	mov	r17, r22
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a40:	81 11       	cpse	r24, r1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1a42:	9d df       	rcall	.-198    	; 0x197e <turnOffPWM>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1a44:	ec 2f       	mov	r30, r28
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	ee 0f       	add	r30, r30
    1a4a:	ff 1f       	adc	r31, r31
    1a4c:	e8 54       	subi	r30, 0x48	; 72
    1a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a50:	a5 91       	lpm	r26, Z+
    1a52:	b4 91       	lpm	r27, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1a54:	8f b7       	in	r24, 0x3f	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    1a56:	f8 94       	cli
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    1a58:	ec 91       	ld	r30, X
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1a5a:	11 11       	cpse	r17, r1
    1a5c:	08 c0       	rjmp	.+16     	; 0x1a6e <digitalWrite+0x56>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1a5e:	d0 95       	com	r29
    1a60:	de 23       	and	r29, r30
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1a62:	dc 93       	st	X, r29
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1a64:	8f bf       	out	0x3f, r24	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:212
}
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1a6e:	de 2b       	or	r29, r30
    1a70:	f8 cf       	rjmp	.-16     	; 0x1a62 <digitalWrite+0x4a>

00001a72 <digitalRead>:
digitalRead():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	f9 01       	movw	r30, r18
    1a7c:	e7 59       	subi	r30, 0x97	; 151
    1a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a80:	84 91       	lpm	r24, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    1a82:	f9 01       	movw	r30, r18
    1a84:	e0 58       	subi	r30, 0x80	; 128
    1a86:	fe 4f       	sbci	r31, 0xFE	; 254
    1a88:	d4 91       	lpm	r29, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    1a8a:	f9 01       	movw	r30, r18
    1a8c:	e9 56       	subi	r30, 0x69	; 105
    1a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a90:	c4 91       	lpm	r28, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    1a92:	cc 23       	and	r28, r28
    1a94:	99 f0       	breq	.+38     	; 0x1abc <digitalRead+0x4a>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a96:	81 11       	cpse	r24, r1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1a98:	72 df       	rcall	.-284    	; 0x197e <turnOffPWM>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    1a9a:	ec 2f       	mov	r30, r28
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	e2 55       	subi	r30, 0x52	; 82
    1aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa6:	a5 91       	lpm	r26, Z+
    1aa8:	b4 91       	lpm	r27, Z
    1aaa:	ec 91       	ld	r30, X
    1aac:	ed 23       	and	r30, r29
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <digitalRead+0x44>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	fa cf       	rjmp	.-12     	; 0x1ab6 <digitalRead+0x44>

00001ac2 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1ac2:	fc 01       	movw	r30, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1ac4:	91 8d       	ldd	r25, Z+25	; 0x19
    1ac6:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ac8:	89 2f       	mov	r24, r25
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	80 5c       	subi	r24, 0xC0	; 192
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	82 1b       	sub	r24, r18
    1ad2:	91 09       	sbc	r25, r1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
    1ad4:	8f 73       	andi	r24, 0x3F	; 63
    1ad6:	99 27       	eor	r25, r25
    1ad8:	08 95       	ret

00001ada <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    1ada:	fc 01       	movw	r30, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    1adc:	91 8d       	ldd	r25, Z+25	; 0x19
    1ade:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ae0:	98 17       	cp	r25, r24
    1ae2:	31 f0       	breq	.+12     	; 0x1af0 <HardwareSerial::peek()+0x16>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1ae4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ae6:	e8 0f       	add	r30, r24
    1ae8:	f1 1d       	adc	r31, r1
    1aea:	85 8d       	ldd	r24, Z+29	; 0x1d
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1af4:	08 95       	ret

00001af6 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    1af6:	fc 01       	movw	r30, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1af8:	91 8d       	ldd	r25, Z+25	; 0x19
    1afa:	82 8d       	ldd	r24, Z+26	; 0x1a
    1afc:	98 17       	cp	r25, r24
    1afe:	61 f0       	breq	.+24     	; 0x1b18 <HardwareSerial::read()+0x22>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1b00:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b02:	ae 0f       	add	r26, r30
    1b04:	bf 2f       	mov	r27, r31
    1b06:	b1 1d       	adc	r27, r1
    1b08:	5d 96       	adiw	r26, 0x1d	; 29
    1b0a:	8c 91       	ld	r24, X
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1b0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b0e:	9f 5f       	subi	r25, 0xFF	; 255
    1b10:	9f 73       	andi	r25, 0x3F	; 63
    1b12:	92 8f       	std	Z+26, r25	; 0x1a
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b18:	8f ef       	ldi	r24, 0xFF	; 255
    1b1a:	9f ef       	ldi	r25, 0xFF	; 255
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1b1c:	08 95       	ret

00001b1e <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1b1e:	fc 01       	movw	r30, r24
    1b20:	53 8d       	ldd	r21, Z+27	; 0x1b
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    1b22:	44 8d       	ldd	r20, Z+28	; 0x1c
    1b24:	25 2f       	mov	r18, r21
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	84 2f       	mov	r24, r20
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1b2c:	82 1b       	sub	r24, r18
    1b2e:	93 0b       	sbc	r25, r19
    1b30:	54 17       	cp	r21, r20
    1b32:	10 f0       	brcs	.+4      	; 0x1b38 <HardwareSerial::availableForWrite()+0x1a>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    1b34:	cf 96       	adiw	r24, 0x3f	; 63
    1b36:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    1b38:	01 97       	sbiw	r24, 0x01	; 1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
    1b3a:	08 95       	ret

00001b3c <serialEventRun()>:
_Z14serialEventRunv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b3c:	83 ee       	ldi	r24, 0xE3	; 227
    1b3e:	9e e0       	ldi	r25, 0x0E	; 14
    1b40:	89 2b       	or	r24, r25
    1b42:	39 f0       	breq	.+14     	; 0x1b52 <serialEventRun()+0x16>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	89 2b       	or	r24, r25
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <serialEventRun()+0x16>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    1b4c:	3c d1       	rcall	.+632    	; 0x1dc6 <Serial0_available()>
    1b4e:	81 11       	cpse	r24, r1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    1b50:	57 c2       	rjmp	.+1198   	; 0x2000 <__TEXT_REGION_LENGTH__>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    1b52:	08 95       	ret

00001b54 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1b54:	fc 01       	movw	r30, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1b56:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1b58:	a8 0f       	add	r26, r24
    1b5a:	b9 2f       	mov	r27, r25
    1b5c:	b1 1d       	adc	r27, r1
    1b5e:	a3 5a       	subi	r26, 0xA3	; 163
    1b60:	bf 4f       	sbci	r27, 0xFF	; 255
    1b62:	2c 91       	ld	r18, X
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1b64:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	8f 73       	andi	r24, 0x3F	; 63
    1b6c:	99 27       	eor	r25, r25
    1b6e:	84 8f       	std	Z+28, r24	; 0x1c
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    1b70:	a6 89       	ldd	r26, Z+22	; 0x16
    1b72:	b7 89       	ldd	r27, Z+23	; 0x17
    1b74:	2c 93       	st	X, r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    1b76:	a0 89       	ldd	r26, Z+16	; 0x10
    1b78:	b1 89       	ldd	r27, Z+17	; 0x11
    1b7a:	8c 91       	ld	r24, X
    1b7c:	82 74       	andi	r24, 0x42	; 66
    1b7e:	8c 93       	st	X, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1b80:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b82:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b84:	98 13       	cpse	r25, r24
    1b86:	06 c0       	rjmp	.+12     	; 0x1b94 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1b88:	02 88       	ldd	r0, Z+18	; 0x12
    1b8a:	f3 89       	ldd	r31, Z+19	; 0x13
    1b8c:	e0 2d       	mov	r30, r0
    1b8e:	80 81       	ld	r24, Z
    1b90:	8f 7d       	andi	r24, 0xDF	; 223
    1b92:	80 83       	st	Z, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    1b94:	08 95       	ret

00001b96 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	ec 01       	movw	r28, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1b9c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b9e:	88 23       	and	r24, r24
    1ba0:	b1 f0       	breq	.+44     	; 0x1bce <HardwareSerial::flush()+0x38>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1ba2:	aa 89       	ldd	r26, Y+18	; 0x12
    1ba4:	bb 89       	ldd	r27, Y+19	; 0x13
    1ba6:	e8 89       	ldd	r30, Y+16	; 0x10
    1ba8:	f9 89       	ldd	r31, Y+17	; 0x11
    1baa:	8c 91       	ld	r24, X
    1bac:	85 fd       	sbrc	r24, 5
    1bae:	03 c0       	rjmp	.+6      	; 0x1bb6 <HardwareSerial::flush()+0x20>
    1bb0:	80 81       	ld	r24, Z
    1bb2:	86 fd       	sbrc	r24, 6
    1bb4:	0c c0       	rjmp	.+24     	; 0x1bce <HardwareSerial::flush()+0x38>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	07 fc       	sbrc	r0, 7
    1bba:	f7 cf       	rjmp	.-18     	; 0x1baa <HardwareSerial::flush()+0x14>
    1bbc:	8c 91       	ld	r24, X
    1bbe:	85 ff       	sbrs	r24, 5
    1bc0:	f2 cf       	rjmp	.-28     	; 0x1ba6 <HardwareSerial::flush()+0x10>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    1bc2:	80 81       	ld	r24, Z
    1bc4:	85 ff       	sbrs	r24, 5
    1bc6:	ed cf       	rjmp	.-38     	; 0x1ba2 <HardwareSerial::flush()+0xc>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    1bc8:	ce 01       	movw	r24, r28
    1bca:	c4 df       	rcall	.-120    	; 0x1b54 <HardwareSerial::_tx_udr_empty_irq()>
    1bcc:	ea cf       	rjmp	.-44     	; 0x1ba2 <HardwareSerial::flush()+0xc>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	ec 01       	movw	r28, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	88 8f       	std	Y+24, r24	; 0x18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1be6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1be8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bea:	98 13       	cpse	r25, r24
    1bec:	19 c0       	rjmp	.+50     	; 0x1c20 <HardwareSerial::write(unsigned char)+0x4c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    1bee:	e8 89       	ldd	r30, Y+16	; 0x10
    1bf0:	f9 89       	ldd	r31, Y+17	; 0x11
    1bf2:	80 81       	ld	r24, Z
    1bf4:	85 ff       	sbrs	r24, 5
    1bf6:	14 c0       	rjmp	.+40     	; 0x1c20 <HardwareSerial::write(unsigned char)+0x4c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1bf8:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/moritz/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bfa:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    1bfc:	ee 89       	ldd	r30, Y+22	; 0x16
    1bfe:	ff 89       	ldd	r31, Y+23	; 0x17
    1c00:	60 83       	st	Z, r22
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    1c02:	e8 89       	ldd	r30, Y+16	; 0x10
    1c04:	f9 89       	ldd	r31, Y+17	; 0x11
    1c06:	80 81       	ld	r24, Z
    1c08:	82 74       	andi	r24, 0x42	; 66
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    1c0a:	80 83       	st	Z, r24
__iRestore():
/Users/moritz/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c0c:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14
    1c1e:	08 95       	ret
    1c20:	f6 2e       	mov	r15, r22
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1c22:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1c24:	10 e0       	ldi	r17, 0x00	; 0
    1c26:	0f 5f       	subi	r16, 0xFF	; 255
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	0f 73       	andi	r16, 0x3F	; 63
    1c2c:	11 27       	eor	r17, r17
    1c2e:	e0 2e       	mov	r14, r16
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1c30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c32:	8e 11       	cpse	r24, r14
    1c34:	0b c0       	rjmp	.+22     	; 0x1c4c <HardwareSerial::write(unsigned char)+0x78>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	07 fc       	sbrc	r0, 7
    1c3a:	fa cf       	rjmp	.-12     	; 0x1c30 <HardwareSerial::write(unsigned char)+0x5c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1c3c:	e8 89       	ldd	r30, Y+16	; 0x10
    1c3e:	f9 89       	ldd	r31, Y+17	; 0x11
    1c40:	80 81       	ld	r24, Z
    1c42:	85 ff       	sbrs	r24, 5
    1c44:	f5 cf       	rjmp	.-22     	; 0x1c30 <HardwareSerial::write(unsigned char)+0x5c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    1c46:	ce 01       	movw	r24, r28
    1c48:	85 df       	rcall	.-246    	; 0x1b54 <HardwareSerial::_tx_udr_empty_irq()>
    1c4a:	f2 cf       	rjmp	.-28     	; 0x1c30 <HardwareSerial::write(unsigned char)+0x5c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1c4c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1c4e:	ec 0f       	add	r30, r28
    1c50:	fd 2f       	mov	r31, r29
    1c52:	f1 1d       	adc	r31, r1
    1c54:	e3 5a       	subi	r30, 0xA3	; 163
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	f0 82       	st	Z, r15
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c5a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/moritz/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c5c:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    1c5e:	0b 8f       	std	Y+27, r16	; 0x1b
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    1c60:	ea 89       	ldd	r30, Y+18	; 0x12
    1c62:	fb 89       	ldd	r31, Y+19	; 0x13
    1c64:	80 81       	ld	r24, Z
    1c66:	80 62       	ori	r24, 0x20	; 32
    1c68:	d0 cf       	rjmp	.-96     	; 0x1c0a <HardwareSerial::write(unsigned char)+0x36>

00001c6a <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1c6a:	cf 92       	push	r12
    1c6c:	df 92       	push	r13
    1c6e:	ef 92       	push	r14
    1c70:	ff 92       	push	r15
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	ec 01       	movw	r28, r24
    1c7a:	6a 01       	movw	r12, r20
    1c7c:	7b 01       	movw	r14, r22
    1c7e:	12 2f       	mov	r17, r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1c80:	e8 89       	ldd	r30, Y+16	; 0x10
    1c82:	f9 89       	ldd	r31, Y+17	; 0x11
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	80 83       	st	Z, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c88:	c1 14       	cp	r12, r1
    1c8a:	81 ee       	ldi	r24, 0xE1	; 225
    1c8c:	d8 06       	cpc	r13, r24
    1c8e:	e1 04       	cpc	r14, r1
    1c90:	f1 04       	cpc	r15, r1
    1c92:	99 f0       	breq	.+38     	; 0x1cba <HardwareSerial::begin(unsigned long, unsigned char)+0x50>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:120 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	79 e0       	ldi	r23, 0x09	; 9
    1c98:	8d e3       	ldi	r24, 0x3D	; 61
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	a7 01       	movw	r20, r14
    1c9e:	96 01       	movw	r18, r12
    1ca0:	fe d0       	rcall	.+508    	; 0x1e9e <__udivmodsi4>
    1ca2:	21 50       	subi	r18, 0x01	; 1
    1ca4:	31 09       	sbc	r19, r1
    1ca6:	41 09       	sbc	r20, r1
    1ca8:	51 09       	sbc	r21, r1
    1caa:	56 95       	lsr	r21
    1cac:	47 95       	ror	r20
    1cae:	37 95       	ror	r19
    1cb0:	27 95       	ror	r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:128 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1cb2:	21 15       	cp	r18, r1
    1cb4:	80 e1       	ldi	r24, 0x10	; 16
    1cb6:	38 07       	cpc	r19, r24
    1cb8:	90 f0       	brcs	.+36     	; 0x1cde <HardwareSerial::begin(unsigned long, unsigned char)+0x74>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    1cba:	e8 89       	ldd	r30, Y+16	; 0x10
    1cbc:	f9 89       	ldd	r31, Y+17	; 0x11
    1cbe:	10 82       	st	Z, r1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1cc0:	60 e8       	ldi	r22, 0x80	; 128
    1cc2:	74 e8       	ldi	r23, 0x84	; 132
    1cc4:	8e e1       	ldi	r24, 0x1E	; 30
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a7 01       	movw	r20, r14
    1cca:	96 01       	movw	r18, r12
    1ccc:	e8 d0       	rcall	.+464    	; 0x1e9e <__udivmodsi4>
    1cce:	21 50       	subi	r18, 0x01	; 1
    1cd0:	31 09       	sbc	r19, r1
    1cd2:	41 09       	sbc	r20, r1
    1cd4:	51 09       	sbc	r21, r1
    1cd6:	56 95       	lsr	r21
    1cd8:	47 95       	ror	r20
    1cda:	37 95       	ror	r19
    1cdc:	27 95       	ror	r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1cde:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ce0:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ce2:	30 83       	st	Z, r19
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    1ce4:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ce6:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ce8:	20 83       	st	Z, r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    1cea:	18 8e       	std	Y+24, r1	; 0x18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
    1cec:	10 68       	ori	r17, 0x80	; 128
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#endif
  *_ucsrc = config;
    1cee:	ec 89       	ldd	r30, Y+20	; 0x14
    1cf0:	fd 89       	ldd	r31, Y+21	; 0x15
    1cf2:	10 83       	st	Z, r17
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1cf4:	ea 89       	ldd	r30, Y+18	; 0x12
    1cf6:	fb 89       	ldd	r31, Y+19	; 0x13
    1cf8:	80 81       	ld	r24, Z
    1cfa:	88 69       	ori	r24, 0x98	; 152
    1cfc:	80 83       	st	Z, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    1cfe:	ea 89       	ldd	r30, Y+18	; 0x12
    1d00:	fb 89       	ldd	r31, Y+19	; 0x13
    1d02:	80 81       	ld	r24, Z
    1d04:	8f 7d       	andi	r24, 0xDF	; 223
    1d06:	80 83       	st	Z, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:150
}
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	08 95       	ret

00001d18 <__vector_11>:
__vector_11():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1d18:	1f 92       	push	r1
    1d1a:	0f 92       	push	r0
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	0f 92       	push	r0
    1d20:	11 24       	eor	r1, r1
    1d22:	2f 93       	push	r18
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	ef 93       	push	r30
    1d2a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1d2c:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <Serial+0x10>
    1d30:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <Serial+0x11>
    1d34:	80 81       	ld	r24, Z
    1d36:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <Serial+0x16>
    1d3a:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <Serial+0x17>
    1d3e:	82 fd       	sbrc	r24, 2
    1d40:	1b c0       	rjmp	.+54     	; 0x1d78 <__vector_11+0x60>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1d42:	90 81       	ld	r25, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1d44:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <Serial+0x19>
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	8f 73       	andi	r24, 0x3F	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1d4c:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <Serial+0x1a>
    1d50:	82 17       	cp	r24, r18
    1d52:	41 f0       	breq	.+16     	; 0x1d64 <__vector_11+0x4c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1d54:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <Serial+0x19>
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	e7 53       	subi	r30, 0x37	; 55
    1d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5e:	95 8f       	std	Z+29, r25	; 0x1d
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1d60:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <Serial+0x19>
__vector_11():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1d64:	ff 91       	pop	r31
    1d66:	ef 91       	pop	r30
    1d68:	9f 91       	pop	r25
    1d6a:	8f 91       	pop	r24
    1d6c:	2f 91       	pop	r18
    1d6e:	0f 90       	pop	r0
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	0f 90       	pop	r0
    1d74:	1f 90       	pop	r1
    1d76:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1d78:	80 81       	ld	r24, Z
__vector_11():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    1d7a:	f4 cf       	rjmp	.-24     	; 0x1d64 <__vector_11+0x4c>

00001d7c <__vector_12>:
__vector_12():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1d7c:	1f 92       	push	r1
    1d7e:	0f 92       	push	r0
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	0f 92       	push	r0
    1d84:	11 24       	eor	r1, r1
    1d86:	2f 93       	push	r18
    1d88:	3f 93       	push	r19
    1d8a:	4f 93       	push	r20
    1d8c:	5f 93       	push	r21
    1d8e:	6f 93       	push	r22
    1d90:	7f 93       	push	r23
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	af 93       	push	r26
    1d98:	bf 93       	push	r27
    1d9a:	ef 93       	push	r30
    1d9c:	ff 93       	push	r31
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1d9e:	89 ec       	ldi	r24, 0xC9	; 201
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	d8 de       	rcall	.-592    	; 0x1b54 <HardwareSerial::_tx_udr_empty_irq()>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1da4:	ff 91       	pop	r31
    1da6:	ef 91       	pop	r30
    1da8:	bf 91       	pop	r27
    1daa:	af 91       	pop	r26
    1dac:	9f 91       	pop	r25
    1dae:	8f 91       	pop	r24
    1db0:	7f 91       	pop	r23
    1db2:	6f 91       	pop	r22
    1db4:	5f 91       	pop	r21
    1db6:	4f 91       	pop	r20
    1db8:	3f 91       	pop	r19
    1dba:	2f 91       	pop	r18
    1dbc:	0f 90       	pop	r0
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	0f 90       	pop	r0
    1dc2:	1f 90       	pop	r1
    1dc4:	18 95       	reti

00001dc6 <Serial0_available()>:
_Z17Serial0_availablev():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1dc6:	89 ec       	ldi	r24, 0xC9	; 201
    1dc8:	91 e0       	ldi	r25, 0x01	; 1
    1dca:	7b de       	rcall	.-778    	; 0x1ac2 <HardwareSerial::available()>
    1dcc:	21 e0       	ldi	r18, 0x01	; 1
    1dce:	89 2b       	or	r24, r25
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <Serial0_available()+0xe>
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1dd4:	82 2f       	mov	r24, r18
    1dd6:	08 95       	ret

00001dd8 <_GLOBAL__sub_I___vector_11>:
_ZN5PrintC4Ev():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1dd8:	e9 ec       	ldi	r30, 0xC9	; 201
    1dda:	f1 e0       	ldi	r31, 0x01	; 1
    1ddc:	13 82       	std	Z+3, r1	; 0x03
    1dde:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1de0:	88 ee       	ldi	r24, 0xE8	; 232
    1de2:	93 e0       	ldi	r25, 0x03	; 3
    1de4:	a0 e0       	ldi	r26, 0x00	; 0
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	84 83       	std	Z+4, r24	; 0x04
    1dea:	95 83       	std	Z+5, r25	; 0x05
    1dec:	a6 83       	std	Z+6, r26	; 0x06
    1dee:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1df0:	88 e6       	ldi	r24, 0x68	; 104
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	80 83       	st	Z, r24
    1df8:	80 e4       	ldi	r24, 0x40	; 64
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	95 87       	std	Z+13, r25	; 0x0d
    1dfe:	84 87       	std	Z+12, r24	; 0x0c
    1e00:	29 e2       	ldi	r18, 0x29	; 41
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	37 87       	std	Z+15, r19	; 0x0f
    1e06:	26 87       	std	Z+14, r18	; 0x0e
    1e08:	2b e2       	ldi	r18, 0x2B	; 43
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	31 8b       	std	Z+17, r19	; 0x11
    1e0e:	20 8b       	std	Z+16, r18	; 0x10
    1e10:	2a e2       	ldi	r18, 0x2A	; 42
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	33 8b       	std	Z+19, r19	; 0x13
    1e16:	22 8b       	std	Z+18, r18	; 0x12
    1e18:	95 8b       	std	Z+21, r25	; 0x15
    1e1a:	84 8b       	std	Z+20, r24	; 0x14
    1e1c:	8c e2       	ldi	r24, 0x2C	; 44
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	97 8b       	std	Z+23, r25	; 0x17
    1e22:	86 8b       	std	Z+22, r24	; 0x16
    1e24:	11 8e       	std	Z+25, r1	; 0x19
    1e26:	12 8e       	std	Z+26, r1	; 0x1a
    1e28:	13 8e       	std	Z+27, r1	; 0x1b
    1e2a:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_11():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    1e2c:	08 95       	ret

00001e2e <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1e2e:	af 92       	push	r10
    1e30:	bf 92       	push	r11
    1e32:	cf 92       	push	r12
    1e34:	df 92       	push	r13
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	6c 01       	movw	r12, r24
    1e44:	7b 01       	movw	r14, r22
    1e46:	8b 01       	movw	r16, r22
    1e48:	04 0f       	add	r16, r20
    1e4a:	15 1f       	adc	r17, r21
    1e4c:	eb 01       	movw	r28, r22
    1e4e:	5e 01       	movw	r10, r28
    1e50:	ae 18       	sub	r10, r14
    1e52:	bf 08       	sbc	r11, r15
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    1e54:	c0 17       	cp	r28, r16
    1e56:	d1 07       	cpc	r29, r17
    1e58:	59 f0       	breq	.+22     	; 0x1e70 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    1e5a:	69 91       	ld	r22, Y+
    1e5c:	d6 01       	movw	r26, r12
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	01 90       	ld	r0, Z+
    1e64:	f0 81       	ld	r31, Z
    1e66:	e0 2d       	mov	r30, r0
    1e68:	c6 01       	movw	r24, r12
    1e6a:	09 95       	icall
    1e6c:	89 2b       	or	r24, r25
    1e6e:	79 f7       	brne	.-34     	; 0x1e4e <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    1e70:	c5 01       	movw	r24, r10
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	cf 90       	pop	r12
    1e82:	bf 90       	pop	r11
    1e84:	af 90       	pop	r10
    1e86:	08 95       	ret

00001e88 <initVariant>:
initVariant():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1e88:	08 95       	ret

00001e8a <main>:
main():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1e8a:	60 dd       	rcall	.-1344   	; 0x194c <init>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    1e8c:	fd df       	rcall	.-6      	; 0x1e88 <initVariant>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1e8e:	59 d2       	rcall	.+1202   	; 0x2342 <__TEXT_REGION_LENGTH__+0x342>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1e90:	ce e9       	ldi	r28, 0x9E	; 158
    1e92:	dd e0       	ldi	r29, 0x0D	; 13
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1e94:	c8 d6       	rcall	.+3472   	; 0x2c26 <__TEXT_REGION_LENGTH__+0xc26>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1e96:	20 97       	sbiw	r28, 0x00	; 0
    1e98:	e9 f3       	breq	.-6      	; 0x1e94 <main+0xa>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1e9a:	50 de       	rcall	.-864    	; 0x1b3c <serialEventRun()>
    1e9c:	fb cf       	rjmp	.-10     	; 0x1e94 <main+0xa>

00001e9e <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1e9e:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1ea0:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1ea2:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1ea4:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1ea6:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1ea8:	0d c0       	rjmp	.+26     	; 0x1ec4 <__udivmodsi4_ep>

00001eaa <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1eaa:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1eac:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1eae:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1eb0:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1eb2:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1eb4:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1eb6:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1eb8:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1eba:	20 f0       	brcs	.+8      	; 0x1ec4 <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1ebc:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1ebe:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1ec0:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1ec2:	f5 0b       	sbc	r31, r21

00001ec4 <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1ec4:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1ec6:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1ec8:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1eca:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1ecc:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1ed0:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1ed2:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1ed4:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1ed6:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1ed8:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1eda:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1edc:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1ede:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1ee0:	08 95       	ret

00001ee2 <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1ee2:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1ee4:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1ee6:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1ee8:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1eea:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1eec:	09 94       	ijmp

00001eee <_exit>:
exit():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1eee:	f8 94       	cli

00001ef0 <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1ef0:	ff cf       	rjmp	.-2      	; 0x1ef0 <__stop_program>
