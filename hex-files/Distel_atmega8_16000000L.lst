
/var/folders/l7/8zwbnrhd667_66vjxqzt_9680000gn/T/arduino_build_997556/PCB_V01.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	e7 c0       	rjmp	.+462    	; 0x1d0 <__ctors_end>
       2:	df cb       	rjmp	.-2114   	; 0xfffff7c2 <__eeprom_end+0xff7ef7c2>
       4:	05 cc       	rjmp	.-2038   	; 0xfffff810 <__eeprom_end+0xff7ef810>
       6:	09 c1       	rjmp	.+530    	; 0x21a <__bad_interrupt>
       8:	08 c1       	rjmp	.+528    	; 0x21a <__bad_interrupt>
       a:	07 c1       	rjmp	.+526    	; 0x21a <__bad_interrupt>
       c:	06 c1       	rjmp	.+524    	; 0x21a <__bad_interrupt>
       e:	05 c1       	rjmp	.+522    	; 0x21a <__bad_interrupt>
      10:	04 c1       	rjmp	.+520    	; 0x21a <__bad_interrupt>
      12:	25 cc       	rjmp	.-1974   	; 0xfffff85e <__eeprom_end+0xff7ef85e>
      14:	02 c1       	rjmp	.+516    	; 0x21a <__bad_interrupt>
      16:	a1 ce       	rjmp	.-702    	; 0xfffffd5a <__eeprom_end+0xff7efd5a>
      18:	d2 ce       	rjmp	.-604    	; 0xfffffdbe <__eeprom_end+0xff7efdbe>
      1a:	ff c0       	rjmp	.+510    	; 0x21a <__bad_interrupt>
      1c:	fe c0       	rjmp	.+508    	; 0x21a <__bad_interrupt>
      1e:	fd c0       	rjmp	.+506    	; 0x21a <__bad_interrupt>
      20:	fc c0       	rjmp	.+504    	; 0x21a <__bad_interrupt>
      22:	fb c0       	rjmp	.+502    	; 0x21a <__bad_interrupt>
      24:	fa c0       	rjmp	.+500    	; 0x21a <__bad_interrupt>

00000026 <__trampolines_end>:
__trampolines_start():
      26:	40 40       	sbci	r20, 0x00	; 0
      28:	20 20       	and	r2, r0
      2a:	08 04       	cpc	r0, r8
      2c:	02 02       	muls	r16, r18

0000002e <scroll_remap>:
      2e:	19 12 18 14 15 bb 16 11 17 13 1a                    ...........

00000039 <extended_key>:
      39:	12 bb 7c 04 14 09 11 0b 1f 0c 27 0d 2f 0e 7e 0f     ..|.......'./.~.
      49:	6c 11 69 12 7d 13 7a 14 6b 15 74 16 75 17 72 18     l.i.}.z.k.t.u.r.
      59:	70 19 71 1a 5a 2b 4a 2f 4d 79 15 7a 3b 7b 34 7c     p.q.Z+J/My.z;{4|
      69:	23 7d 32 7e 21 7f 50 80 48 81 2b 82 40 83 10 84     #}2~!.P.H.+.@...
      79:	3a 85 38 86 30 87 28 88 20 89 18 8a 37 8c 3f 8d     :.8.0.(. ...7.?.
      89:	5e 90                                               ^.

0000008b <single_key>:
      8b:	77 01 7e 02 58 03 12 06 59 07 14 08 11 0a 84 10     w.~.X...Y.......
      9b:	76 1b 66 1c 0d 1d 5a 1e 29 1f 70 20 69 21 72 22     v.f...Z.).p i!r"
      ab:	7a 23 6b 24 73 25 74 26 6c 27 75 28 7d 29 71 2a     z#k$s%t&l'u(})q*
      bb:	79 2c 7b 2d 7c 2e 0f 3f 45 30 16 31 1e 32 26 33     y,{-|..?E0.1.2&3
      cb:	25 34 2e 35 36 36 3d 37 3e 38 46 39 52 3a 41 3b     %4.566=7>8F9R:A;
      db:	4e 3c 49 3d 4a 3e 0e 40 1c 41 32 42 21 43 23 44     N<I=J>.@.A2B!C#D
      eb:	24 45 2b 46 34 47 33 48 43 49 3b 4a 42 4b 4b 4c     $E+F4G3HCI;JBKKL
      fb:	3a 4d 31 4e 44 4f 4d 50 15 51 2d 52 1b 53 2c 54     :M1NDOMP.Q-R.S,T
     10b:	3c 55 2a 56 1d 57 22 58 35 59 1a 5a 4c 5b 5d 5c     <U*V.W"X5Y.ZL[]\
     11b:	54 5d 5b 5e 55 5f 61 8b 05 61 06 62 04 63 0c 64     T][^U_a..a.b.c.d
     12b:	03 65 0b 66 83 67 0a 68 01 69 09 6a 78 6b 07 6c     .e.f.g.h.i.jxk.l
     13b:	08 6d 10 6e 18 6f 20 70 28 71 30 72 38 73 40 74     .m.n.o p(q0r8s@t
     14b:	48 75 50 76 57 77 5f 78 6d 60 51 91 13 92 6a 93     HuPvWw_xm`Q...j.
     15b:	64 94 67 95 f2 96 f1 97 63 98 62 99 5f a0           d.g.....c.b._.

00000169 <digital_pin_to_timer_PGM>:
	...
     171:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00        ...............

00000180 <digital_pin_to_bit_mask_PGM>:
     180:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     190:	04 08 10 20 40 80 40                                ... @.@

00000197 <digital_pin_to_port_PGM>:
     197:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1a7:	03 03 03 03 02 02 03                                .......

000001ae <port_to_input_PGM>:
     1ae:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

000001b8 <port_to_output_PGM>:
     1b8:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

000001c2 <port_to_mode_PGM>:
     1c2:	00 00 00 00 37 00 34 00 31 00                       ....7.4.1.

000001cc <__ctors_start>:
__ctors_start():
     1cc:	57 07       	cpc	r21, r23
     1ce:	0d 0f       	add	r16, r29

000001d0 <__ctors_end>:
__dtors_end():
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf e5       	ldi	r28, 0x5F	; 95
     1d6:	d4 e0       	ldi	r29, 0x04	; 4
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     1dc:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     1de:	a0 e6       	ldi	r26, 0x60	; 96
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     1e2:	e4 e3       	ldi	r30, 0x34	; 52
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     1e4:	ff e1       	ldi	r31, 0x1F	; 31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     1e8:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     1ea:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     1ec:	a8 37       	cpi	r26, 0x78	; 120
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     1ee:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0xc>

000001f2 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1f2:	22 e0       	ldi	r18, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1f4:	a8 e7       	ldi	r26, 0x78	; 120
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1fc:	a1 37       	cpi	r26, 0x71	; 113
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1fe:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>

00000202 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     202:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     204:	c8 ee       	ldi	r28, 0xE8	; 232
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     206:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     208:	03 c0       	rjmp	.+6      	; 0x210 <__do_global_ctors+0xe>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     20a:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     20c:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     20e:	8a de       	rcall	.-748    	; 0xffffff24 <__eeprom_end+0xff7eff24>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     210:	c6 3e       	cpi	r28, 0xE6	; 230
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     212:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     214:	d1 f7       	brne	.-12     	; 0x20a <__do_global_ctors+0x8>
     216:	5a de       	rcall	.-844    	; 0xfffffecc <__eeprom_end+0xff7efecc>
     218:	8b ce       	rjmp	.-746    	; 0xffffff30 <__eeprom_end+0xff7eff30>

0000021a <__bad_interrupt>:
__bad_interrupt():
     21a:	f2 ce       	rjmp	.-540    	; 0x0 <__vectors>

0000021c <handleNoteOn(unsigned char, unsigned char, unsigned char)>:
_Z12handleNoteOnhhh():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:52

int enc0CC, enc1CC, enc2CC, enc3CC, enc4CC, enc5CC, enc6CC, enc7CC;
int keyboardStatusCC, keyboardCodeCC;

void handleNoteOn(byte inChannel, byte inNote, byte inVelocity) {
  if(inNote == adress) {
     21c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <adress>
     220:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <adress+0x1>
     224:	68 17       	cp	r22, r24
     226:	19 06       	cpc	r1, r25
     228:	31 f4       	brne	.+12     	; 0x236 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x1a>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:53
    analogWrite(PIN_PC5, inVelocity * 8);
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	48 9f       	mul	r20, r24
     22e:	b0 01       	movw	r22, r0
     230:	11 24       	eor	r1, r1
     232:	83 e1       	ldi	r24, 0x13	; 19
     234:	8e cb       	rjmp	.-2276   	; 0xfffff952 <__eeprom_end+0xff7ef952>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:55
  }
  }
     236:	08 95       	ret

00000238 <Encoder::Encoder(unsigned char, unsigned char)>:
_ZN7EncoderC2Ehh():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:79
} Encoder_internal_state_t;

class Encoder
{
public:
	Encoder(uint8_t pin1, uint8_t pin2) {
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ec 01       	movw	r28, r24
     242:	06 2f       	mov	r16, r22
     244:	14 2f       	mov	r17, r20
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:81
		#ifdef INPUT_PULLUP
		pinMode(pin1, INPUT_PULLUP);
     246:	62 e0       	ldi	r22, 0x02	; 2
     248:	80 2f       	mov	r24, r16
     24a:	cb db       	rcall	.-2154   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:82
		pinMode(pin2, INPUT_PULLUP);
     24c:	62 e0       	ldi	r22, 0x02	; 2
     24e:	81 2f       	mov	r24, r17
     250:	c8 db       	rcall	.-2160   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:89
		pinMode(pin1, INPUT);
		digitalWrite(pin1, HIGH);
		pinMode(pin2, INPUT);
		digitalWrite(pin2, HIGH);
		#endif
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
     252:	60 2f       	mov	r22, r16
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	fb 01       	movw	r30, r22
     258:	e9 56       	subi	r30, 0x69	; 105
     25a:	fe 4f       	sbci	r31, 0xFE	; 254
     25c:	e4 91       	lpm	r30, Z
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	ee 0f       	add	r30, r30
     262:	ff 1f       	adc	r31, r31
     264:	e2 55       	subi	r30, 0x52	; 82
     266:	fe 4f       	sbci	r31, 0xFE	; 254
     268:	85 91       	lpm	r24, Z+
     26a:	94 91       	lpm	r25, Z
     26c:	99 83       	std	Y+1, r25	; 0x01
     26e:	88 83       	st	Y, r24
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:90
		encoder.pin1_bitmask = PIN_TO_BITMASK(pin1);
     270:	fb 01       	movw	r30, r22
     272:	e0 58       	subi	r30, 0x80	; 128
     274:	fe 4f       	sbci	r31, 0xFE	; 254
     276:	e4 91       	lpm	r30, Z
     278:	ec 83       	std	Y+4, r30	; 0x04
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:91
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
     27a:	41 2f       	mov	r20, r17
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	fa 01       	movw	r30, r20
     280:	e9 56       	subi	r30, 0x69	; 105
     282:	fe 4f       	sbci	r31, 0xFE	; 254
     284:	e4 91       	lpm	r30, Z
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	ee 0f       	add	r30, r30
     28a:	ff 1f       	adc	r31, r31
     28c:	e2 55       	subi	r30, 0x52	; 82
     28e:	fe 4f       	sbci	r31, 0xFE	; 254
     290:	85 91       	lpm	r24, Z+
     292:	94 91       	lpm	r25, Z
     294:	9b 83       	std	Y+3, r25	; 0x03
     296:	8a 83       	std	Y+2, r24	; 0x02
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:92
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
     298:	fa 01       	movw	r30, r20
     29a:	e0 58       	subi	r30, 0x80	; 128
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	e4 91       	lpm	r30, Z
     2a0:	ed 83       	std	Y+5, r30	; 0x05
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:93
		encoder.position = 0;
     2a2:	1f 82       	std	Y+7, r1	; 0x07
     2a4:	18 86       	std	Y+8, r1	; 0x08
     2a6:	19 86       	std	Y+9, r1	; 0x09
     2a8:	1a 86       	std	Y+10, r1	; 0x0a
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:97
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
     2aa:	80 ed       	ldi	r24, 0xD0	; 208
     2ac:	97 e0       	ldi	r25, 0x07	; 7
     2ae:	2d db       	rcall	.-2470   	; 0xfffff90a <__eeprom_end+0xff7ef90a>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:99
		uint8_t s = 0;
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
     2b0:	e8 81       	ld	r30, Y
     2b2:	f9 81       	ldd	r31, Y+1	; 0x01
     2b4:	90 81       	ld	r25, Z
     2b6:	8c 81       	ldd	r24, Y+4	; 0x04
     2b8:	98 23       	and	r25, r24
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <Encoder::Encoder(unsigned char, unsigned char)+0x88>
     2be:	80 e0       	ldi	r24, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:100
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
     2c0:	ea 81       	ldd	r30, Y+2	; 0x02
     2c2:	fb 81       	ldd	r31, Y+3	; 0x03
     2c4:	90 81       	ld	r25, Z
     2c6:	2d 81       	ldd	r18, Y+5	; 0x05
     2c8:	92 23       	and	r25, r18
     2ca:	09 f0       	breq	.+2      	; 0x2ce <Encoder::Encoder(unsigned char, unsigned char)+0x96>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:100 (discriminator 1)
     2cc:	82 60       	ori	r24, 0x02	; 2
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:101
		encoder.state = s;
     2ce:	8e 83       	std	Y+6, r24	; 0x06
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:107
#ifdef ENCODER_USE_INTERRUPTS
		interrupts_in_use = attach_interrupt(pin1, &encoder);
		interrupts_in_use += attach_interrupt(pin2, &encoder);
#endif
		//update_finishup();  // to force linker to include the code (does not work)
	}
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <Encoder::update(Encoder_internal_state_t*)>:
_ZN7Encoder6updateEP24Encoder_internal_state_t():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:216
	// but it is public to allow static interrupt routines.
	// DO NOT call update() directly from sketches.
#if defined(IRAM_ATTR)
	static IRAM_ATTR void update(Encoder_internal_state_t *arg) {
#else
	static void update(Encoder_internal_state_t *arg) {
     2da:	dc 01       	movw	r26, r24
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:301
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     2dc:	ed 91       	ld	r30, X+
     2de:	fd 91       	ld	r31, X+
     2e0:	80 81       	ld	r24, Z
     2e2:	ed 91       	ld	r30, X+
     2e4:	fd 91       	ld	r31, X+
     2e6:	90 81       	ld	r25, Z
     2e8:	ed 91       	ld	r30, X+
     2ea:	fd 91       	ld	r31, X+
     2ec:	6c 91       	ld	r22, X
     2ee:	63 70       	andi	r22, 0x03	; 3
     2f0:	8e 23       	and	r24, r30
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <L2081>
     2f4:	64 60       	ori	r22, 0x04	; 4

000002f6 <L2081>:
     2f6:	9f 23       	and	r25, r31
     2f8:	09 f0       	breq	.+2      	; 0x2fc <L2082>
     2fa:	68 60       	ori	r22, 0x08	; 8

000002fc <L2082>:
     2fc:	ea e8       	ldi	r30, 0x8A	; 138
     2fe:	f1 e0       	ldi	r31, 0x01	; 1
     300:	e6 0f       	add	r30, r22
     302:	f1 1d       	adc	r31, r1
     304:	65 95       	asr	r22
     306:	65 95       	asr	r22
     308:	6d 93       	st	X+, r22
     30a:	6d 91       	ld	r22, X+
     30c:	7d 91       	ld	r23, X+
     30e:	8d 91       	ld	r24, X+
     310:	9d 91       	ld	r25, X+
     312:	09 94       	ijmp

00000314 <L208table>:
     314:	23 c0       	rjmp	.+70     	; 0x35c <L208end>
     316:	1a c0       	rjmp	.+52     	; 0x34c <L208plus1>
     318:	12 c0       	rjmp	.+36     	; 0x33e <L208minus1>
     31a:	16 c0       	rjmp	.+44     	; 0x348 <L208plus2>
     31c:	10 c0       	rjmp	.+32     	; 0x33e <L208minus1>
     31e:	1e c0       	rjmp	.+60     	; 0x35c <L208end>
     320:	09 c0       	rjmp	.+18     	; 0x334 <L208minus2>
     322:	14 c0       	rjmp	.+40     	; 0x34c <L208plus1>
     324:	13 c0       	rjmp	.+38     	; 0x34c <L208plus1>
     326:	06 c0       	rjmp	.+12     	; 0x334 <L208minus2>
     328:	19 c0       	rjmp	.+50     	; 0x35c <L208end>
     32a:	09 c0       	rjmp	.+18     	; 0x33e <L208minus1>
     32c:	0d c0       	rjmp	.+26     	; 0x348 <L208plus2>
     32e:	07 c0       	rjmp	.+14     	; 0x33e <L208minus1>
     330:	0d c0       	rjmp	.+26     	; 0x34c <L208plus1>
     332:	14 c0       	rjmp	.+40     	; 0x35c <L208end>

00000334 <L208minus2>:
     334:	62 50       	subi	r22, 0x02	; 2
     336:	70 40       	sbci	r23, 0x00	; 0
     338:	80 40       	sbci	r24, 0x00	; 0
     33a:	90 40       	sbci	r25, 0x00	; 0
     33c:	0b c0       	rjmp	.+22     	; 0x354 <L208store>

0000033e <L208minus1>:
     33e:	61 50       	subi	r22, 0x01	; 1
     340:	70 40       	sbci	r23, 0x00	; 0
     342:	80 40       	sbci	r24, 0x00	; 0
     344:	90 40       	sbci	r25, 0x00	; 0
     346:	06 c0       	rjmp	.+12     	; 0x354 <L208store>

00000348 <L208plus2>:
     348:	6e 5f       	subi	r22, 0xFE	; 254
     34a:	01 c0       	rjmp	.+2      	; 0x34e <L208z>

0000034c <L208plus1>:
     34c:	6f 5f       	subi	r22, 0xFF	; 255

0000034e <L208z>:
     34e:	7f 4f       	sbci	r23, 0xFF	; 255
     350:	8f 4f       	sbci	r24, 0xFF	; 255
     352:	9f 4f       	sbci	r25, 0xFF	; 255

00000354 <L208store>:
     354:	9e 93       	st	-X, r25
     356:	8e 93       	st	-X, r24
     358:	7e 93       	st	-X, r23
     35a:	6e 93       	st	-X, r22

0000035c <L208end>:
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:324
			case 6: case 9:
				arg->position -= 2;
				return;
		}
#endif
	}
     35c:	08 95       	ret

0000035e <setup>:
_ZN4midi10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEE5beginEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/serialMIDI.h:62
	{
        // Initialise the Serial port
        #if defined(AVR_CAKE)
            mSerial. template open<Settings::BaudRate>();
        #else
            mSerial.begin(Settings::BaudRate);
     35e:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <MIDI+0x2a>
     362:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <MIDI+0x2b>
_ZN14HardwareSerial5beginEm():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     366:	26 e0       	ldi	r18, 0x06	; 6
     368:	42 e1       	ldi	r20, 0x12	; 18
     36a:	5a e7       	ldi	r21, 0x7A	; 122
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	9b dc       	rcall	.-1738   	; 0xfffffcac <__eeprom_end+0xff7efcac>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5beginEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:77
void MidiInterface<Transport, Settings, Platform>::begin(Channel inChannel)
{
    // Initialise the Transport layer
    mTransport.begin();

    mInputChannel = inChannel;
     376:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <MIDI+0x2c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:78
    mRunningStatus_TX = InvalidType;
     37a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <MIDI+0x2e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:79
    mRunningStatus_RX = InvalidType;
     37e:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <MIDI+0x2d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:81

    mPendingMessageIndex = 0;
     382:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <MIDI+0x35>
     386:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:82
    mPendingMessageExpectedLength = 0;
     38a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x33>
     38e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:84

    mCurrentRpnNumber  = 0xffff;
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	9f ef       	ldi	r25, 0xFF	; 255
     396:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <MIDI+0x37>
     39a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <MIDI+0x36>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:85
    mCurrentNrpnNumber = 0xffff;
     39e:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <MIDI+0x39>
     3a2:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <MIDI+0x38>
_ZN4midi15DefaultPlatform3nowEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/midi_Platform.h:39
#if ARDUINO

// DefaultPlatform is the Arduino Platform
struct DefaultPlatform
{
   static unsigned long now() { return ::millis(); };
     3a6:	a5 da       	rcall	.-2742   	; 0xfffff8f2 <__eeprom_end+0xff7ef8f2>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5beginEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:87

    mLastMessageSentTime = Platform::now();
     3a8:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <MIDI+0xc2>
     3ac:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <MIDI+0xc3>
     3b0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <MIDI+0xc4>
     3b4:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <MIDI+0xc5>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:89

    mMessage.valid   = false;
     3b8:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <MIDI+0xbf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:90
    mMessage.type    = InvalidType;
     3bc:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:91
    mMessage.channel = 0;
     3c0:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:92
    mMessage.data1   = 0;
     3c4:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:93
    mMessage.data2   = 0;
     3c8:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:94
    mMessage.length  = 0;
     3cc:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <MIDI+0xc1>
     3d0:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <MIDI+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:96

    mThruFilterMode = Thru::Full;
     3d4:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <MIDI+0x3a>
     3d8:	81 70       	andi	r24, 0x01	; 1
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:97
    mThruActivated  = mTransport.thruActivated;
     3da:	82 60       	ori	r24, 0x02	; 2
     3dc:	81 60       	ori	r24, 0x01	; 1
     3de:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <MIDI+0x3a>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE15setHandleNoteOnEPFvhhhE():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.h:189

public:
    inline void setHandleMessage(void (*fptr)(const MidiMessage&)) { mMessageCallback = fptr; };
    inline void setHandleError(ErrorCallback fptr) { mErrorCallback = fptr; }
    inline void setHandleNoteOff(NoteOffCallback fptr) { mNoteOffCallback = fptr; }
    inline void setHandleNoteOn(NoteOnCallback fptr) { mNoteOnCallback = fptr; }
     3e2:	8e e0       	ldi	r24, 0x0E	; 14
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <MIDI+0x7>
     3ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <MIDI+0x6>
setup():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:60

void setup() {
  MIDI.begin(0);
  MIDI.setHandleNoteOn(handleNoteOn);
  keyboard.begin(DataPin, IRQPin);
     3ee:	43 e0       	ldi	r20, 0x03	; 3
     3f0:	62 e0       	ldi	r22, 0x02	; 2
     3f2:	80 e9       	ldi	r24, 0x90	; 144
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	94 d9       	rcall	.-3288   	; 0xfffff720 <__eeprom_end+0xff7ef720>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:61
  keyboard.setNoRepeat(1);
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	80 e9       	ldi	r24, 0x90	; 144
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	44 d9       	rcall	.-3448   	; 0xfffff688 <__eeprom_end+0xff7ef688>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:62
  keyboard.setNoBreak(1);
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	80 e9       	ldi	r24, 0x90	; 144
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	36 d9       	rcall	.-3476   	; 0xfffff674 <__eeprom_end+0xff7ef674>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:63
  pinMode(PIN_PD4, INPUT_PULLUP);
     408:	62 e0       	ldi	r22, 0x02	; 2
     40a:	84 e0       	ldi	r24, 0x04	; 4
     40c:	ea da       	rcall	.-2604   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:64
  pinMode(DIP0, INPUT_PULLUP);
     40e:	62 e0       	ldi	r22, 0x02	; 2
     410:	80 e1       	ldi	r24, 0x10	; 16
     412:	e7 da       	rcall	.-2610   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:65
  pinMode(DIP1, INPUT_PULLUP);
     414:	62 e0       	ldi	r22, 0x02	; 2
     416:	81 e1       	ldi	r24, 0x11	; 17
     418:	e4 da       	rcall	.-2616   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:66
  pinMode(DIP2, INPUT_PULLUP);
     41a:	62 e0       	ldi	r22, 0x02	; 2
     41c:	82 e1       	ldi	r24, 0x12	; 18
     41e:	e1 da       	rcall	.-2622   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:67
  pinMode(PIN_PC5, OUTPUT);
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	83 e1       	ldi	r24, 0x13	; 19
     424:	de da       	rcall	.-2628   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:70


  bitWrite(adress, 0, digitalRead(DIP0));
     426:	80 e1       	ldi	r24, 0x10	; 16
     428:	45 db       	rcall	.-2422   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     42a:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <adress>
     42e:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <adress+0x1>
     432:	89 2b       	or	r24, r25
     434:	09 f4       	brne	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	66 c0       	rjmp	.+204    	; 0x504 <__stack+0xa5>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:70 (discriminator 1)
     438:	21 60       	ori	r18, 0x01	; 1
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:70 (discriminator 2)
     43a:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <adress+0x1>
     43e:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <adress>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:71 (discriminator 2)
  bitWrite(adress, 1, digitalRead(DIP1));
     442:	81 e1       	ldi	r24, 0x11	; 17
     444:	37 db       	rcall	.-2450   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     446:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <adress>
     44a:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <adress+0x1>
     44e:	89 2b       	or	r24, r25
     450:	09 f4       	brne	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	5a c0       	rjmp	.+180    	; 0x508 <__stack+0xa9>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:71 (discriminator 1)
     454:	22 60       	ori	r18, 0x02	; 2
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:71 (discriminator 2)
     456:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <adress+0x1>
     45a:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <adress>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:72 (discriminator 2)
  bitWrite(adress, 2, digitalRead(DIP2));
     45e:	82 e1       	ldi	r24, 0x12	; 18
     460:	29 db       	rcall	.-2478   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     462:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <adress>
     466:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <adress+0x1>
     46a:	89 2b       	or	r24, r25
     46c:	09 f4       	brne	.+2      	; 0x470 <__stack+0x11>
     46e:	4e c0       	rjmp	.+156    	; 0x50c <__stack+0xad>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:72 (discriminator 1)
     470:	24 60       	ori	r18, 0x04	; 4
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:72 (discriminator 2)
     472:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <adress+0x1>
     476:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <adress>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:74 (discriminator 2)

  enc0CC = 0 + (12 * adress);
     47a:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <adress>
     47e:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <adress+0x1>
     482:	4c e0       	ldi	r20, 0x0C	; 12
     484:	42 9f       	mul	r20, r18
     486:	c0 01       	movw	r24, r0
     488:	43 9f       	mul	r20, r19
     48a:	90 0d       	add	r25, r0
     48c:	11 24       	eor	r1, r1
     48e:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <enc0CC+0x1>
     492:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <enc0CC>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:75 (discriminator 2)
  enc1CC = 1 + (12 * adress);
     496:	9c 01       	movw	r18, r24
     498:	2f 5f       	subi	r18, 0xFF	; 255
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <enc1CC+0x1>
     4a0:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <enc1CC>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:76 (discriminator 2)
  enc2CC = 2 + (12 * adress);
     4a4:	2f 5f       	subi	r18, 0xFF	; 255
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <enc2CC+0x1>
     4ac:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <enc2CC>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:77 (discriminator 2)
  enc3CC = 3 + (12 * adress);
     4b0:	2f 5f       	subi	r18, 0xFF	; 255
     4b2:	3f 4f       	sbci	r19, 0xFF	; 255
     4b4:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <enc3CC+0x1>
     4b8:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <enc3CC>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:78 (discriminator 2)
  enc4CC = 4 + (12 * adress);
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <enc4CC+0x1>
     4c4:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <enc4CC>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:79 (discriminator 2)
  enc5CC = 5 + (12 * adress);
     4c8:	2f 5f       	subi	r18, 0xFF	; 255
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
     4cc:	30 93 83 00 	sts	0x0083, r19	; 0x800083 <enc5CC+0x1>
     4d0:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <enc5CC>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:80 (discriminator 2)
  enc6CC = 6 + (12 * adress);
     4d4:	2f 5f       	subi	r18, 0xFF	; 255
     4d6:	3f 4f       	sbci	r19, 0xFF	; 255
     4d8:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <enc6CC+0x1>
     4dc:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <enc6CC>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:81 (discriminator 2)
  enc7CC = 7 + (12 * adress);
     4e0:	2f 5f       	subi	r18, 0xFF	; 255
     4e2:	3f 4f       	sbci	r19, 0xFF	; 255
     4e4:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <enc7CC+0x1>
     4e8:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <enc7CC>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:83 (discriminator 2)

  keyboardStatusCC = 8 + (12 * adress);
     4ec:	2f 5f       	subi	r18, 0xFF	; 255
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
     4f0:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <keyboardStatusCC+0x1>
     4f4:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <keyboardStatusCC>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:84 (discriminator 2)
  keyboardCodeCC = 9 + (12 * adress);
     4f8:	09 96       	adiw	r24, 0x09	; 9
     4fa:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <keyboardCodeCC+0x1>
     4fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <keyboardCodeCC>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:85 (discriminator 2)
}
     502:	08 95       	ret
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:70 (discriminator 2)
  pinMode(DIP1, INPUT_PULLUP);
  pinMode(DIP2, INPUT_PULLUP);
  pinMode(PIN_PC5, OUTPUT);


  bitWrite(adress, 0, digitalRead(DIP0));
     504:	2e 7f       	andi	r18, 0xFE	; 254
     506:	99 cf       	rjmp	.-206    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:71 (discriminator 2)
  bitWrite(adress, 1, digitalRead(DIP1));
     508:	2d 7f       	andi	r18, 0xFD	; 253
     50a:	a5 cf       	rjmp	.-182    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:72 (discriminator 2)
  bitWrite(adress, 2, digitalRead(DIP2));
     50c:	2b 7f       	andi	r18, 0xFB	; 251
     50e:	b1 cf       	rjmp	.-158    	; 0x472 <__stack+0x13>

00000510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>:
_ZN4midi10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEE5writeEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/serialMIDI.h:73
		return true;
	};

	void write(byte value)
	{
		mSerial.write(value);
     510:	dc 01       	movw	r26, r24
     512:	8d 91       	ld	r24, X+
     514:	9c 91       	ld	r25, X
     516:	dc 01       	movw	r26, r24
     518:	ed 91       	ld	r30, X+
     51a:	fc 91       	ld	r31, X
     51c:	01 90       	ld	r0, Z+
     51e:	f0 81       	ld	r31, Z
     520:	e0 2d       	mov	r30, r0
     522:	09 94       	ijmp

00000524 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE12sendRealTimeENS_8MidiTypeE():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:497
void MidiInterface<Transport, Settings, Platform>::sendRealTime(MidiType inType)
{
    // Do not invalidate Running Status for real-time messages
    // as they can be interleaved within any message.

    switch (inType)
     524:	6d 3f       	cpi	r22, 0xFD	; 253
     526:	40 f4       	brcc	.+16     	; 0x538 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]+0x14>
     528:	6a 3f       	cpi	r22, 0xFA	; 250
     52a:	10 f4       	brcc	.+4      	; 0x530 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]+0xc>
     52c:	68 3f       	cpi	r22, 0xF8	; 248
     52e:	31 f4       	brne	.+12     	; 0x53c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]+0x18>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:507
        case Continue:
        case ActiveSensing:
        case SystemReset:
            if (mTransport.beginTransmission(inType))
            {
                mTransport.write((byte)inType);
     530:	fc 01       	movw	r30, r24
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	ec cf       	rjmp	.-40     	; 0x510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:497
void MidiInterface<Transport, Settings, Platform>::sendRealTime(MidiType inType)
{
    // Do not invalidate Running Status for real-time messages
    // as they can be interleaved within any message.

    switch (inType)
     538:	6e 3f       	cpi	r22, 0xFE	; 254
     53a:	d0 f7       	brcc	.-12     	; 0x530 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]+0xc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:516
            break;
        default:
            // Invalid Real Time marker
            break;
    }
}
     53c:	08 95       	ret

0000053e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4sendENS_8MidiTypeEhhh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:160

 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::send(MidiType inType,
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:168
                                               Channel inChannel)
{
    if (inType <= PitchBend)  // Channel messages
    {
        // Then test if channel is valid
        if (inChannel >= MIDI_CHANNEL_OFF  ||
     54a:	01 50       	subi	r16, 0x01	; 1
     54c:	00 31       	cpi	r16, 0x10	; 16
     54e:	08 f5       	brcc	.+66     	; 0x592 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]+0x54>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:169
            inChannel == MIDI_CHANNEL_OMNI ||
     550:	67 ff       	sbrs	r22, 7
     552:	1f c0       	rjmp	.+62     	; 0x592 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]+0x54>
     554:	d2 2f       	mov	r29, r18
     556:	14 2f       	mov	r17, r20
     558:	c6 2f       	mov	r28, r22
     55a:	7c 01       	movw	r14, r24
_ZNK4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE9getStatusENS_8MidiTypeEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:684

template<class Transport, class Settings, class Platform>
StatusByte MidiInterface<Transport, Settings, Platform>::getStatus(MidiType inType,
                                                          Channel inChannel) const
{
    return StatusByte(((byte)inType | ((inChannel - 1) & 0x0f)));
     55c:	60 2f       	mov	r22, r16
     55e:	6c 2b       	or	r22, r28
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4sendENS_8MidiTypeEhhh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:194
                }
            }
            else
            {
                // Don't care about running status, send the status byte.
                mTransport.write(status);
     560:	fc 01       	movw	r30, r24
     562:	82 a5       	ldd	r24, Z+42	; 0x2a
     564:	93 a5       	ldd	r25, Z+43	; 0x2b
     566:	d4 df       	rcall	.-88     	; 0x510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:175
            inType < 0x80)
        {
            return; // Don't send anything
        }
        // Protection: remove MSBs on data
        inData1 &= 0x7f;
     568:	61 2f       	mov	r22, r17
     56a:	6f 77       	andi	r22, 0x7F	; 127
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:198
                // Don't care about running status, send the status byte.
                mTransport.write(status);
            }

            // Then send data
            mTransport.write(inData1);
     56c:	f7 01       	movw	r30, r14
     56e:	82 a5       	ldd	r24, Z+42	; 0x2a
     570:	93 a5       	ldd	r25, Z+43	; 0x2b
     572:	ce df       	rcall	.-100    	; 0x510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:199
            if (inType != ProgramChange && inType != AfterTouchChannel)
     574:	cf 7e       	andi	r28, 0xEF	; 239
     576:	c0 3c       	cpi	r28, 0xC0	; 192
     578:	61 f0       	breq	.+24     	; 0x592 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]+0x54>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:176
        {
            return; // Don't send anything
        }
        // Protection: remove MSBs on data
        inData1 &= 0x7f;
        inData2 &= 0x7f;
     57a:	6d 2f       	mov	r22, r29
     57c:	6f 77       	andi	r22, 0x7F	; 127
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:201

            // Then send data
            mTransport.write(inData1);
            if (inType != ProgramChange && inType != AfterTouchChannel)
            {
                mTransport.write(inData2);
     57e:	f7 01       	movw	r30, r14
     580:	82 a5       	ldd	r24, Z+42	; 0x2a
     582:	93 a5       	ldd	r25, Z+43	; 0x2b
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:212
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
    }
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:201

            // Then send data
            mTransport.write(inData1);
            if (inType != ProgramChange && inType != AfterTouchChannel)
            {
                mTransport.write(inData2);
     590:	bf cf       	rjmp	.-130    	; 0x510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:212
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
    }
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	08 95       	ret

000005a0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char)>:
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:160

 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::send(MidiType inType,
     5a0:	0f 93       	push	r16
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:165
                                               DataByte inData1,
                                               DataByte inData2,
                                               Channel inChannel)
{
    if (inType <= PitchBend)  // Channel messages
     5a2:	61 3e       	cpi	r22, 0xE1	; 225
     5a4:	18 f4       	brcc	.+6      	; 0x5ac <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char)+0xc>
     5a6:	cb df       	rcall	.-106    	; 0x53e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:212
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
    }
}
     5a8:	0f 91       	pop	r16
     5aa:	08 95       	ret
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:208

            mTransport.endTransmission();
            UpdateLastSentTime();
        }
    }
    else if (inType >= Clock && inType <= SystemReset)
     5ac:	68 3f       	cpi	r22, 0xF8	; 248
     5ae:	e0 f3       	brcs	.-8      	; 0x5a8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char)+0x8>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:210
    {
        sendRealTime(inType); // System Real-time and 1 byte.
     5b0:	8a 96       	adiw	r24, 0x2a	; 42
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:212
    }
}
     5b2:	0f 91       	pop	r16
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:210
            UpdateLastSentTime();
        }
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
     5b4:	b7 cf       	rjmp	.-146    	; 0x524 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]>

000005b6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE17sendControlChangeEhhh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:270
 \param inControlValue  The value for the specified controller (0 to 127).
 \param inChannel       The channel on which the message will be sent (1 to 16).
 @see MidiControlChangeNumber
 */
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::sendControlChange(DataByte inControlNumber,
     5b6:	0f 93       	push	r16
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4sendENS_8MidiTypeEhhh():
     5b8:	02 2f       	mov	r16, r18
     5ba:	24 2f       	mov	r18, r20
     5bc:	46 2f       	mov	r20, r22
     5be:	60 eb       	ldi	r22, 0xB0	; 176
     5c0:	be df       	rcall	.-132    	; 0x53e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char) [clone .part.7]>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE17sendControlChangeEhhh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:275
                                                            DataByte inControlValue,
                                                            Channel inChannel)
{
    send(ControlChange, inControlNumber, inControlValue, inChannel);
}
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE14launchCallbackEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1294

/*! @} */ // End of doc group MIDI Callbacks

// Private - launch callback function based on received type.
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::launchCallback()
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	ec 01       	movw	r28, r24
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1296
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);
     5cc:	e8 81       	ld	r30, Y
     5ce:	f9 81       	ldd	r31, Y+1	; 0x01
     5d0:	30 97       	sbiw	r30, 0x00	; 0
     5d2:	11 f0       	breq	.+4      	; 0x5d8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x12>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1296 (discriminator 1)
     5d4:	cb 96       	adiw	r24, 0x3b	; 59
     5d6:	09 95       	icall
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     5d8:	8c ad       	ldd	r24, Y+60	; 0x3c
     5da:	82 3f       	cpi	r24, 0xF2	; 242
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x1a>
     5de:	9e c0       	rjmp	.+316    	; 0x71c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x156>
     5e0:	90 f5       	brcc	.+100    	; 0x646 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x80>
     5e2:	80 3c       	cpi	r24, 0xC0	; 192
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x22>
     5e6:	86 c0       	rjmp	.+268    	; 0x6f4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x12e>
     5e8:	90 f4       	brcc	.+36     	; 0x60e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x48>
     5ea:	80 39       	cpi	r24, 0x90	; 144
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x2a>
     5ee:	54 c0       	rjmp	.+168    	; 0x698 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xd2>
     5f0:	30 f4       	brcc	.+12     	; 0x5fe <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x38>
     5f2:	80 38       	cpi	r24, 0x80	; 128
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
     5f6:	45 c0       	rjmp	.+138    	; 0x682 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xbc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     5fe:	80 3a       	cpi	r24, 0xA0	; 160
     600:	09 f4       	brne	.+2      	; 0x604 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x3e>
     602:	75 c0       	rjmp	.+234    	; 0x6ee <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x128>
     604:	80 3b       	cpi	r24, 0xB0	; 176
     606:	c1 f7       	brne	.-16     	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1314
        case Continue:              if (mContinueCallback != nullptr)              mContinueCallback();        break;
        case Stop:                  if (mStopCallback != nullptr)                  mStopCallback();            break;
        case ActiveSensing:         if (mActiveSensingCallback != nullptr)         mActiveSensingCallback();   break;

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     608:	ea 85       	ldd	r30, Y+10	; 0x0a
     60a:	fb 85       	ldd	r31, Y+11	; 0x0b
     60c:	3c c0       	rjmp	.+120    	; 0x686 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     60e:	80 3e       	cpi	r24, 0xE0	; 224
     610:	09 f4       	brne	.+2      	; 0x614 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x4e>
     612:	59 c0       	rjmp	.+178    	; 0x6c6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x100>
     614:	58 f4       	brcc	.+22     	; 0x62c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x66>
     616:	80 3d       	cpi	r24, 0xD0	; 208
     618:	79 f7       	brne	.-34     	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1317

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != nullptr)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;
     61a:	ee 85       	ldd	r30, Y+14	; 0x0e
     61c:	ff 85       	ldd	r31, Y+15	; 0x0f
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1319

        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
     61e:	30 97       	sbiw	r30, 0x00	; 0
     620:	59 f3       	breq	.-42     	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1319 (discriminator 1)
     622:	6d ad       	ldd	r22, Y+61	; 0x3d
     624:	8b ad       	ldd	r24, Y+59	; 0x3b
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1319 (discriminator 1)
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != nullptr)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;

        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
     62a:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     62c:	80 3f       	cpi	r24, 0xF0	; 240
     62e:	09 f4       	brne	.+2      	; 0x632 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x6c>
     630:	64 c0       	rjmp	.+200    	; 0x6fa <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x134>
     632:	81 3f       	cpi	r24, 0xF1	; 241
     634:	09 f7       	brne	.-62     	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1323

        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
     636:	ec 89       	ldd	r30, Y+20	; 0x14
     638:	fd 89       	ldd	r31, Y+21	; 0x15
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1325
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
     63a:	30 97       	sbiw	r30, 0x00	; 0
     63c:	e9 f2       	breq	.-70     	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1325 (discriminator 1)
     63e:	8d ad       	ldd	r24, Y+61	; 0x3d
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1325 (discriminator 1)
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
     644:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     646:	8a 3f       	cpi	r24, 0xFA	; 250
     648:	91 f1       	breq	.+100    	; 0x6ae <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xe8>
     64a:	80 f4       	brcc	.+32     	; 0x66c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xa6>
     64c:	86 3f       	cpi	r24, 0xF6	; 246
     64e:	09 f4       	brne	.+2      	; 0x652 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x8c>
     650:	77 c0       	rjmp	.+238    	; 0x740 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x17a>
     652:	28 f4       	brcc	.+10     	; 0x65e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x98>
     654:	83 3f       	cpi	r24, 0xF3	; 243
     656:	81 f6       	brne	.-96     	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1325
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
     658:	e8 8d       	ldd	r30, Y+24	; 0x18
     65a:	f9 8d       	ldd	r31, Y+25	; 0x19
     65c:	ee cf       	rjmp	.-36     	; 0x63a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x74>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     65e:	88 3f       	cpi	r24, 0xF8	; 248
     660:	f1 f0       	breq	.+60     	; 0x69e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xd8>
     662:	89 3f       	cpi	r24, 0xF9	; 249
     664:	49 f6       	brne	.-110    	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1308
        case NoteOn:                if (mNoteOnCallback != nullptr)                mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;

            // Real-time messages
        case Clock:                 if (mClockCallback != nullptr)                 mClockCallback();           break;
        case Start:                 if (mStartCallback != nullptr)                 mStartCallback();           break;
        case Tick:                  if (mTickCallback != nullptr)                  mTickCallback();            break;
     666:	e8 a1       	ldd	r30, Y+32	; 0x20
     668:	f9 a1       	ldd	r31, Y+33	; 0x21
     66a:	1b c0       	rjmp	.+54     	; 0x6a2 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1299
void MidiInterface<Transport, Settings, Platform>::launchCallback()
{
    if (mMessageCallback != 0) mMessageCallback(mMessage);

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     66c:	8c 3f       	cpi	r24, 0xFC	; 252
     66e:	29 f1       	breq	.+74     	; 0x6ba <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xf4>
     670:	08 f1       	brcs	.+66     	; 0x6b4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xee>
     672:	8e 3f       	cpi	r24, 0xFE	; 254
     674:	29 f1       	breq	.+74     	; 0x6c0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xfa>
     676:	8f 3f       	cpi	r24, 0xFF	; 255
     678:	09 f0       	breq	.+2      	; 0x67c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xb6>
     67a:	be cf       	rjmp	.-132    	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1328
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
        case TuneRequest:           if (mTuneRequestCallback != nullptr)           mTuneRequestCallback();    break;

        case SystemReset:           if (mSystemResetCallback != nullptr)           mSystemResetCallback();    break;
     67c:	e8 a5       	ldd	r30, Y+40	; 0x28
     67e:	f9 a5       	ldd	r31, Y+41	; 0x29
     680:	10 c0       	rjmp	.+32     	; 0x6a2 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1302

    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
    {
            // Notes
        case NoteOff:               if (mNoteOffCallback != nullptr)               mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);   break;
     682:	ec 81       	ldd	r30, Y+4	; 0x04
     684:	fd 81       	ldd	r31, Y+5	; 0x05
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1316
        case ActiveSensing:         if (mActiveSensingCallback != nullptr)         mActiveSensingCallback();   break;

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     686:	30 97       	sbiw	r30, 0x00	; 0
     688:	09 f4       	brne	.+2      	; 0x68c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xc6>
     68a:	b6 cf       	rjmp	.-148    	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1316 (discriminator 1)
     68c:	4e ad       	ldd	r20, Y+62	; 0x3e
     68e:	6d ad       	ldd	r22, Y+61	; 0x3d
     690:	8b ad       	ldd	r24, Y+59	; 0x3b
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1316 (discriminator 1)
        case ActiveSensing:         if (mActiveSensingCallback != nullptr)         mActiveSensingCallback();   break;

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     696:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1303
    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
    {
            // Notes
        case NoteOff:               if (mNoteOffCallback != nullptr)               mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);   break;
        case NoteOn:                if (mNoteOnCallback != nullptr)                mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     698:	ee 81       	ldd	r30, Y+6	; 0x06
     69a:	ff 81       	ldd	r31, Y+7	; 0x07
     69c:	f4 cf       	rjmp	.-24     	; 0x686 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1306

            // Real-time messages
        case Clock:                 if (mClockCallback != nullptr)                 mClockCallback();           break;
     69e:	ec 8d       	ldd	r30, Y+28	; 0x1c
     6a0:	fd 8d       	ldd	r31, Y+29	; 0x1d
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1328
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
        case TuneRequest:           if (mTuneRequestCallback != nullptr)           mTuneRequestCallback();    break;

        case SystemReset:           if (mSystemResetCallback != nullptr)           mSystemResetCallback();    break;
     6a2:	30 97       	sbiw	r30, 0x00	; 0
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xe2>
     6a6:	a8 cf       	rjmp	.-176    	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1328 (discriminator 1)
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
        case TuneRequest:           if (mTuneRequestCallback != nullptr)           mTuneRequestCallback();    break;

        case SystemReset:           if (mSystemResetCallback != nullptr)           mSystemResetCallback();    break;
     6ac:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1307
        case NoteOff:               if (mNoteOffCallback != nullptr)               mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);   break;
        case NoteOn:                if (mNoteOnCallback != nullptr)                mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;

            // Real-time messages
        case Clock:                 if (mClockCallback != nullptr)                 mClockCallback();           break;
        case Start:                 if (mStartCallback != nullptr)                 mStartCallback();           break;
     6ae:	ee 8d       	ldd	r30, Y+30	; 0x1e
     6b0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     6b2:	f7 cf       	rjmp	.-18     	; 0x6a2 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1309
        case Tick:                  if (mTickCallback != nullptr)                  mTickCallback();            break;
        case Continue:              if (mContinueCallback != nullptr)              mContinueCallback();        break;
     6b4:	ea a1       	ldd	r30, Y+34	; 0x22
     6b6:	fb a1       	ldd	r31, Y+35	; 0x23
     6b8:	f4 cf       	rjmp	.-24     	; 0x6a2 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1310
        case Stop:                  if (mStopCallback != nullptr)                  mStopCallback();            break;
     6ba:	ec a1       	ldd	r30, Y+36	; 0x24
     6bc:	fd a1       	ldd	r31, Y+37	; 0x25
     6be:	f1 cf       	rjmp	.-30     	; 0x6a2 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1311
        case ActiveSensing:         if (mActiveSensingCallback != nullptr)         mActiveSensingCallback();   break;
     6c0:	ee a1       	ldd	r30, Y+38	; 0x26
     6c2:	ff a1       	ldd	r31, Y+39	; 0x27
     6c4:	ee cf       	rjmp	.-36     	; 0x6a2 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1315

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
     6c6:	e8 89       	ldd	r30, Y+16	; 0x10
     6c8:	f9 89       	ldd	r31, Y+17	; 0x11
     6ca:	30 97       	sbiw	r30, 0x00	; 0
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x10a>
     6ce:	94 cf       	rjmp	.-216    	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1315 (discriminator 1)
     6d0:	6e ad       	ldd	r22, Y+62	; 0x3e
     6d2:	20 e8       	ldi	r18, 0x80	; 128
     6d4:	62 9f       	mul	r22, r18
     6d6:	b0 01       	movw	r22, r0
     6d8:	11 24       	eor	r1, r1
     6da:	60 78       	andi	r22, 0x80	; 128
     6dc:	7f 73       	andi	r23, 0x3F	; 63
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	8f 77       	andi	r24, 0x7F	; 127
     6e2:	68 2b       	or	r22, r24
     6e4:	70 52       	subi	r23, 0x20	; 32
     6e6:	8b ad       	ldd	r24, Y+59	; 0x3b
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1315 (discriminator 1)
        case Stop:                  if (mStopCallback != nullptr)                  mStopCallback();            break;
        case ActiveSensing:         if (mActiveSensingCallback != nullptr)         mActiveSensingCallback();   break;

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != nullptr)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
     6ec:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1316
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     6ee:	e8 85       	ldd	r30, Y+8	; 0x08
     6f0:	f9 85       	ldd	r31, Y+9	; 0x09
     6f2:	c9 cf       	rjmp	.-110    	; 0x686 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1319
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != nullptr)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;

        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
     6f4:	ec 85       	ldd	r30, Y+12	; 0x0c
     6f6:	fd 85       	ldd	r31, Y+13	; 0x0d
     6f8:	92 cf       	rjmp	.-220    	; 0x61e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x58>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1320
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;
     6fa:	ea 89       	ldd	r30, Y+18	; 0x12
     6fc:	fb 89       	ldd	r31, Y+19	; 0x13
     6fe:	30 97       	sbiw	r30, 0x00	; 0
     700:	09 f4       	brne	.+2      	; 0x704 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x13e>
     702:	7a cf       	rjmp	.-268    	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1320 (discriminator 1)
     704:	6d ad       	ldd	r22, Y+61	; 0x3d
     706:	7e ad       	ldd	r23, Y+62	; 0x3e
     708:	61 38       	cpi	r22, 0x81	; 129
     70a:	71 05       	cpc	r23, r1
     70c:	10 f0       	brcs	.+4      	; 0x712 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x14c>
     70e:	60 e8       	ldi	r22, 0x80	; 128
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	ce 01       	movw	r24, r28
     714:	cf 96       	adiw	r24, 0x3f	; 63
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1320 (discriminator 1)
        case PitchBend:             if (mPitchBendCallback != nullptr)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break;
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != nullptr)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != nullptr)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;

        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;
     71a:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1324

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
     71c:	ee 89       	ldd	r30, Y+22	; 0x16
     71e:	ff 89       	ldd	r31, Y+23	; 0x17
     720:	30 97       	sbiw	r30, 0x00	; 0
     722:	09 f4       	brne	.+2      	; 0x726 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x160>
     724:	69 cf       	rjmp	.-302    	; 0x5f8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1324 (discriminator 1)
     726:	8e ad       	ldd	r24, Y+62	; 0x3e
     728:	20 e8       	ldi	r18, 0x80	; 128
     72a:	82 9f       	mul	r24, r18
     72c:	c0 01       	movw	r24, r0
     72e:	11 24       	eor	r1, r1
     730:	80 78       	andi	r24, 0x80	; 128
     732:	9f 73       	andi	r25, 0x3F	; 63
     734:	2d ad       	ldd	r18, Y+61	; 0x3d
     736:	2f 77       	andi	r18, 0x7F	; 127
     738:	82 2b       	or	r24, r18
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1334 (discriminator 1)

        case InvalidType:
        default:
            break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
    }
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1324 (discriminator 1)
        case ProgramChange:         if (mProgramChangeCallback != nullptr)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
        case SystemExclusive:       if (mSystemExclusiveCallback != nullptr)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != nullptr)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != nullptr)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
     73e:	09 94       	ijmp
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1326
        case SongSelect:            if (mSongSelectCallback != nullptr)            mSongSelectCallback(mMessage.data1);    break;
        case TuneRequest:           if (mTuneRequestCallback != nullptr)           mTuneRequestCallback();    break;
     740:	ea 8d       	ldd	r30, Y+26	; 0x1a
     742:	fb 8d       	ldd	r31, Y+27	; 0x1b
     744:	ae cf       	rjmp	.-164    	; 0x6a2 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()+0xdc>

00000746 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10thruFilterEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1400
// - All system messages (System Exclusive, Common and Real Time) are passed
//   to output unless filter is set to Off.
// - Channel messages are passed to the output whether their channel
//   is matching the input channel and the filter setting
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::thruFilter(Channel inChannel)
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1403
{
    // If the feature is disabled, don't do anything.
    if (!mThruActivated || (mThruFilterMode == Thru::Off))
     754:	9a ad       	ldd	r25, Y+58	; 0x3a
     756:	29 2f       	mov	r18, r25
     758:	21 70       	andi	r18, 0x01	; 1
     75a:	90 ff       	sbrs	r25, 0
     75c:	1d c0       	rjmp	.+58     	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1403 (discriminator 1)
     75e:	89 2f       	mov	r24, r25
     760:	8e 7f       	andi	r24, 0xFE	; 254
     762:	d1 f0       	breq	.+52     	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     764:	36 2f       	mov	r19, r22
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1407
        return;

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
     766:	6c ad       	ldd	r22, Y+60	; 0x3c
     768:	80 e8       	ldi	r24, 0x80	; 128
     76a:	86 0f       	add	r24, r22
     76c:	81 36       	cpi	r24, 0x61	; 97
     76e:	f0 f4       	brcc	.+60     	; 0x7ac <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x66>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1409
    {
        const bool filter_condition = ((mMessage.channel == inChannel) ||
     770:	0b ad       	ldd	r16, Y+59	; 0x3b
     772:	03 17       	cp	r16, r19
     774:	19 f0       	breq	.+6      	; 0x77c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x36>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1409 (discriminator 2)
     776:	21 e0       	ldi	r18, 0x01	; 1
     778:	31 11       	cpse	r19, r1
     77a:	20 e0       	ldi	r18, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1413 (discriminator 6)
                                       (inChannel == MIDI_CHANNEL_OMNI));

        // Now let's pass it to the output
        switch (mThruFilterMode)
     77c:	96 95       	lsr	r25
     77e:	92 30       	cpi	r25, 0x02	; 2
     780:	49 f0       	breq	.+18     	; 0x794 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x4e>
     782:	93 30       	cpi	r25, 0x03	; 3
     784:	81 f0       	breq	.+32     	; 0x7a6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x60>
     786:	91 30       	cpi	r25, 0x01	; 1
     788:	39 f4       	brne	.+14     	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1435
                break;

            case Thru::DifferentChannel:
                if (!filter_condition)
                {
                    send(mMessage.type,
     78a:	2e ad       	ldd	r18, Y+62	; 0x3e
     78c:	4d ad       	ldd	r20, Y+61	; 0x3d
     78e:	ce 01       	movw	r24, r28
     790:	07 df       	rcall	.-498    	; 0x5a0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char)>
     792:	02 c0       	rjmp	.+4      	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1423
                     mMessage.data2,
                     mMessage.channel);
                break;

            case Thru::SameChannel:
                if (filter_condition)
     794:	21 11       	cpse	r18, r1
     796:	f9 cf       	rjmp	.-14     	; 0x78a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x44>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1483

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	08 95       	ret
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1433
                         mMessage.channel);
                }
                break;

            case Thru::DifferentChannel:
                if (!filter_condition)
     7a6:	21 11       	cpse	r18, r1
     7a8:	f7 cf       	rjmp	.-18     	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     7aa:	ef cf       	rjmp	.-34     	; 0x78a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x44>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1449
        }
    }
    else
    {
        // Send the message to the output
        switch (mMessage.type)
     7ac:	e0 e1       	ldi	r30, 0x10	; 16
     7ae:	e6 0f       	add	r30, r22
     7b0:	e0 31       	cpi	r30, 0x10	; 16
     7b2:	90 f7       	brcc	.-28     	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	e2 52       	subi	r30, 0x22	; 34
     7b8:	fc 4f       	sbci	r31, 0xFC	; 252
     7ba:	09 94       	ijmp
     7bc:	18 c0       	rjmp	.+48     	; 0x7ee <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xa8>
     7be:	56 c0       	rjmp	.+172    	; 0x86c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x126>
     7c0:	3e c0       	rjmp	.+124    	; 0x83e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xf8>
     7c2:	2d c0       	rjmp	.+90     	; 0x81e <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xd8>
     7c4:	e9 cf       	rjmp	.-46     	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     7c6:	e8 cf       	rjmp	.-48     	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     7c8:	09 c0       	rjmp	.+18     	; 0x7dc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     7ca:	e6 cf       	rjmp	.-52     	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     7cc:	07 c0       	rjmp	.+14     	; 0x7dc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     7ce:	e4 cf       	rjmp	.-56     	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     7d0:	05 c0       	rjmp	.+10     	; 0x7dc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     7d2:	04 c0       	rjmp	.+8      	; 0x7dc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     7d4:	03 c0       	rjmp	.+6      	; 0x7dc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     7d6:	e0 cf       	rjmp	.-64     	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x96>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1459
            case Stop:
            case Continue:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                sendRealTime(mMessage.type);
     7dc:	ce 01       	movw	r24, r28
     7de:	8a 96       	adiw	r24, 0x2a	; 42
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1483

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1459
            case Stop:
            case Continue:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                sendRealTime(mMessage.type);
     7ec:	9b ce       	rjmp	.-714    	; 0x524 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendRealTime(midi::MidiType) [clone .isra.6]>
_ZNK4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE13getSysExArrayEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1171
 @see getSysExArrayLength to get the array's length in bytes.
 */
template<class Transport, class Settings, class Platform>
inline const byte* MidiInterface<Transport, Settings, Platform>::getSysExArray() const
{
    return mMessage.sysexArray;
     7ee:	7e 01       	movw	r14, r28
     7f0:	8f e3       	ldi	r24, 0x3F	; 63
     7f2:	e8 0e       	add	r14, r24
     7f4:	f1 1c       	adc	r15, r1
     7f6:	0d ad       	ldd	r16, Y+61	; 0x3d
     7f8:	1e ad       	ldd	r17, Y+62	; 0x3e
     7fa:	01 38       	cpi	r16, 0x81	; 129
     7fc:	11 05       	cpc	r17, r1
     7fe:	10 f0       	brcs	.+4      	; 0x804 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xbe>
     800:	00 e8       	ldi	r16, 0x80	; 128
     802:	10 e0       	ldi	r17, 0x00	; 0
     804:	0e 0d       	add	r16, r14
     806:	1f 1d       	adc	r17, r15
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE9sendSysExEjPKhb():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:368
    if (mTransport.beginTransmission(MidiType::SystemExclusiveStart))
    {
        if (writeBeginEndBytes)
            mTransport.write(MidiType::SystemExclusiveStart);

        for (unsigned i = 0; i < inLength; ++i)
     808:	e0 16       	cp	r14, r16
     80a:	f1 06       	cpc	r15, r17
     80c:	09 f4       	brne	.+2      	; 0x810 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xca>
     80e:	c4 cf       	rjmp	.-120    	; 0x798 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0x52>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:369
            mTransport.write(inArray[i]);
     810:	f7 01       	movw	r30, r14
     812:	61 91       	ld	r22, Z+
     814:	7f 01       	movw	r14, r30
     816:	8a a5       	ldd	r24, Y+42	; 0x2a
     818:	9b a5       	ldd	r25, Y+43	; 0x2b
     81a:	7a de       	rcall	.-780    	; 0x510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
     81c:	f5 cf       	rjmp	.-22     	; 0x808 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xc2>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10thruFilterEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1468
                // Send SysEx (0xf0 and 0xf7 are included in the buffer)
                sendSysEx(getSysExArrayLength(), getSysExArray(), true);
                break;

            case SongSelect:
                sendSongSelect(mMessage.data1);
     81e:	1d ad       	ldd	r17, Y+61	; 0x3d
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10sendCommonENS_8MidiTypeEj():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:459
            return;
    }

    if (mTransport.beginTransmission(inType))
    {
            mTransport.write((byte)inType);
     820:	63 ef       	ldi	r22, 0xF3	; 243
     822:	8a a5       	ldd	r24, Y+42	; 0x2a
     824:	9b a5       	ldd	r25, Y+43	; 0x2b
     826:	74 de       	rcall	.-792    	; 0x510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:470
            case SongPosition:
                mTransport.write(inData1 & 0x7f);
                mTransport.write((inData1 >> 7) & 0x7f);
                break;
            case SongSelect:
                mTransport.write(inData1 & 0x7f);
     828:	61 2f       	mov	r22, r17
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:467
            case TimeCodeQuarterFrame:
                mTransport.write(inData1);
                break;
            case SongPosition:
                mTransport.write(inData1 & 0x7f);
                mTransport.write((inData1 >> 7) & 0x7f);
     82a:	6f 77       	andi	r22, 0x7F	; 127
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:463
    {
            mTransport.write((byte)inType);
            switch (inType)
            {
            case TimeCodeQuarterFrame:
                mTransport.write(inData1);
     82c:	8a a5       	ldd	r24, Y+42	; 0x2a
     82e:	9b a5       	ldd	r25, Y+43	; 0x2b
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10thruFilterEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1483

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10sendCommonENS_8MidiTypeEj():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:463
    {
            mTransport.write((byte)inType);
            switch (inType)
            {
            case TimeCodeQuarterFrame:
                mTransport.write(inData1);
     83c:	69 ce       	rjmp	.-814    	; 0x510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10thruFilterEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1472
            case SongSelect:
                sendSongSelect(mMessage.data1);
                break;

            case SongPosition:
                sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2 << 7));
     83e:	0e ad       	ldd	r16, Y+62	; 0x3e
     840:	f0 e8       	ldi	r31, 0x80	; 128
     842:	0f 9f       	mul	r16, r31
     844:	80 01       	movw	r16, r0
     846:	11 24       	eor	r1, r1
     848:	8d ad       	ldd	r24, Y+61	; 0x3d
     84a:	08 2b       	or	r16, r24
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10sendCommonENS_8MidiTypeEj():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:459
            return;
    }

    if (mTransport.beginTransmission(inType))
    {
            mTransport.write((byte)inType);
     84c:	62 ef       	ldi	r22, 0xF2	; 242
     84e:	8a a5       	ldd	r24, Y+42	; 0x2a
     850:	9b a5       	ldd	r25, Y+43	; 0x2b
     852:	5e de       	rcall	.-836    	; 0x510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:466
            {
            case TimeCodeQuarterFrame:
                mTransport.write(inData1);
                break;
            case SongPosition:
                mTransport.write(inData1 & 0x7f);
     854:	60 2f       	mov	r22, r16
     856:	6f 77       	andi	r22, 0x7F	; 127
     858:	8a a5       	ldd	r24, Y+42	; 0x2a
     85a:	9b a5       	ldd	r25, Y+43	; 0x2b
     85c:	59 de       	rcall	.-846    	; 0x510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:467
                mTransport.write((inData1 >> 7) & 0x7f);
     85e:	00 0f       	add	r16, r16
     860:	01 2f       	mov	r16, r17
     862:	00 1f       	adc	r16, r16
     864:	11 0b       	sbc	r17, r17
     866:	11 95       	neg	r17
     868:	60 2f       	mov	r22, r16
     86a:	df cf       	rjmp	.-66     	; 0x82a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xe4>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE24sendTimeCodeQuarterFrameEhh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:403
 */
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
                                                                            DataByte inValuesNibble)
{
    const byte data = byte((((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f)));
     86c:	6d ad       	ldd	r22, Y+61	; 0x3d
     86e:	80 e1       	ldi	r24, 0x10	; 16
     870:	68 9f       	mul	r22, r24
     872:	b0 01       	movw	r22, r0
     874:	11 24       	eor	r1, r1
     876:	60 77       	andi	r22, 0x70	; 112
     878:	1e ad       	ldd	r17, Y+62	; 0x3e
     87a:	1f 70       	andi	r17, 0x0F	; 15
     87c:	16 2b       	or	r17, r22
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10sendCommonENS_8MidiTypeEj():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:459
            return;
    }

    if (mTransport.beginTransmission(inType))
    {
            mTransport.write((byte)inType);
     87e:	61 ef       	ldi	r22, 0xF1	; 241
     880:	8a a5       	ldd	r24, Y+42	; 0x2a
     882:	9b a5       	ldd	r25, Y+43	; 0x2b
     884:	45 de       	rcall	.-886    	; 0x510 <midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>::write(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:463
            switch (inType)
            {
            case TimeCodeQuarterFrame:
                mTransport.write(inData1);
     886:	61 2f       	mov	r22, r17
     888:	d1 cf       	rjmp	.-94     	; 0x82c <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)+0xe6>

0000088a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE16isChannelMessageENS_8MidiTypeE():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1249
    return (inType == NoteOff           ||
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
            inType == PitchBend         ||
     88a:	98 2f       	mov	r25, r24
     88c:	9f 7e       	andi	r25, 0xEF	; 239
     88e:	28 2f       	mov	r18, r24
     890:	2f 7c       	andi	r18, 0xCF	; 207
     892:	20 38       	cpi	r18, 0x80	; 128
     894:	39 f0       	breq	.+14     	; 0x8a4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)+0x1a>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1248
{
    return (inType == NoteOff           ||
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
     896:	80 3e       	cpi	r24, 0xE0	; 224
     898:	29 f0       	breq	.+10     	; 0x8a4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)+0x1a>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1249
            inType == PitchBend         ||
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 3c       	cpi	r25, 0xC0	; 192
     89e:	19 f0       	breq	.+6      	; 0x8a6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)+0x1c>
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	08 95       	ret
     8a4:	81 e0       	ldi	r24, 0x01	; 1
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1251
            inType == ProgramChange);
}
     8a6:	08 95       	ret

000008a8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)>:
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE21getTypeFromStatusByteEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1220
 made public so you can handle MidiTypes more easily.
 */
template<class Transport, class Settings, class Platform>
MidiType MidiInterface<Transport, Settings, Platform>::getTypeFromStatusByte(byte inStatus)
{
    if ((inStatus  < 0x80) ||
     8a8:	87 ff       	sbrs	r24, 7
     8aa:	0a c0       	rjmp	.+20     	; 0x8c0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)+0x18>
     8ac:	9c e0       	ldi	r25, 0x0C	; 12
     8ae:	98 0f       	add	r25, r24
     8b0:	92 30       	cpi	r25, 0x02	; 2
     8b2:	30 f0       	brcs	.+12     	; 0x8c0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)+0x18>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1222
        (inStatus == Undefined_F4) ||
        (inStatus == Undefined_F5) ||
     8b4:	8d 3f       	cpi	r24, 0xFD	; 253
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)+0x18>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1226
        (inStatus == Undefined_FD))
        return InvalidType; // Data bytes and undefined.

    if (inStatus < 0xf0)
     8b8:	80 3f       	cpi	r24, 0xF0	; 240
     8ba:	18 f4       	brcc	.+6      	; 0x8c2 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)+0x1a>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1228
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);
     8bc:	80 7f       	andi	r24, 0xF0	; 240
     8be:	08 95       	ret
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1224
{
    if ((inStatus  < 0x80) ||
        (inStatus == Undefined_F4) ||
        (inStatus == Undefined_F5) ||
        (inStatus == Undefined_FD))
        return InvalidType; // Data bytes and undefined.
     8c0:	80 e0       	ldi	r24, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1231
    if (inStatus < 0xf0)
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);

    return MidiType(inStatus);
}
     8c2:	08 95       	ret

000008c4 <loop>:
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:88
  keyboardStatusCC = 8 + (12 * adress);
  keyboardCodeCC = 9 + (12 * adress);
}

int result = 0;
void loop() {
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:91


  if (digitalRead(PIN_PD4)) {
     8ce:	84 e0       	ldi	r24, 0x04	; 4
     8d0:	f1 d8       	rcall	.-3614   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     8d2:	89 2b       	or	r24, r25
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <loop+0x14>
     8d6:	f5 c0       	rjmp	.+490    	; 0xac2 <loop+0x1fe>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     8d8:	83 eb       	ldi	r24, 0xB3	; 179
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	fe dc       	rcall	.-1540   	; 0x2da <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     8de:	40 91 ba 00 	lds	r20, 0x00BA	; 0x8000ba <en0+0x7>
     8e2:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <en0+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     8e6:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <en0+0x7>
     8ea:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <en0+0x8>
     8ee:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <en0+0x9>
     8f2:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <en0+0xa>
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:92
    result = en0.readAndReset();
     8f6:	84 2f       	mov	r24, r20
     8f8:	92 2f       	mov	r25, r18
     8fa:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
     8fe:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:93
    if (result != 0) { MIDI.sendControlChange(enc0CC, result + 64, channel); }
     902:	89 2b       	or	r24, r25
     904:	41 f0       	breq	.+16     	; 0x916 <loop+0x52>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:93 (discriminator 1)
     906:	40 5c       	subi	r20, 0xC0	; 192
     908:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     90c:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <enc0CC>
     910:	8e eb       	ldi	r24, 0xBE	; 190
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	50 de       	rcall	.-864    	; 0x5b6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     916:	88 ea       	ldi	r24, 0xA8	; 168
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	df dc       	rcall	.-1602   	; 0x2da <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     91c:	40 91 af 00 	lds	r20, 0x00AF	; 0x8000af <en1+0x7>
     920:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <en1+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     924:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <en1+0x7>
     928:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <en1+0x8>
     92c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <en1+0x9>
     930:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <en1+0xa>
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:94
    result = en1.readAndReset();
     934:	84 2f       	mov	r24, r20
     936:	92 2f       	mov	r25, r18
     938:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
     93c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:95
    if (result != 0) { MIDI.sendControlChange(enc1CC, result + 64, channel); }
     940:	89 2b       	or	r24, r25
     942:	41 f0       	breq	.+16     	; 0x954 <loop+0x90>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:95 (discriminator 1)
     944:	40 5c       	subi	r20, 0xC0	; 192
     946:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     94a:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <enc1CC>
     94e:	8e eb       	ldi	r24, 0xBE	; 190
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	31 de       	rcall	.-926    	; 0x5b6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     954:	8d e9       	ldi	r24, 0x9D	; 157
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	c0 dc       	rcall	.-1664   	; 0x2da <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     95a:	40 91 a4 00 	lds	r20, 0x00A4	; 0x8000a4 <en2+0x7>
     95e:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <en2+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     962:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <en2+0x7>
     966:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <en2+0x8>
     96a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <en2+0x9>
     96e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <en2+0xa>
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:96
    result = en2.readAndReset();
     972:	84 2f       	mov	r24, r20
     974:	92 2f       	mov	r25, r18
     976:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
     97a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:97
    if (result != 0) { MIDI.sendControlChange(enc2CC, result + 64, channel); }
     97e:	89 2b       	or	r24, r25
     980:	41 f0       	breq	.+16     	; 0x992 <loop+0xce>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:97 (discriminator 1)
     982:	40 5c       	subi	r20, 0xC0	; 192
     984:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     988:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <enc2CC>
     98c:	8e eb       	ldi	r24, 0xBE	; 190
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	12 de       	rcall	.-988    	; 0x5b6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     992:	82 e9       	ldi	r24, 0x92	; 146
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	a1 dc       	rcall	.-1726   	; 0x2da <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     998:	40 91 99 00 	lds	r20, 0x0099	; 0x800099 <en3+0x7>
     99c:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <en3+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     9a0:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <en3+0x7>
     9a4:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <en3+0x8>
     9a8:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <en3+0x9>
     9ac:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <en3+0xa>
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:98
    result = en3.readAndReset();
     9b0:	84 2f       	mov	r24, r20
     9b2:	92 2f       	mov	r25, r18
     9b4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
     9b8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:99
    if (result != 0) { MIDI.sendControlChange(enc3CC, result + 64, channel); }
     9bc:	40 5c       	subi	r20, 0xC0	; 192
     9be:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9c2:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <enc3CC>
     9c6:	89 2b       	or	r24, r25
     9c8:	09 f0       	breq	.+2      	; 0x9cc <loop+0x108>
     9ca:	f5 c0       	rjmp	.+490    	; 0xbb6 <loop+0x2f2>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:112
    result = en3.readAndReset();
    if (result != 0) { MIDI.sendControlChange(enc7CC, result + 64, channel); }
  }


  if (keyboard.available()) {
     9cc:	80 e9       	ldi	r24, 0x90	; 144
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	65 d6       	rcall	.+3274   	; 0x169c <PS2KeyAdvanced::available()>
     9d2:	88 23       	and	r24, r24
     9d4:	c1 f0       	breq	.+48     	; 0xa06 <loop+0x142>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:113
    code = keyboard.read();
     9d6:	80 e9       	ldi	r24, 0x90	; 144
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	8b d6       	rcall	.+3350   	; 0x16f2 <PS2KeyAdvanced::read()>
     9dc:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <code+0x1>
     9e0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <code>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:114
    if (code > 0) {
     9e4:	00 97       	sbiw	r24, 0x00	; 0
     9e6:	79 f0       	breq	.+30     	; 0xa06 <loop+0x142>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:115
      MIDI.sendControlChange(keyboardStatusCC, code >> 8, 1);
     9e8:	21 e0       	ldi	r18, 0x01	; 1
     9ea:	49 2f       	mov	r20, r25
     9ec:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <keyboardStatusCC>
     9f0:	8e eb       	ldi	r24, 0xBE	; 190
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	e0 dd       	rcall	.-1088   	; 0x5b6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:116
      MIDI.sendControlChange(keyboardCodeCC, code & 0xFF, 1);
     9f6:	21 e0       	ldi	r18, 0x01	; 1
     9f8:	40 91 90 00 	lds	r20, 0x0090	; 0x800090 <code>
     9fc:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <keyboardCodeCC>
     a00:	8e eb       	ldi	r24, 0xBE	; 190
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	d8 dd       	rcall	.-1104   	; 0x5b6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4readEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:706
 @see see setInputChannel()
 */
template<class Transport, class Settings, class Platform>
inline bool MidiInterface<Transport, Settings, Platform>::read()
{
    return read(mInputChannel);
     a06:	10 91 ea 00 	lds	r17, 0x00EA	; 0x8000ea <MIDI+0x2c>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4readEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:739
        if (mErrorCallback)
            mErrorCallback(mLastError);
    }
    #endif

    if (inChannel >= MIDI_CHANNEL_OFF)
     a0a:	11 31       	cpi	r17, 0x11	; 17
     a0c:	08 f0       	brcs	.+2      	; 0xa10 <loop+0x14c>
     a0e:	f4 c0       	rjmp	.+488    	; 0xbf8 <loop+0x334>
_ZN4midi10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEE9availableEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/serialMIDI.h:87
		return mSerial.read();
	};

	unsigned available()
	{
        return mSerial.available();
     a10:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <MIDI+0x2a>
     a14:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <MIDI+0x2b>
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	dc 01       	movw	r26, r24
     a1e:	ed 91       	ld	r30, X+
     a20:	fc 91       	ld	r31, X
     a22:	00 84       	ldd	r0, Z+8	; 0x08
     a24:	f1 85       	ldd	r31, Z+9	; 0x09
     a26:	e0 2d       	mov	r30, r0
     a28:	09 95       	icall
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:785

// Private method: MIDI parser
template<class Transport, class Settings, class Platform>
bool MidiInterface<Transport, Settings, Platform>::parse()
{
    if (mTransport.available() == 0)
     a2a:	89 2b       	or	r24, r25
     a2c:	09 f4       	brne	.+2      	; 0xa30 <loop+0x16c>
     a2e:	e4 c0       	rjmp	.+456    	; 0xbf8 <loop+0x334>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:789
        return false; // No data available.

    // clear the ErrorParse bit
    mLastError &= ~(1UL << ErrorParse);
     a30:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <MIDI+0xcf>
     a34:	8e 7f       	andi	r24, 0xFE	; 254
     a36:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <MIDI+0xcf>
_ZN4midi10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEE4readEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/serialMIDI.h:82
	{
	};

	byte read()
	{
		return mSerial.read();
     a3a:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <MIDI+0x2a>
     a3e:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <MIDI+0x2b>
     a42:	80 81       	ld	r24, Z
     a44:	91 81       	ldd	r25, Z+1	; 0x01
     a46:	dc 01       	movw	r26, r24
     a48:	ed 91       	ld	r30, X+
     a4a:	fc 91       	ld	r31, X
     a4c:	02 84       	ldd	r0, Z+10	; 0x0a
     a4e:	f3 85       	ldd	r31, Z+11	; 0x0b
     a50:	e0 2d       	mov	r30, r0
     a52:	09 95       	icall
     a54:	c8 2f       	mov	r28, r24
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:803
    // When the message is done, store it.

    const byte extracted = mTransport.read();

    // Ignore Undefined
    if (extracted == Undefined_FD)
     a56:	8d 3f       	cpi	r24, 0xFD	; 253
     a58:	09 f4       	brne	.+2      	; 0xa5c <loop+0x198>
     a5a:	ce c0       	rjmp	.+412    	; 0xbf8 <loop+0x334>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:806
        return (Settings::Use1ByteParsing) ? false : parse();

    if (mPendingMessageIndex == 0)
     a5c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <MIDI+0x34>
     a60:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <MIDI+0x35>
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	09 f0       	breq	.+2      	; 0xa6a <loop+0x1a6>
     a68:	57 c1       	rjmp	.+686    	; 0xd18 <loop+0x454>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:809
    {
        // Start a new pending message
        mPendingMessage[0] = extracted;
     a6a:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <MIDI+0x2f>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:812

        // Check for running status first
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
     a6e:	d0 91 eb 00 	lds	r29, 0x00EB	; 0x8000eb <MIDI+0x2d>
     a72:	8d 2f       	mov	r24, r29
     a74:	19 df       	rcall	.-462    	; 0x8a8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)>
     a76:	09 df       	rcall	.-494    	; 0x88a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)>
     a78:	88 23       	and	r24, r24
     a7a:	61 f0       	breq	.+24     	; 0xa94 <loop+0x1d0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:818
        {
            // Only these types allow Running Status

            // If the status byte is not received, prepend it
            // to the pending message
            if (extracted < 0x80)
     a7c:	c7 fd       	sbrc	r28, 7
     a7e:	0a c0       	rjmp	.+20     	; 0xa94 <loop+0x1d0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:820
            {
                mPendingMessage[0]   = mRunningStatus_RX;
     a80:	d0 93 ed 00 	sts	0x00ED, r29	; 0x8000ed <MIDI+0x2f>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:821
                mPendingMessage[1]   = extracted;
     a84:	c0 93 ee 00 	sts	0x00EE, r28	; 0x8000ee <MIDI+0x30>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:822
                mPendingMessageIndex = 1;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <MIDI+0x35>
     a90:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:829
            // Else: well, we received another status byte,
            // so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        const MidiType pendingType = getTypeFromStatusByte(mPendingMessage[0]);
     a94:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <MIDI+0x2f>
     a98:	8c 2f       	mov	r24, r28
     a9a:	06 df       	rcall	.-500    	; 0x8a8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:831

        switch (pendingType)
     a9c:	81 3f       	cpi	r24, 0xF1	; 241
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <loop+0x1de>
     aa0:	04 c1       	rjmp	.+520    	; 0xcaa <loop+0x3e6>
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <loop+0x1e2>
     aa4:	bf c0       	rjmp	.+382    	; 0xc24 <loop+0x360>
     aa6:	80 3b       	cpi	r24, 0xB0	; 176
     aa8:	49 f0       	breq	.+18     	; 0xabc <loop+0x1f8>
     aaa:	08 f0       	brcs	.+2      	; 0xaae <loop+0x1ea>
     aac:	88 c0       	rjmp	.+272    	; 0xbbe <loop+0x2fa>
     aae:	80 39       	cpi	r24, 0x90	; 144
     ab0:	29 f0       	breq	.+10     	; 0xabc <loop+0x1f8>
     ab2:	80 3a       	cpi	r24, 0xA0	; 160
     ab4:	19 f0       	breq	.+6      	; 0xabc <loop+0x1f8>
     ab6:	80 38       	cpi	r24, 0x80	; 128
     ab8:	09 f0       	breq	.+2      	; 0xabc <loop+0x1f8>
     aba:	88 c0       	rjmp	.+272    	; 0xbcc <loop+0x308>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:872
            case NoteOff:
            case ControlChange:
            case PitchBend:
            case AfterTouchPoly:
            case SongPosition:
                mPendingMessageExpectedLength = 3;
     abc:	23 e0       	ldi	r18, 0x03	; 3
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	f6 c0       	rjmp	.+492    	; 0xcae <loop+0x3ea>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     ac2:	83 eb       	ldi	r24, 0xB3	; 179
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	09 dc       	rcall	.-2030   	; 0x2da <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     ac8:	40 91 ba 00 	lds	r20, 0x00BA	; 0x8000ba <en0+0x7>
     acc:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <en0+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     ad0:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <en0+0x7>
     ad4:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <en0+0x8>
     ad8:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <en0+0x9>
     adc:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <en0+0xa>
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:101
    result = en2.readAndReset();
    if (result != 0) { MIDI.sendControlChange(enc2CC, result + 64, channel); }
    result = en3.readAndReset();
    if (result != 0) { MIDI.sendControlChange(enc3CC, result + 64, channel); }
  } else {
    result = en0.readAndReset();
     ae0:	84 2f       	mov	r24, r20
     ae2:	92 2f       	mov	r25, r18
     ae4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
     ae8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:102
    if (result != 0) { MIDI.sendControlChange(enc4CC, result + 64, channel); }
     aec:	89 2b       	or	r24, r25
     aee:	41 f0       	breq	.+16     	; 0xb00 <loop+0x23c>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:102 (discriminator 1)
     af0:	40 5c       	subi	r20, 0xC0	; 192
     af2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     af6:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <enc4CC>
     afa:	8e eb       	ldi	r24, 0xBE	; 190
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	5b dd       	rcall	.-1354   	; 0x5b6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     b00:	88 ea       	ldi	r24, 0xA8	; 168
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	ea db       	rcall	.-2092   	; 0x2da <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     b06:	40 91 af 00 	lds	r20, 0x00AF	; 0x8000af <en1+0x7>
     b0a:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <en1+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     b0e:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <en1+0x7>
     b12:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <en1+0x8>
     b16:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <en1+0x9>
     b1a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <en1+0xa>
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:103
    result = en1.readAndReset();
     b1e:	84 2f       	mov	r24, r20
     b20:	92 2f       	mov	r25, r18
     b22:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
     b26:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:104
    if (result != 0) { MIDI.sendControlChange(enc5CC, result + 64, channel); }
     b2a:	89 2b       	or	r24, r25
     b2c:	41 f0       	breq	.+16     	; 0xb3e <loop+0x27a>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:104 (discriminator 1)
     b2e:	40 5c       	subi	r20, 0xC0	; 192
     b30:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b34:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <enc5CC>
     b38:	8e eb       	ldi	r24, 0xBE	; 190
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	3c dd       	rcall	.-1416   	; 0x5b6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     b3e:	8d e9       	ldi	r24, 0x9D	; 157
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	cb db       	rcall	.-2154   	; 0x2da <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     b44:	40 91 a4 00 	lds	r20, 0x00A4	; 0x8000a4 <en2+0x7>
     b48:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <en2+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     b4c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <en2+0x7>
     b50:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <en2+0x8>
     b54:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <en2+0x9>
     b58:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <en2+0xa>
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:105
    result = en2.readAndReset();
     b5c:	84 2f       	mov	r24, r20
     b5e:	92 2f       	mov	r25, r18
     b60:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
     b64:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:106
    if (result != 0) { MIDI.sendControlChange(enc6CC, result + 64, channel); }
     b68:	89 2b       	or	r24, r25
     b6a:	41 f0       	breq	.+16     	; 0xb7c <loop+0x2b8>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:106 (discriminator 1)
     b6c:	40 5c       	subi	r20, 0xC0	; 192
     b6e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b72:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <enc6CC>
     b76:	8e eb       	ldi	r24, 0xBE	; 190
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	1d dd       	rcall	.-1478   	; 0x5b6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
_ZN7Encoder12readAndResetEv():
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:145
	inline int32_t read() {
		update(&encoder);
		return encoder.position;
	}
	inline int32_t readAndReset() {
		update(&encoder);
     b7c:	82 e9       	ldi	r24, 0x92	; 146
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	ac db       	rcall	.-2216   	; 0x2da <Encoder::update(Encoder_internal_state_t*)>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:146
		int32_t ret = encoder.position;
     b82:	40 91 99 00 	lds	r20, 0x0099	; 0x800099 <en3+0x7>
     b86:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <en3+0x8>
/Users/moritz/Documents/Arduino/libraries/Encoder/Encoder.h:147
		encoder.position = 0;
     b8a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <en3+0x7>
     b8e:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <en3+0x8>
     b92:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <en3+0x9>
     b96:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <en3+0xa>
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:107
    result = en3.readAndReset();
     b9a:	84 2f       	mov	r24, r20
     b9c:	92 2f       	mov	r25, r18
     b9e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
     ba2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:108
    if (result != 0) { MIDI.sendControlChange(enc7CC, result + 64, channel); }
     ba6:	89 2b       	or	r24, r25
     ba8:	09 f4       	brne	.+2      	; 0xbac <loop+0x2e8>
     baa:	10 cf       	rjmp	.-480    	; 0x9cc <loop+0x108>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:108 (discriminator 1)
     bac:	40 5c       	subi	r20, 0xC0	; 192
     bae:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bb2:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <enc7CC>
     bb6:	8e eb       	ldi	r24, 0xBE	; 190
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	fd dc       	rcall	.-1542   	; 0x5b6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::sendControlChange(unsigned char, unsigned char, unsigned char)>
     bbc:	07 cf       	rjmp	.-498    	; 0x9cc <loop+0x108>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:831
            // It will be updated upon completion of this message.
        }

        const MidiType pendingType = getTypeFromStatusByte(mPendingMessage[0]);

        switch (pendingType)
     bbe:	80 3d       	cpi	r24, 0xD0	; 208
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <loop+0x300>
     bc2:	73 c0       	rjmp	.+230    	; 0xcaa <loop+0x3e6>
     bc4:	f8 f4       	brcc	.+62     	; 0xc04 <loop+0x340>
     bc6:	80 3c       	cpi	r24, 0xC0	; 192
     bc8:	09 f4       	brne	.+2      	; 0xbcc <loop+0x308>
     bca:	6f c0       	rjmp	.+222    	; 0xcaa <loop+0x3e6>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:887
                break;

            case InvalidType:
            default:
                // This is obviously wrong. Let's get the hell out'a here.
                mLastError |= 1UL << ErrorParse; // set the ErrorParse bit
     bcc:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <MIDI+0xcf>
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <MIDI+0xcf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:888
                if (mErrorCallback)
     bd6:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <MIDI+0x2>
     bda:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <MIDI+0x3>
     bde:	30 97       	sbiw	r30, 0x00	; 0
     be0:	09 f0       	breq	.+2      	; 0xbe4 <loop+0x320>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:889
                    mErrorCallback(mLastError); // LCOV_EXCL_LINE
     be2:	09 95       	icall
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10resetInputEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1122

// Private method: reset input attributes
template<class Transport, class Settings, class Platform>
inline void MidiInterface<Transport, Settings, Platform>::resetInput()
{
    mPendingMessageIndex = 0;
     be4:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <MIDI+0x35>
     be8:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1123
    mPendingMessageExpectedLength = 0;
     bec:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x33>
     bf0:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1124
    mRunningStatus_RX = InvalidType;
     bf4:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <MIDI+0x2d>
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:122
    }
  }

 MIDI.read();
    
}
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	08 95       	ret
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:831
            // It will be updated upon completion of this message.
        }

        const MidiType pendingType = getTypeFromStatusByte(mPendingMessage[0]);

        switch (pendingType)
     c04:	80 3e       	cpi	r24, 0xE0	; 224
     c06:	09 f4       	brne	.+2      	; 0xc0a <loop+0x346>
     c08:	59 cf       	rjmp	.-334    	; 0xabc <loop+0x1f8>
     c0a:	80 3f       	cpi	r24, 0xF0	; 240
     c0c:	f9 f6       	brne	.-66     	; 0xbcc <loop+0x308>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:879

            case SystemExclusiveStart:
            case SystemExclusiveEnd:
                // The message can be any length
                // between 3 and MidiMessage::sSysExMaxSize bytes
                mPendingMessageExpectedLength = MidiMessage::sSysExMaxSize;
     c0e:	20 e8       	ldi	r18, 0x80	; 128
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <MIDI+0x33>
     c16:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:880
                mRunningStatus_RX = InvalidType;
     c1a:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <MIDI+0x2d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:881
                mMessage.sysexArray[0] = pendingType;
     c1e:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <MIDI+0x3f>
     c22:	49 c0       	rjmp	.+146    	; 0xcb6 <loop+0x3f2>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:831
            // It will be updated upon completion of this message.
        }

        const MidiType pendingType = getTypeFromStatusByte(mPendingMessage[0]);

        switch (pendingType)
     c24:	87 3f       	cpi	r24, 0xF7	; 247
     c26:	99 f3       	breq	.-26     	; 0xc0e <loop+0x34a>
     c28:	d8 f5       	brcc	.+118    	; 0xca0 <loop+0x3dc>
     c2a:	83 3f       	cpi	r24, 0xF3	; 243
     c2c:	f1 f1       	breq	.+124    	; 0xcaa <loop+0x3e6>
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <loop+0x36e>
     c30:	45 cf       	rjmp	.-374    	; 0xabc <loop+0x1f8>
     c32:	86 3f       	cpi	r24, 0xF6	; 246
     c34:	59 f6       	brne	.-106    	; 0xbcc <loop+0x308>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:843
            case Tick:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                // Handle the message type directly here.
                mMessage.type    = pendingType;
     c36:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:844
                mMessage.channel = 0;
     c3a:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:845
                mMessage.data1   = 0;
     c3e:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:846
                mMessage.data2   = 0;
     c42:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:847
                mMessage.valid   = true;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <MIDI+0xbf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:851

                // Do not reset all input attributes, Running Status must remain unchanged.
                // We still need to reset these
                mPendingMessageIndex = 0;
     c4c:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <MIDI+0x35>
     c50:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:852
                mPendingMessageExpectedLength = 0;
     c54:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x33>
     c58:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <MIDI+0x32>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE33handleNullVelocityNoteOnAsNoteOffEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1083
// Private method, see midi_Settings.h for documentation
template<class Transport, class Settings, class Platform>
inline void MidiInterface<Transport, Settings, Platform>::handleNullVelocityNoteOnAsNoteOff()
{
    if (Settings::HandleNullVelocityNoteOnAsNoteOff &&
        getType() == NoteOn && getData2() == 0)
     c5c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <MIDI+0x3c>
     c60:	80 39       	cpi	r24, 0x90	; 144
     c62:	39 f4       	brne	.+14     	; 0xc72 <loop+0x3ae>
     c64:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <MIDI+0x3e>
     c68:	81 11       	cpse	r24, r1
     c6a:	03 c0       	rjmp	.+6      	; 0xc72 <loop+0x3ae>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1085
    {
        mMessage.type = NoteOff;
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <MIDI+0x3c>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE11inputFilterEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1097
{
    // This method handles recognition of channel
    // (to know if the message is destinated to the Arduino)

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
     c72:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <MIDI+0x3c>
     c76:	80 58       	subi	r24, 0x80	; 128
     c78:	81 36       	cpi	r24, 0x61	; 97
     c7a:	30 f4       	brcc	.+12     	; 0xc88 <loop+0x3c4>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1100
    {
        // Then we need to know if we listen to it
        if ((mMessage.channel == inChannel) ||
     c7c:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <MIDI+0x3b>
     c80:	18 17       	cp	r17, r24
     c82:	11 f0       	breq	.+4      	; 0xc88 <loop+0x3c4>
     c84:	11 11       	cpse	r17, r1
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <loop+0x3ca>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4readEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:772

    handleNullVelocityNoteOnAsNoteOff();

    const bool channelMatch = inputFilter(inChannel);
    if (channelMatch)
        launchCallback();
     c88:	8e eb       	ldi	r24, 0xBE	; 190
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	9c dc       	rcall	.-1736   	; 0x5c6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:774

    thruFilter(inChannel);
     c8e:	61 2f       	mov	r22, r17
     c90:	8e eb       	ldi	r24, 0xBE	; 190
     c92:	90 e0       	ldi	r25, 0x00	; 0
loop():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:122
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE4readEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:774
     c9e:	53 cd       	rjmp	.-1370   	; 0x746 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:831
            // It will be updated upon completion of this message.
        }

        const MidiType pendingType = getTypeFromStatusByte(mPendingMessage[0]);

        switch (pendingType)
     ca0:	8d 3f       	cpi	r24, 0xFD	; 253
     ca2:	48 f2       	brcs	.-110    	; 0xc36 <loop+0x372>
     ca4:	8e 3f       	cpi	r24, 0xFE	; 254
     ca6:	38 f6       	brcc	.-114    	; 0xc36 <loop+0x372>
     ca8:	91 cf       	rjmp	.-222    	; 0xbcc <loop+0x308>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:862
            // 2 bytes messages
            case ProgramChange:
            case AfterTouchChannel:
            case TimeCodeQuarterFrame:
            case SongSelect:
                mPendingMessageExpectedLength = 2;
     caa:	22 e0       	ldi	r18, 0x02	; 2
     cac:	30 e0       	ldi	r19, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:872
            case NoteOff:
            case ControlChange:
            case PitchBend:
            case AfterTouchPoly:
            case SongPosition:
                mPendingMessageExpectedLength = 3;
     cae:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <MIDI+0x33>
     cb2:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:896
                resetInput();
                return false;
                break;
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
     cb6:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <MIDI+0x34>
     cba:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <MIDI+0x35>
     cbe:	40 91 f0 00 	lds	r20, 0x00F0	; 0x8000f0 <MIDI+0x32>
     cc2:	50 91 f1 00 	lds	r21, 0x00F1	; 0x8000f1 <MIDI+0x33>
     cc6:	41 50       	subi	r20, 0x01	; 1
     cc8:	51 09       	sbc	r21, r1
     cca:	24 17       	cp	r18, r20
     ccc:	35 07       	cpc	r19, r21
     cce:	e8 f0       	brcs	.+58     	; 0xd0a <loop+0x446>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:899
        {
            // Reception complete
            mMessage.type    = pendingType;
     cd0:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <MIDI+0x3c>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE24getChannelFromStatusByteEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1238
/*! \brief Returns channel in the range 1-16
 */
template<class Transport, class Settings, class Platform>
inline Channel MidiInterface<Transport, Settings, Platform>::getChannelFromStatusByte(byte inStatus)
{
    return Channel((inStatus & 0x0f) + 1);
     cd4:	cf 70       	andi	r28, 0x0F	; 15
     cd6:	cf 5f       	subi	r28, 0xFF	; 255
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:900

        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
        {
            // Reception complete
            mMessage.type    = pendingType;
            mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
     cd8:	c0 93 f9 00 	sts	0x00F9, r28	; 0x8000f9 <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:901
            mMessage.data1   = mPendingMessage[1];
     cdc:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <MIDI+0x30>
     ce0:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:902
            mMessage.data2   = 0; // Completed new message has 1 data byte
     ce4:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:903
            mMessage.length  = 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <MIDI+0xc1>
     cf0:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <MIDI+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:905

            mPendingMessageIndex = 0;
     cf4:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <MIDI+0x35>
     cf8:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:906
            mPendingMessageExpectedLength = 0;
     cfc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x33>
     d00:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:948
                    mMessage.type    = (MidiType)extracted;
                    mMessage.data1   = 0;
                    mMessage.data2   = 0;
                    mMessage.channel = 0;
                    mMessage.length  = 1;
                    mMessage.valid   = true;
     d04:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <MIDI+0xbf>
     d08:	a9 cf       	rjmp	.-174    	; 0xc5c <loop+0x398>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:914
            return true;
        }
        else
        {
            // Waiting for more data
            mPendingMessageIndex++;
     d0a:	2f 5f       	subi	r18, 0xFF	; 255
     d0c:	3f 4f       	sbci	r19, 0xFF	; 255
     d0e:	30 93 f3 00 	sts	0x00F3, r19	; 0x8000f3 <MIDI+0x35>
     d12:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <MIDI+0x34>
     d16:	70 cf       	rjmp	.-288    	; 0xbf8 <loop+0x334>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:922
        return (Settings::Use1ByteParsing) ? false : parse();
    }
    else
    {
        // First, test if this is a status byte
        if (extracted >= 0x80)
     d18:	c7 ff       	sbrs	r28, 7
     d1a:	0c c0       	rjmp	.+24     	; 0xd34 <loop+0x470>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:926
        {
            // Reception of status bytes in the middle of an uncompleted message
            // are allowed only for interleaved Real Time message or EOX
            switch (extracted)
     d1c:	cd 3f       	cpi	r28, 0xFD	; 253
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <loop+0x45e>
     d20:	4c c0       	rjmp	.+152    	; 0xdba <loop+0x4f6>
     d22:	c8 3f       	cpi	r28, 0xF8	; 248
     d24:	08 f0       	brcs	.+2      	; 0xd28 <loop+0x464>
     d26:	4c c0       	rjmp	.+152    	; 0xdc0 <loop+0x4fc>
     d28:	c0 3f       	cpi	r28, 0xF0	; 240
     d2a:	09 f4       	brne	.+2      	; 0xd2e <loop+0x46a>
     d2c:	58 c0       	rjmp	.+176    	; 0xdde <loop+0x51a>
     d2e:	c7 3f       	cpi	r28, 0xF7	; 247
     d30:	09 f4       	brne	.+2      	; 0xd34 <loop+0x470>
     d32:	55 c0       	rjmp	.+170    	; 0xdde <loop+0x51a>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:990
                    break; // LCOV_EXCL_LINE - Coverage blind spot
            }
        }

        // Add extracted data byte to pending message
        if ((mPendingMessage[0] == SystemExclusiveStart)
     d34:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <MIDI+0x2f>
     d38:	fc 01       	movw	r30, r24
     d3a:	e2 54       	subi	r30, 0x42	; 66
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	20 3f       	cpi	r18, 0xF0	; 240
     d40:	19 f0       	breq	.+6      	; 0xd48 <loop+0x484>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:991
        ||  (mPendingMessage[0] == SystemExclusiveEnd))
     d42:	27 3f       	cpi	r18, 0xF7	; 247
     d44:	09 f0       	breq	.+2      	; 0xd48 <loop+0x484>
     d46:	74 c0       	rjmp	.+232    	; 0xe30 <loop+0x56c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:992
            mMessage.sysexArray[mPendingMessageIndex] = extracted;
     d48:	c7 af       	std	Z+63, r28	; 0x3f
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:997
        else
            mPendingMessage[mPendingMessageIndex] = extracted;

        // Now we are going to check if we have reached the end of the message
        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
     d4a:	e0 90 f0 00 	lds	r14, 0x00F0	; 0x8000f0 <MIDI+0x32>
     d4e:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <MIDI+0x33>
     d52:	97 01       	movw	r18, r14
     d54:	21 50       	subi	r18, 0x01	; 1
     d56:	31 09       	sbc	r19, r1
     d58:	82 17       	cp	r24, r18
     d5a:	93 07       	cpc	r25, r19
     d5c:	08 f4       	brcc	.+2      	; 0xd60 <loop+0x49c>
     d5e:	a5 c0       	rjmp	.+330    	; 0xeaa <loop+0x5e6>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1004
            // SysEx larger than the allocated buffer size,
            // Split SysEx like so:
            //   first:  0xF0 .... 0xF0
            //   midlle: 0xF7 .... 0xF0
            //   last:   0xF7 .... 0xF7
            if ((mPendingMessage[0] == SystemExclusiveStart)
     d60:	d0 91 ed 00 	lds	r29, 0x00ED	; 0x8000ed <MIDI+0x2f>
     d64:	d0 3f       	cpi	r29, 0xF0	; 240
     d66:	19 f0       	breq	.+6      	; 0xd6e <loop+0x4aa>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1005
            ||  (mPendingMessage[0] == SystemExclusiveEnd))
     d68:	d7 3f       	cpi	r29, 0xF7	; 247
     d6a:	09 f0       	breq	.+2      	; 0xd6e <loop+0x4aa>
     d6c:	63 c0       	rjmp	.+198    	; 0xe34 <loop+0x570>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1007
            {
                auto lastByte = mMessage.sysexArray[Settings::SysExMaxSize - 1];
     d6e:	c0 91 7c 01 	lds	r28, 0x017C	; 0x80017c <MIDI+0xbe>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1008
                mMessage.sysexArray[Settings::SysExMaxSize - 1] = SystemExclusiveStart;
     d72:	80 ef       	ldi	r24, 0xF0	; 240
     d74:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <MIDI+0xbe>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1009
                mMessage.type = SystemExclusive;
     d78:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1012

                // Get length
                mMessage.data1   = Settings::SysExMaxSize & 0xff; // LSB
     d7c:	80 e8       	ldi	r24, 0x80	; 128
     d7e:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1013
                mMessage.data2   = byte(Settings::SysExMaxSize >> 8); // MSB
     d82:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1014
                mMessage.channel = 0;
     d86:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1015
                mMessage.length  = Settings::SysExMaxSize;
     d8a:	80 e8       	ldi	r24, 0x80	; 128
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <MIDI+0xc1>
     d92:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <MIDI+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1016
                mMessage.valid   = true;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <MIDI+0xbf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1020

                // No need to check against the inputChannel,
                // SysEx ignores input channel
                launchCallback();
     d9c:	8e eb       	ldi	r24, 0xBE	; 190
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	12 dc       	rcall	.-2012   	; 0x5c6 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1022

                mMessage.sysexArray[0] = SystemExclusiveEnd;
     da2:	87 ef       	ldi	r24, 0xF7	; 247
     da4:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <MIDI+0x3f>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1023
                mMessage.sysexArray[1] = lastByte;
     da8:	c0 93 fe 00 	sts	0x00FE, r28	; 0x8000fe <MIDI+0x40>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1025

                mPendingMessageIndex = 2;
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	90 e0       	ldi	r25, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1071
            return true;
        }
        else
        {
            // Then update the index of the pending message.
            mPendingMessageIndex++;
     db0:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <MIDI+0x35>
     db4:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <MIDI+0x34>
     db8:	1f cf       	rjmp	.-450    	; 0xbf8 <loop+0x334>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:926
        // First, test if this is a status byte
        if (extracted >= 0x80)
        {
            // Reception of status bytes in the middle of an uncompleted message
            // are allowed only for interleaved Real Time message or EOX
            switch (extracted)
     dba:	ce 3f       	cpi	r28, 0xFE	; 254
     dbc:	08 f4       	brcc	.+2      	; 0xdc0 <loop+0x4fc>
     dbe:	ba cf       	rjmp	.-140    	; 0xd34 <loop+0x470>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:943
                    // the MIDI class, and recompose the message it was
                    // interleaved into. Oh, and without killing the running status..
                    // This is done by leaving the pending message as is,
                    // it will be completed on next calls.

                    mMessage.type    = (MidiType)extracted;
     dc0:	c0 93 fa 00 	sts	0x00FA, r28	; 0x8000fa <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:944
                    mMessage.data1   = 0;
     dc4:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:945
                    mMessage.data2   = 0;
     dc8:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:946
                    mMessage.channel = 0;
     dcc:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:947
                    mMessage.length  = 1;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <MIDI+0xc1>
     dd8:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <MIDI+0xc0>
     ddc:	93 cf       	rjmp	.-218    	; 0xd04 <loop+0x440>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:955
                    return true;

                    // Exclusive
                case SystemExclusiveStart:
                case SystemExclusiveEnd:
                    if ((mMessage.sysexArray[0] == SystemExclusiveStart)
     dde:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <MIDI+0x3f>
     de2:	20 3f       	cpi	r18, 0xF0	; 240
     de4:	19 f0       	breq	.+6      	; 0xdec <loop+0x528>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:956
                    ||  (mMessage.sysexArray[0] == SystemExclusiveEnd))
     de6:	27 3f       	cpi	r18, 0xF7	; 247
     de8:	09 f0       	breq	.+2      	; 0xdec <loop+0x528>
     dea:	f0 ce       	rjmp	.-544    	; 0xbcc <loop+0x308>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:959
                    {
                        // Store the last byte (EOX)
                        mMessage.sysexArray[mPendingMessageIndex++] = extracted;
     dec:	9c 01       	movw	r18, r24
     dee:	2f 5f       	subi	r18, 0xFF	; 255
     df0:	3f 4f       	sbci	r19, 0xFF	; 255
     df2:	82 54       	subi	r24, 0x42	; 66
     df4:	9f 4f       	sbci	r25, 0xFF	; 255
     df6:	fc 01       	movw	r30, r24
     df8:	c7 af       	std	Z+63, r28	; 0x3f
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:960
                        mMessage.type = SystemExclusive;
     dfa:	80 ef       	ldi	r24, 0xF0	; 240
     dfc:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:963

                        // Get length
                        mMessage.data1   = mPendingMessageIndex & 0xff; // LSB
     e00:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:964
                        mMessage.data2   = byte(mPendingMessageIndex >> 8);   // MSB
     e04:	30 93 fc 00 	sts	0x00FC, r19	; 0x8000fc <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:965
                        mMessage.channel = 0;
     e08:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:966
                        mMessage.length  = mPendingMessageIndex;
     e0c:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <MIDI+0xc1>
     e10:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <MIDI+0xc0>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:967
                        mMessage.valid   = true;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <MIDI+0xbf>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE10resetInputEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1122

// Private method: reset input attributes
template<class Transport, class Settings, class Platform>
inline void MidiInterface<Transport, Settings, Platform>::resetInput()
{
    mPendingMessageIndex = 0;
     e1a:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <MIDI+0x35>
     e1e:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1123
    mPendingMessageExpectedLength = 0;
     e22:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x33>
     e26:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <MIDI+0x32>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1063
                    mRunningStatus_RX = mPendingMessage[0];
                    break;

                default:
                    // No running status
                    mRunningStatus_RX = InvalidType;
     e2a:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <MIDI+0x2d>
     e2e:	16 cf       	rjmp	.-468    	; 0xc5c <loop+0x398>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:994
        // Add extracted data byte to pending message
        if ((mPendingMessage[0] == SystemExclusiveStart)
        ||  (mPendingMessage[0] == SystemExclusiveEnd))
            mMessage.sysexArray[mPendingMessageIndex] = extracted;
        else
            mPendingMessage[mPendingMessageIndex] = extracted;
     e30:	c7 a7       	std	Z+47, r28	; 0x2f
     e32:	8b cf       	rjmp	.-234    	; 0xd4a <loop+0x486>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1030
                mPendingMessageIndex = 2;

                return false;
            }

            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
     e34:	8d 2f       	mov	r24, r29
     e36:	38 dd       	rcall	.-1424   	; 0x8a8 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::getTypeFromStatusByte(unsigned char)>
     e38:	c8 2f       	mov	r28, r24
     e3a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <MIDI+0x3c>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1032

            if (isChannelMessage(mMessage.type))
     e3e:	25 dd       	rcall	.-1462   	; 0x88a <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::isChannelMessage(midi::MidiType)>
     e40:	88 23       	and	r24, r24
     e42:	49 f1       	breq	.+82     	; 0xe96 <loop+0x5d2>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE24getChannelFromStatusByteEh():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1238
/*! \brief Returns channel in the range 1-16
 */
template<class Transport, class Settings, class Platform>
inline Channel MidiInterface<Transport, Settings, Platform>::getChannelFromStatusByte(byte inStatus)
{
    return Channel((inStatus & 0x0f) + 1);
     e44:	8d 2f       	mov	r24, r29
     e46:	8f 70       	andi	r24, 0x0F	; 15
     e48:	8f 5f       	subi	r24, 0xFF	; 255
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEE5parseEv():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1033
            }

            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);

            if (isChannelMessage(mMessage.type))
                mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
     e4a:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <MIDI+0x3b>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1037
            else
                mMessage.channel = 0;

            mMessage.data1 = mPendingMessage[1];
     e4e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <MIDI+0x30>
     e52:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <MIDI+0x3d>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1039
            // Save data2 only if applicable
            mMessage.data2 = mPendingMessageExpectedLength == 3 ? mPendingMessage[2] : 0;
     e56:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <MIDI+0x31>
     e5a:	f3 e0       	ldi	r31, 0x03	; 3
     e5c:	ef 16       	cp	r14, r31
     e5e:	f1 04       	cpc	r15, r1
     e60:	09 f0       	breq	.+2      	; 0xe64 <loop+0x5a0>
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <MIDI+0x3e>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1042

            // Reset local variables
            mPendingMessageIndex = 0;
     e68:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <MIDI+0x35>
     e6c:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <MIDI+0x34>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1043
            mPendingMessageExpectedLength = 0;
     e70:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <MIDI+0x33>
     e74:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <MIDI+0x32>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1045

            mMessage.valid = true;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <MIDI+0xbf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1048

            // Activate running status (if enabled for the received type)
            switch (mMessage.type)
     e7e:	c0 3b       	cpi	r28, 0xB0	; 176
     e80:	39 f0       	breq	.+14     	; 0xe90 <loop+0x5cc>
     e82:	60 f4       	brcc	.+24     	; 0xe9c <loop+0x5d8>
     e84:	c0 39       	cpi	r28, 0x90	; 144
     e86:	21 f0       	breq	.+8      	; 0xe90 <loop+0x5cc>
     e88:	c0 3a       	cpi	r28, 0xA0	; 160
     e8a:	11 f0       	breq	.+4      	; 0xe90 <loop+0x5cc>
     e8c:	c0 38       	cpi	r28, 0x80	; 128
     e8e:	69 f6       	brne	.-102    	; 0xe2a <loop+0x566>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1058
                case ControlChange:
                case ProgramChange:
                case AfterTouchChannel:
                case PitchBend:
                    // Running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
     e90:	d0 93 eb 00 	sts	0x00EB, r29	; 0x8000eb <MIDI+0x2d>
     e94:	e3 ce       	rjmp	.-570    	; 0xc5c <loop+0x398>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1035
            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);

            if (isChannelMessage(mMessage.type))
                mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
            else
                mMessage.channel = 0;
     e96:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <MIDI+0x3b>
     e9a:	d9 cf       	rjmp	.-78     	; 0xe4e <loop+0x58a>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1048
            mPendingMessageExpectedLength = 0;

            mMessage.valid = true;

            // Activate running status (if enabled for the received type)
            switch (mMessage.type)
     e9c:	c0 3d       	cpi	r28, 0xD0	; 208
     e9e:	c1 f3       	breq	.-16     	; 0xe90 <loop+0x5cc>
     ea0:	c0 3e       	cpi	r28, 0xE0	; 224
     ea2:	b1 f3       	breq	.-20     	; 0xe90 <loop+0x5cc>
     ea4:	c0 3c       	cpi	r28, 0xC0	; 192
     ea6:	09 f6       	brne	.-126    	; 0xe2a <loop+0x566>
     ea8:	f3 cf       	rjmp	.-26     	; 0xe90 <loop+0x5cc>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:1071
            return true;
        }
        else
        {
            // Then update the index of the pending message.
            mPendingMessageIndex++;
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	81 cf       	rjmp	.-254    	; 0xdb0 <loop+0x4ec>

00000eae <_GLOBAL__sub_I_keyboard>:
_GLOBAL__sub_I_keyboard():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:36

#define DataPin PIN_PD2
#define IRQPin PIN_PD3


PS2KeyAdvanced keyboard;
     eae:	80 e9       	ldi	r24, 0x90	; 144
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	35 d4       	rcall	.+2154   	; 0x171e <PS2KeyAdvanced::PS2KeyAdvanced()>
_ZN4midi10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEC4ERS1_():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/serialMIDI.h:49
{
    typedef _Settings Settings;

public:
	SerialMIDI(SerialPort& inSerial)
        : mSerial(inSerial)
     eb4:	84 ed       	ldi	r24, 0xD4	; 212
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <serialMIDI+0x1>
     ebc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <serialMIDI>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEEC4ERS4_():
    , mThruFilterMode(Thru::Full)
    , mLastMessageSentTime(0)
    , mLastMessageReceivedTime(0)
    , mSenderActiveSensingPeriodicity(0)
    , mReceiverActiveSensingActivated(false)
    , mLastError(0)
     ec0:	ee eb       	ldi	r30, 0xBE	; 190
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	11 82       	std	Z+1, r1	; 0x01
     ec6:	10 82       	st	Z, r1
     ec8:	13 82       	std	Z+3, r1	; 0x03
     eca:	12 82       	std	Z+2, r1	; 0x02
     ecc:	15 82       	std	Z+5, r1	; 0x05
     ece:	14 82       	std	Z+4, r1	; 0x04
     ed0:	17 82       	std	Z+7, r1	; 0x07
     ed2:	16 82       	std	Z+6, r1	; 0x06
     ed4:	11 86       	std	Z+9, r1	; 0x09
     ed6:	10 86       	std	Z+8, r1	; 0x08
     ed8:	13 86       	std	Z+11, r1	; 0x0b
     eda:	12 86       	std	Z+10, r1	; 0x0a
     edc:	15 86       	std	Z+13, r1	; 0x0d
     ede:	14 86       	std	Z+12, r1	; 0x0c
     ee0:	17 86       	std	Z+15, r1	; 0x0f
     ee2:	16 86       	std	Z+14, r1	; 0x0e
     ee4:	11 8a       	std	Z+17, r1	; 0x11
     ee6:	10 8a       	std	Z+16, r1	; 0x10
     ee8:	13 8a       	std	Z+19, r1	; 0x13
     eea:	12 8a       	std	Z+18, r1	; 0x12
     eec:	15 8a       	std	Z+21, r1	; 0x15
     eee:	14 8a       	std	Z+20, r1	; 0x14
     ef0:	17 8a       	std	Z+23, r1	; 0x17
     ef2:	16 8a       	std	Z+22, r1	; 0x16
     ef4:	11 8e       	std	Z+25, r1	; 0x19
     ef6:	10 8e       	std	Z+24, r1	; 0x18
     ef8:	13 8e       	std	Z+27, r1	; 0x1b
     efa:	12 8e       	std	Z+26, r1	; 0x1a
     efc:	15 8e       	std	Z+29, r1	; 0x1d
     efe:	14 8e       	std	Z+28, r1	; 0x1c
     f00:	17 8e       	std	Z+31, r1	; 0x1f
     f02:	16 8e       	std	Z+30, r1	; 0x1e
     f04:	11 a2       	std	Z+33, r1	; 0x21
     f06:	10 a2       	std	Z+32, r1	; 0x20
     f08:	13 a2       	std	Z+35, r1	; 0x23
     f0a:	12 a2       	std	Z+34, r1	; 0x22
     f0c:	15 a2       	std	Z+37, r1	; 0x25
     f0e:	14 a2       	std	Z+36, r1	; 0x24
     f10:	17 a2       	std	Z+39, r1	; 0x27
     f12:	16 a2       	std	Z+38, r1	; 0x26
     f14:	11 a6       	std	Z+41, r1	; 0x29
     f16:	10 a6       	std	Z+40, r1	; 0x28
     f18:	8e e8       	ldi	r24, 0x8E	; 142
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	93 a7       	std	Z+43, r25	; 0x2b
     f1e:	82 a7       	std	Z+42, r24	; 0x2a
     f20:	14 a6       	std	Z+44, r1	; 0x2c
     f22:	15 a6       	std	Z+45, r1	; 0x2d
     f24:	16 a6       	std	Z+46, r1	; 0x2e
     f26:	13 aa       	std	Z+51, r1	; 0x33
     f28:	12 aa       	std	Z+50, r1	; 0x32
     f2a:	15 aa       	std	Z+53, r1	; 0x35
     f2c:	14 aa       	std	Z+52, r1	; 0x34
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f ef       	ldi	r25, 0xFF	; 255
     f32:	97 ab       	std	Z+55, r25	; 0x37
     f34:	86 ab       	std	Z+54, r24	; 0x36
     f36:	91 af       	std	Z+57, r25	; 0x39
     f38:	80 af       	std	Z+56, r24	; 0x38
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <MIDI+0x3a>
_ZN4midi7MessageILj128EEC4Ev():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/midi_Message.h:52
    inline Message()
        : channel(0)
        , type(MIDI_NAMESPACE::InvalidType)
        , data1(0)
        , data2(0)
        , valid(false)
     f40:	13 ae       	std	Z+59, r1	; 0x3b
     f42:	14 ae       	std	Z+60, r1	; 0x3c
     f44:	15 ae       	std	Z+61, r1	; 0x3d
     f46:	16 ae       	std	Z+62, r1	; 0x3e
     f48:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <MIDI+0xbf>
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/midi_Message.h:54
    {
        memset(sysexArray, 0, sSysExMaxSize * sizeof(DataByte));
     f4c:	ed ef       	ldi	r30, 0xFD	; 253
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 e8       	ldi	r24, 0x80	; 128
     f52:	df 01       	movw	r26, r30
     f54:	1d 92       	st	X+, r1
     f56:	8a 95       	dec	r24
     f58:	e9 f7       	brne	.-6      	; 0xf54 <_GLOBAL__sub_I_keyboard+0xa6>
_ZN4midi13MidiInterfaceINS_10SerialMIDII14HardwareSerialNS_21DefaultSerialSettingsEEENS_15DefaultSettingsENS_15DefaultPlatformEEC4ERS4_():
/Users/moritz/Documents/Arduino/libraries/MIDI_Library/src/MIDI.hpp:49
     f5a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <MIDI+0xc2>
     f5e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <MIDI+0xc3>
     f62:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <MIDI+0xc4>
     f66:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <MIDI+0xc5>
     f6a:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <MIDI+0xc6>
     f6e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <MIDI+0xc7>
     f72:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <MIDI+0xc8>
     f76:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <MIDI+0xc9>
     f7a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <MIDI+0xca>
     f7e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <MIDI+0xcb>
     f82:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <MIDI+0xcc>
     f86:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <MIDI+0xcd>
     f8a:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <MIDI+0xce>
     f8e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <MIDI+0xcf>
_GLOBAL__sub_I_keyboard():
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:39
MIDI_CREATE_DEFAULT_INSTANCE();

Encoder en0(PIN_PD5, PIN_PD6);
     f92:	46 e0       	ldi	r20, 0x06	; 6
     f94:	65 e0       	ldi	r22, 0x05	; 5
     f96:	83 eb       	ldi	r24, 0xB3	; 179
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	4e d9       	rcall	.-3428   	; 0x238 <Encoder::Encoder(unsigned char, unsigned char)>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:40
Encoder en1(PIN_PD7, PIN_PB0);
     f9c:	48 e0       	ldi	r20, 0x08	; 8
     f9e:	67 e0       	ldi	r22, 0x07	; 7
     fa0:	88 ea       	ldi	r24, 0xA8	; 168
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	49 d9       	rcall	.-3438   	; 0x238 <Encoder::Encoder(unsigned char, unsigned char)>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:41
Encoder en2(PIN_PB1, PIN_PB2);
     fa6:	4a e0       	ldi	r20, 0x0A	; 10
     fa8:	69 e0       	ldi	r22, 0x09	; 9
     faa:	8d e9       	ldi	r24, 0x9D	; 157
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	44 d9       	rcall	.-3448   	; 0x238 <Encoder::Encoder(unsigned char, unsigned char)>
/Users/moritz/Documents/Projekte/2312 Arduino_Bachelor/PCB_V01/PCB_V01.ino:42
Encoder en3(PIN_PC0, PIN_PC1);
     fb0:	4f e0       	ldi	r20, 0x0F	; 15
     fb2:	6e e0       	ldi	r22, 0x0E	; 14
     fb4:	82 e9       	ldi	r24, 0x92	; 146
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	3f c9       	rjmp	.-3458   	; 0x238 <Encoder::Encoder(unsigned char, unsigned char)>

00000fba <send_byte(unsigned char)>:
_Z9send_byteh():
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:920
                -5 parameter error
                */
int PS2KeyAdvanced::typematic( uint8_t rate, uint8_t delay )
{
if( rate > 31 || delay > 3 )
  return -5;
     fba:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <_tx_head>
     fbe:	9f 5f       	subi	r25, 0xFF	; 255
     fc0:	96 30       	cpi	r25, 0x06	; 6
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <send_byte(unsigned char)+0xc>
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <_tx_tail>
     fca:	29 17       	cp	r18, r25
     fcc:	51 f0       	breq	.+20     	; 0xfe2 <send_byte(unsigned char)+0x28>
     fce:	e9 2f       	mov	r30, r25
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	e2 55       	subi	r30, 0x52	; 82
     fd4:	fe 4f       	sbci	r31, 0xFE	; 254
     fd6:	80 83       	st	Z, r24
     fd8:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <_tx_head>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	08 95       	ret
     fe2:	8c ef       	ldi	r24, 0xFC	; 252
     fe4:	9f ef       	ldi	r25, 0xFF	; 255
     fe6:	08 95       	ret

00000fe8 <pininput(unsigned char)>:
_Z8pininputh():
     fe8:	62 e0       	ldi	r22, 0x02	; 2
     fea:	fb c4       	rjmp	.+2550   	; 0x19e2 <pinMode>

00000fec <send_now(unsigned char)>:
_Z8send_nowh():
     fec:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <_shiftdata>
     ff0:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_now_send>
     ff4:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <_bitcount>
     ff8:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <_parity>
     ffc:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    1000:	80 6c       	ori	r24, 0xC0	; 192
    1002:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ps2mode>
    1006:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_tx_ready>
    100a:	87 fd       	sbrc	r24, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <send_now(unsigned char)+0x3c>
    100e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_tx_ready>
    1012:	80 ff       	sbrs	r24, 0
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <send_now(unsigned char)+0x3c>
    1016:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_response_count>
    101a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <_bytes_expected>
    101e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    1022:	80 61       	ori	r24, 0x10	; 16
    1024:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ps2mode>
    1028:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <PS2_IrqPin>
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	89 f1       	breq	.+98     	; 0x1092 <send_now(unsigned char)+0xa6>
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	89 f1       	breq	.+98     	; 0x1096 <send_now(unsigned char)+0xaa>
    1034:	8f ef       	ldi	r24, 0xFF	; 255
    1036:	b0 d3       	rcall	.+1888   	; 0x1798 <detachInterrupt>
    1038:	61 e0       	ldi	r22, 0x01	; 1
    103a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <PS2_DataPin>
    103e:	0d d5       	rcall	.+2586   	; 0x1a5a <digitalWrite>
    1040:	61 e0       	ldi	r22, 0x01	; 1
    1042:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <PS2_DataPin>
    1046:	cd d4       	rcall	.+2458   	; 0x19e2 <pinMode>
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <PS2_IrqPin>
    104e:	05 d5       	rcall	.+2570   	; 0x1a5a <digitalWrite>
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <PS2_IrqPin>
    1056:	c5 d4       	rcall	.+2442   	; 0x19e2 <pinMode>
    1058:	8a e0       	ldi	r24, 0x0A	; 10
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	56 d4       	rcall	.+2220   	; 0x190a <delayMicroseconds>
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <PS2_IrqPin>
    1064:	fa d4       	rcall	.+2548   	; 0x1a5a <digitalWrite>
    1066:	8c e3       	ldi	r24, 0x3C	; 60
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	4f d4       	rcall	.+2206   	; 0x190a <delayMicroseconds>
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <PS2_DataPin>
    1072:	f3 d4       	rcall	.+2534   	; 0x1a5a <digitalWrite>
    1074:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <PS2_IrqPin>
    1078:	b7 df       	rcall	.-146    	; 0xfe8 <pininput(unsigned char)>
    107a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <PS2_IrqPin>
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	61 f0       	breq	.+24     	; 0x109a <send_now(unsigned char)+0xae>
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	61 f0       	breq	.+24     	; 0x109e <send_now(unsigned char)+0xb2>
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	42 e0       	ldi	r20, 0x02	; 2
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	6a e7       	ldi	r22, 0x7A	; 122
    108e:	79 e0       	ldi	r23, 0x09	; 9
    1090:	64 c3       	rjmp	.+1736   	; 0x175a <attachInterrupt>
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	d0 cf       	rjmp	.-96     	; 0x1036 <send_now(unsigned char)+0x4a>
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	ce cf       	rjmp	.-100    	; 0x1036 <send_now(unsigned char)+0x4a>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	f5 cf       	rjmp	.-22     	; 0x1088 <send_now(unsigned char)+0x9c>
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	f3 cf       	rjmp	.-26     	; 0x1088 <send_now(unsigned char)+0x9c>

000010a2 <send_next()>:
_Z9send_nextv():
    10a2:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_tx_tail>
    10a6:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_tx_head>
    10aa:	89 17       	cp	r24, r25
    10ac:	91 f1       	breq	.+100    	; 0x1112 <send_next()+0x70>
    10ae:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_tx_ready>
    10b2:	81 60       	ori	r24, 0x01	; 1
    10b4:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <_tx_ready>
    10b8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_tx_ready>
    10bc:	87 fd       	sbrc	r24, 7
    10be:	2c c0       	rjmp	.+88     	; 0x1118 <send_next()+0x76>
    10c0:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    10c4:	87 fd       	sbrc	r24, 7
    10c6:	28 c0       	rjmp	.+80     	; 0x1118 <send_next()+0x76>
    10c8:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <_response_count>
    10cc:	2f ef       	ldi	r18, 0xFF	; 255
    10ce:	3f ef       	ldi	r19, 0xFF	; 255
    10d0:	9f 5f       	subi	r25, 0xFF	; 255
    10d2:	96 30       	cpi	r25, 0x06	; 6
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <send_next()+0x36>
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	e9 2f       	mov	r30, r25
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	e2 55       	subi	r30, 0x52	; 82
    10de:	fe 4f       	sbci	r31, 0xFE	; 254
    10e0:	2f 3f       	cpi	r18, 0xFF	; 255
    10e2:	32 07       	cpc	r19, r18
    10e4:	69 f4       	brne	.+26     	; 0x1100 <send_next()+0x5e>
    10e6:	20 81       	ld	r18, Z
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_tx_tail>
    10ee:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_tx_head>
    10f2:	89 13       	cpse	r24, r25
    10f4:	ed cf       	rjmp	.-38     	; 0x10d0 <send_next()+0x2e>
    10f6:	82 2f       	mov	r24, r18
    10f8:	79 df       	rcall	.-270    	; 0xfec <send_now(unsigned char)>
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	08 95       	ret
    1100:	80 81       	ld	r24, Z
    1102:	8b 3b       	cpi	r24, 0xBB	; 187
    1104:	c1 f7       	brne	.-16     	; 0x10f6 <send_next()+0x54>
    1106:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_response_count>
    110a:	8f 5f       	subi	r24, 0xFF	; 255
    110c:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_response_count>
    1110:	ec cf       	rjmp	.-40     	; 0x10ea <send_next()+0x48>
    1112:	8e ef       	ldi	r24, 0xFE	; 254
    1114:	9f ef       	ldi	r25, 0xFF	; 255
    1116:	08 95       	ret
    1118:	8a e7       	ldi	r24, 0x7A	; 122
    111a:	9f ef       	ldi	r25, 0xFF	; 255
    111c:	08 95       	ret

0000111e <send_bit()>:
_Z8send_bitv():
    111e:	cf 93       	push	r28
    1120:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_bitcount>
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <_bitcount>
    112a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_bitcount>
    112e:	8a 30       	cpi	r24, 0x0A	; 10
    1130:	48 f4       	brcc	.+18     	; 0x1144 <send_bit()+0x26>
    1132:	82 30       	cpi	r24, 0x02	; 2
    1134:	90 f5       	brcc	.+100    	; 0x119a <send_bit()+0x7c>
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	09 f4       	brne	.+2      	; 0x113e <send_bit()+0x20>
    113c:	47 c0       	rjmp	.+142    	; 0x11cc <send_bit()+0xae>
    113e:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <_bitcount>
    1142:	3e c0       	rjmp	.+124    	; 0x11c0 <send_bit()+0xa2>
    1144:	8b 30       	cpi	r24, 0x0B	; 11
    1146:	09 f4       	brne	.+2      	; 0x114a <send_bit()+0x2c>
    1148:	45 c0       	rjmp	.+138    	; 0x11d4 <send_bit()+0xb6>
    114a:	e0 f1       	brcs	.+120    	; 0x11c4 <send_bit()+0xa6>
    114c:	8c 30       	cpi	r24, 0x0C	; 12
    114e:	b9 f7       	brne	.-18     	; 0x113e <send_bit()+0x20>
    1150:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_now_send>
    1154:	8e 3e       	cpi	r24, 0xEE	; 238
    1156:	69 f0       	breq	.+26     	; 0x1172 <send_bit()+0x54>
    1158:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_now_send>
    115c:	8e 3f       	cpi	r24, 0xFE	; 254
    115e:	49 f0       	breq	.+18     	; 0x1172 <send_bit()+0x54>
    1160:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_now_send>
    1164:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_last_sent>
    1168:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    116c:	82 60       	ori	r24, 0x02	; 2
    116e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ps2mode>
    1172:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    1176:	8f 7b       	andi	r24, 0xBF	; 191
    1178:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ps2mode>
    117c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_tx_ready>
    1180:	87 ff       	sbrs	r24, 7
    1182:	2c c0       	rjmp	.+88     	; 0x11dc <send_bit()+0xbe>
    1184:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_tx_ready>
    1188:	8f 77       	andi	r24, 0x7F	; 127
    118a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <_tx_ready>
    118e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    1192:	84 fd       	sbrc	r24, 4
    1194:	d4 cf       	rjmp	.-88     	; 0x113e <send_bit()+0x20>
    1196:	85 df       	rcall	.-246    	; 0x10a2 <send_next()>
    1198:	d2 cf       	rjmp	.-92     	; 0x113e <send_bit()+0x20>
    119a:	c0 91 b5 01 	lds	r28, 0x01B5	; 0x8001b5 <_shiftdata>
    119e:	c1 70       	andi	r28, 0x01	; 1
    11a0:	6c 2f       	mov	r22, r28
    11a2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <PS2_DataPin>
    11a6:	59 d4       	rcall	.+2226   	; 0x1a5a <digitalWrite>
    11a8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <_parity>
    11ac:	c8 0f       	add	r28, r24
    11ae:	c0 93 b4 01 	sts	0x01B4, r28	; 0x8001b4 <_parity>
    11b2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_shiftdata>
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	95 95       	asr	r25
    11ba:	87 95       	ror	r24
    11bc:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <_shiftdata>
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret
    11c4:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <_parity>
    11c8:	60 95       	com	r22
    11ca:	61 70       	andi	r22, 0x01	; 1
    11cc:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <PS2_DataPin>
    11d0:	cf 91       	pop	r28
    11d2:	43 c4       	rjmp	.+2182   	; 0x1a5a <digitalWrite>
    11d4:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <PS2_DataPin>
    11d8:	cf 91       	pop	r28
    11da:	06 cf       	rjmp	.-500    	; 0xfe8 <pininput(unsigned char)>
    11dc:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_tx_ready>
    11e0:	8e 7f       	andi	r24, 0xFE	; 254
    11e2:	d3 cf       	rjmp	.-90     	; 0x118a <send_bit()+0x6c>

000011e4 <ps2_reset()>:
_Z9ps2_resetv():
    11e4:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <_tx_head>
    11e8:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <_tx_tail>
    11ec:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <_tx_ready>
    11f0:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <_response_count>
    11f4:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <_head>
    11f8:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <_tail>
    11fc:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <_bitcount>
    1200:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <PS2_keystatus>
    1204:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <PS2_led_lock>
    1208:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <_ps2mode>
    120c:	08 95       	ret

0000120e <decode_key(unsigned char)>:
_Z10decode_keyh():
    120e:	8e 3f       	cpi	r24, 0xFE	; 254
    1210:	29 f0       	breq	.+10     	; 0x121c <decode_key(unsigned char)+0xe>
    1212:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <_ps2mode>
    1216:	9d 7f       	andi	r25, 0xFD	; 253
    1218:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <_ps2mode>
    121c:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <_ps2mode>
    1220:	94 ff       	sbrs	r25, 4
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <decode_key(unsigned char)+0x1a>
    1224:	80 3f       	cpi	r24, 0xF0	; 240
    1226:	70 f0       	brcs	.+28     	; 0x1244 <decode_key(unsigned char)+0x36>
    1228:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <_ps2mode>
    122c:	92 fd       	sbrc	r25, 2
    122e:	60 c0       	rjmp	.+192    	; 0x12f0 <decode_key(unsigned char)+0xe2>
    1230:	8e 3e       	cpi	r24, 0xEE	; 238
    1232:	09 f4       	brne	.+2      	; 0x1236 <decode_key(unsigned char)+0x28>
    1234:	46 c0       	rjmp	.+140    	; 0x12c2 <decode_key(unsigned char)+0xb4>
    1236:	e8 f4       	brcc	.+58     	; 0x1272 <decode_key(unsigned char)+0x64>
    1238:	8a 3a       	cpi	r24, 0xAA	; 170
    123a:	09 f4       	brne	.+2      	; 0x123e <decode_key(unsigned char)+0x30>
    123c:	4e c0       	rjmp	.+156    	; 0x12da <decode_key(unsigned char)+0xcc>
    123e:	20 f4       	brcc	.+8      	; 0x1248 <decode_key(unsigned char)+0x3a>
    1240:	88 23       	and	r24, r24
    1242:	51 f1       	breq	.+84     	; 0x1298 <decode_key(unsigned char)+0x8a>
    1244:	86 e0       	ldi	r24, 0x06	; 6
    1246:	08 95       	ret
    1248:	80 3e       	cpi	r24, 0xE0	; 224
    124a:	09 f4       	brne	.+2      	; 0x124e <decode_key(unsigned char)+0x40>
    124c:	4a c0       	rjmp	.+148    	; 0x12e2 <decode_key(unsigned char)+0xd4>
    124e:	81 3e       	cpi	r24, 0xE1	; 225
    1250:	c9 f7       	brne	.-14     	; 0x1244 <decode_key(unsigned char)+0x36>
    1252:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    1256:	82 fd       	sbrc	r24, 2
    1258:	19 c0       	rjmp	.+50     	; 0x128c <decode_key(unsigned char)+0x7e>
    125a:	87 e0       	ldi	r24, 0x07	; 7
    125c:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <_bytes_expected>
    1260:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    1264:	84 60       	ori	r24, 0x04	; 4
    1266:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ps2mode>
    126a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    126e:	8f 7d       	andi	r24, 0xDF	; 223
    1270:	0b c0       	rjmp	.+22     	; 0x1288 <decode_key(unsigned char)+0x7a>
    1272:	8c 3f       	cpi	r24, 0xFC	; 252
    1274:	f1 f0       	breq	.+60     	; 0x12b2 <decode_key(unsigned char)+0xa4>
    1276:	60 f4       	brcc	.+24     	; 0x1290 <decode_key(unsigned char)+0x82>
    1278:	80 3f       	cpi	r24, 0xF0	; 240
    127a:	21 f7       	brne	.-56     	; 0x1244 <decode_key(unsigned char)+0x36>
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <_bytes_expected>
    1282:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    1286:	80 62       	ori	r24, 0x20	; 32
    1288:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ps2mode>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	08 95       	ret
    1290:	8e 3f       	cpi	r24, 0xFE	; 254
    1292:	29 f0       	breq	.+10     	; 0x129e <decode_key(unsigned char)+0x90>
    1294:	8f 3f       	cpi	r24, 0xFF	; 255
    1296:	b1 f6       	brne	.-84     	; 0x1244 <decode_key(unsigned char)+0x36>
    1298:	a5 df       	rcall	.-182    	; 0x11e4 <ps2_reset()>
    129a:	8c e0       	ldi	r24, 0x0C	; 12
    129c:	08 95       	ret
    129e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    12a2:	81 ff       	sbrs	r24, 1
    12a4:	f3 cf       	rjmp	.-26     	; 0x128c <decode_key(unsigned char)+0x7e>
    12a6:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_last_sent>
    12aa:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_now_send>
    12ae:	80 e1       	ldi	r24, 0x10	; 16
    12b0:	08 95       	ret
    12b2:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <_bytes_expected>
    12b6:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <_ps2mode>
    12ba:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <_tx_ready>
    12be:	8e e0       	ldi	r24, 0x0E	; 14
    12c0:	08 95       	ret
    12c2:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <_ps2mode>
    12c6:	91 ff       	sbrs	r25, 1
    12c8:	0a c0       	rjmp	.+20     	; 0x12de <decode_key(unsigned char)+0xd0>
    12ca:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <_last_sent>
    12ce:	9e 3e       	cpi	r25, 0xEE	; 238
    12d0:	31 f0       	breq	.+12     	; 0x12de <decode_key(unsigned char)+0xd0>
    12d2:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_now_send>
    12d6:	84 e1       	ldi	r24, 0x14	; 20
    12d8:	08 95       	ret
    12da:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <_bytes_expected>
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	08 95       	ret
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <_bytes_expected>
    12e8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    12ec:	88 60       	ori	r24, 0x08	; 8
    12ee:	cc cf       	rjmp	.-104    	; 0x1288 <decode_key(unsigned char)+0x7a>
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	08 95       	ret

000012f4 <ps2interrupt()>:
_Z12ps2interruptv():
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    1306:	86 ff       	sbrs	r24, 6
    1308:	08 c0       	rjmp	.+16     	; 0x131a <ps2interrupt()+0x26>
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	02 cf       	rjmp	.-508    	; 0x111e <send_bit()>
    131a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <PS2_DataPin>
    131e:	ca d3       	rcall	.+1940   	; 0x1ab4 <digitalRead>
    1320:	c8 2f       	mov	r28, r24
    1322:	e7 d2       	rcall	.+1486   	; 0x18f2 <millis>
    1324:	00 91 91 01 	lds	r16, 0x0191	; 0x800191 <ps2interrupt()::prev_ms>
    1328:	10 91 92 01 	lds	r17, 0x0192	; 0x800192 <ps2interrupt()::prev_ms+0x1>
    132c:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <ps2interrupt()::prev_ms+0x2>
    1330:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <ps2interrupt()::prev_ms+0x3>
    1334:	6b 01       	movw	r12, r22
    1336:	7c 01       	movw	r14, r24
    1338:	c0 1a       	sub	r12, r16
    133a:	d1 0a       	sbc	r13, r17
    133c:	e2 0a       	sbc	r14, r18
    133e:	f3 0a       	sbc	r15, r19
    1340:	97 01       	movw	r18, r14
    1342:	86 01       	movw	r16, r12
    1344:	0b 3f       	cpi	r16, 0xFB	; 251
    1346:	11 05       	cpc	r17, r1
    1348:	21 05       	cpc	r18, r1
    134a:	31 05       	cpc	r19, r1
    134c:	20 f0       	brcs	.+8      	; 0x1356 <ps2interrupt()+0x62>
    134e:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <_bitcount>
    1352:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <_shiftdata>
    1356:	60 93 91 01 	sts	0x0191, r22	; 0x800191 <ps2interrupt()::prev_ms>
    135a:	70 93 92 01 	sts	0x0192, r23	; 0x800192 <ps2interrupt()::prev_ms+0x1>
    135e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <ps2interrupt()::prev_ms+0x2>
    1362:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <ps2interrupt()::prev_ms+0x3>
    1366:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_bitcount>
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <_bitcount>
    1370:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_bitcount>
    1374:	8a 30       	cpi	r24, 0x0A	; 10
    1376:	38 f4       	brcc	.+14     	; 0x1386 <ps2interrupt()+0x92>
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	20 f5       	brcc	.+72     	; 0x13c4 <ps2interrupt()+0xd0>
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	99 f0       	breq	.+38     	; 0x13a6 <ps2interrupt()+0xb2>
    1380:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <_bitcount>
    1384:	17 c0       	rjmp	.+46     	; 0x13b4 <ps2interrupt()+0xc0>
    1386:	8a 30       	cpi	r24, 0x0A	; 10
    1388:	91 f1       	breq	.+100    	; 0x13ee <ps2interrupt()+0xfa>
    138a:	8b 30       	cpi	r24, 0x0B	; 11
    138c:	c9 f7       	brne	.-14     	; 0x1380 <ps2interrupt()+0x8c>
    138e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <_parity>
    1392:	8d 3f       	cpi	r24, 0xFD	; 253
    1394:	c8 f1       	brcs	.+114    	; 0x1408 <ps2interrupt()+0x114>
    1396:	8e ef       	ldi	r24, 0xFE	; 254
    1398:	29 de       	rcall	.-942    	; 0xfec <send_now(unsigned char)>
    139a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_tx_ready>
    139e:	80 68       	ori	r24, 0x80	; 128
    13a0:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <_tx_ready>
    13a4:	ed cf       	rjmp	.-38     	; 0x1380 <ps2interrupt()+0x8c>
    13a6:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <_parity>
    13aa:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    13ae:	80 68       	ori	r24, 0x80	; 128
    13b0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ps2mode>
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	cf 90       	pop	r12
    13c2:	08 95       	ret
    13c4:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <_parity>
    13c8:	8c 0f       	add	r24, r28
    13ca:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <_parity>
    13ce:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_shiftdata>
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	95 95       	asr	r25
    13d6:	87 95       	ror	r24
    13d8:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <_shiftdata>
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	c1 11       	cpse	r28, r1
    13e0:	90 e8       	ldi	r25, 0x80	; 128
    13e2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_shiftdata>
    13e6:	89 2b       	or	r24, r25
    13e8:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <_shiftdata>
    13ec:	e3 cf       	rjmp	.-58     	; 0x13b4 <ps2interrupt()+0xc0>
    13ee:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <_parity>
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <_parity>
    13f8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <_parity>
    13fc:	c8 13       	cpse	r28, r24
    13fe:	da cf       	rjmp	.-76     	; 0x13b4 <ps2interrupt()+0xc0>
    1400:	8d ef       	ldi	r24, 0xFD	; 253
    1402:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <_parity>
    1406:	d6 cf       	rjmp	.-84     	; 0x13b4 <ps2interrupt()+0xc0>
    1408:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_shiftdata>
    140c:	00 df       	rcall	.-512    	; 0x120e <decode_key(unsigned char)>
    140e:	81 ff       	sbrs	r24, 1
    1410:	05 c0       	rjmp	.+10     	; 0x141c <ps2interrupt()+0x128>
    1412:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <_bytes_expected>
    1416:	91 50       	subi	r25, 0x01	; 1
    1418:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <_bytes_expected>
    141c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <_bytes_expected>
    1420:	19 16       	cp	r1, r25
    1422:	14 f4       	brge	.+4      	; 0x1428 <ps2interrupt()+0x134>
    1424:	82 ff       	sbrs	r24, 2
    1426:	1e c0       	rjmp	.+60     	; 0x1464 <ps2interrupt()+0x170>
    1428:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <_head>
    142c:	9f 5f       	subi	r25, 0xFF	; 255
    142e:	98 30       	cpi	r25, 0x08	; 8
    1430:	08 f0       	brcs	.+2      	; 0x1434 <ps2interrupt()+0x140>
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <_tail>
    1438:	29 17       	cp	r18, r25
    143a:	a1 f0       	breq	.+40     	; 0x1464 <ps2interrupt()+0x170>
    143c:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <_shiftdata>
    1440:	e9 2f       	mov	r30, r25
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	e6 54       	subi	r30, 0x46	; 70
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	31 83       	std	Z+1, r19	; 0x01
    1450:	20 83       	st	Z, r18
    1452:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <_ps2mode>
    1456:	20 81       	ld	r18, Z
    1458:	31 81       	ldd	r19, Z+1	; 0x01
    145a:	34 2b       	or	r19, r20
    145c:	31 83       	std	Z+1, r19	; 0x01
    145e:	20 83       	st	Z, r18
    1460:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <_head>
    1464:	84 ff       	sbrs	r24, 4
    1466:	03 c0       	rjmp	.+6      	; 0x146e <ps2interrupt()+0x17a>
    1468:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_now_send>
    146c:	95 cf       	rjmp	.-214    	; 0x1398 <ps2interrupt()+0xa4>
    146e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <_bytes_expected>
    1472:	18 16       	cp	r1, r24
    1474:	0c f4       	brge	.+2      	; 0x1478 <ps2interrupt()+0x184>
    1476:	84 cf       	rjmp	.-248    	; 0x1380 <ps2interrupt()+0x8c>
    1478:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    147c:	83 7c       	andi	r24, 0xC3	; 195
    147e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ps2mode>
    1482:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <_bytes_expected>
    1486:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ps2mode>
    148a:	8f 77       	andi	r24, 0x7F	; 127
    148c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ps2mode>
    1490:	08 de       	rcall	.-1008   	; 0x10a2 <send_next()>
    1492:	76 cf       	rjmp	.-276    	; 0x1380 <ps2interrupt()+0x8c>

00001494 <key_available()>:
_Z13key_availablev():
    1494:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_head>
    1498:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <_tail>
    149c:	89 1b       	sub	r24, r25
    149e:	87 fd       	sbrc	r24, 7
    14a0:	88 5f       	subi	r24, 0xF8	; 248
    14a2:	08 95       	ret

000014a4 <set_lock()>:
_Z8set_lockv():
    14a4:	8d ee       	ldi	r24, 0xED	; 237
    14a6:	89 dd       	rcall	.-1262   	; 0xfba <send_byte(unsigned char)>
    14a8:	8b eb       	ldi	r24, 0xBB	; 187
    14aa:	87 dd       	rcall	.-1266   	; 0xfba <send_byte(unsigned char)>
    14ac:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <PS2_led_lock>
    14b0:	84 dd       	rcall	.-1272   	; 0xfba <send_byte(unsigned char)>
    14b2:	8b eb       	ldi	r24, 0xBB	; 187
    14b4:	82 dd       	rcall	.-1276   	; 0xfba <send_byte(unsigned char)>
    14b6:	89 2b       	or	r24, r25
    14b8:	09 f0       	breq	.+2      	; 0x14bc <set_lock()+0x18>
    14ba:	f3 cd       	rjmp	.-1050   	; 0x10a2 <send_next()>
    14bc:	08 95       	ret

000014be <translate()>:
_Z9translatev():
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <_tail>
    14c6:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_head>
    14ca:	8e 17       	cp	r24, r30
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <translate()+0x12>
    14ce:	c9 c0       	rjmp	.+402    	; 0x1662 <translate()+0x1a4>
    14d0:	ef 5f       	subi	r30, 0xFF	; 255
    14d2:	e8 30       	cpi	r30, 0x08	; 8
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <translate()+0x1a>
    14d6:	e0 e0       	ldi	r30, 0x00	; 0
    14d8:	e0 93 b8 01 	sts	0x01B8, r30	; 0x8001b8 <_tail>
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	e6 54       	subi	r30, 0x46	; 70
    14e4:	fe 4f       	sbci	r31, 0xFE	; 254
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	20 81       	ld	r18, Z
    14ec:	31 81       	ldd	r19, Z+1	; 0x01
    14ee:	23 2f       	mov	r18, r19
    14f0:	32 fd       	sbrc	r19, 2
    14f2:	ba c0       	rjmp	.+372    	; 0x1668 <translate()+0x1aa>
    14f4:	38 2f       	mov	r19, r24
    14f6:	8a 3a       	cpi	r24, 0xAA	; 170
    14f8:	20 f0       	brcs	.+8      	; 0x1502 <translate()+0x44>
    14fa:	4f e0       	ldi	r20, 0x0F	; 15
    14fc:	48 0f       	add	r20, r24
    14fe:	42 30       	cpi	r20, 0x02	; 2
    1500:	10 f4       	brcc	.+4      	; 0x1506 <translate()+0x48>
    1502:	24 ff       	sbrs	r18, 4
    1504:	04 c0       	rjmp	.+8      	; 0x150e <translate()+0x50>
    1506:	99 27       	eor	r25, r25
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret
    150e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <PS2_keystatus>
    1512:	25 ff       	sbrs	r18, 5
    1514:	1a c0       	rjmp	.+52     	; 0x154a <translate()+0x8c>
    1516:	80 68       	ori	r24, 0x80	; 128
    1518:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <PS2_keystatus>
    151c:	d0 e0       	ldi	r29, 0x00	; 0
    151e:	c0 e0       	ldi	r28, 0x00	; 0
    1520:	23 ff       	sbrs	r18, 3
    1522:	20 c0       	rjmp	.+64     	; 0x1564 <translate()+0xa6>
    1524:	fe 01       	movw	r30, r28
    1526:	e7 5c       	subi	r30, 0xC7	; 199
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	e4 91       	lpm	r30, Z
    152c:	3e 13       	cpse	r19, r30
    152e:	0f c0       	rjmp	.+30     	; 0x154e <translate()+0x90>
    1530:	c6 5c       	subi	r28, 0xC6	; 198
    1532:	df 4f       	sbci	r29, 0xFF	; 255
    1534:	fe 01       	movw	r30, r28
    1536:	c4 91       	lpm	r28, Z
    1538:	d0 e0       	ldi	r29, 0x00	; 0
    153a:	20 97       	sbiw	r28, 0x00	; 0
    153c:	e1 f4       	brne	.+56     	; 0x1576 <translate()+0xb8>
    153e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <PS2_keystatus>
    1542:	9e 01       	movw	r18, r28
    1544:	38 2b       	or	r19, r24
    1546:	c9 01       	movw	r24, r18
    1548:	df cf       	rjmp	.-66     	; 0x1508 <translate()+0x4a>
    154a:	8f 77       	andi	r24, 0x7F	; 127
    154c:	e5 cf       	rjmp	.-54     	; 0x1518 <translate()+0x5a>
    154e:	22 96       	adiw	r28, 0x02	; 2
    1550:	c2 35       	cpi	r28, 0x52	; 82
    1552:	d1 05       	cpc	r29, r1
    1554:	39 f7       	brne	.-50     	; 0x1524 <translate()+0x66>
    1556:	d0 e0       	ldi	r29, 0x00	; 0
    1558:	c0 e0       	ldi	r28, 0x00	; 0
    155a:	f1 cf       	rjmp	.-30     	; 0x153e <translate()+0x80>
    155c:	22 96       	adiw	r28, 0x02	; 2
    155e:	ce 3d       	cpi	r28, 0xDE	; 222
    1560:	d1 05       	cpc	r29, r1
    1562:	c9 f3       	breq	.-14     	; 0x1556 <translate()+0x98>
    1564:	fe 01       	movw	r30, r28
    1566:	e5 57       	subi	r30, 0x75	; 117
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	e4 91       	lpm	r30, Z
    156c:	3e 13       	cpse	r19, r30
    156e:	f6 cf       	rjmp	.-20     	; 0x155c <translate()+0x9e>
    1570:	c4 57       	subi	r28, 0x74	; 116
    1572:	df 4f       	sbci	r29, 0xFF	; 255
    1574:	df cf       	rjmp	.-66     	; 0x1534 <translate()+0x76>
    1576:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <PS2_keystatus>
    157a:	fe 01       	movw	r30, r28
    157c:	c4 30       	cpi	r28, 0x04	; 4
    157e:	d1 05       	cpc	r29, r1
    1580:	08 f0       	brcs	.+2      	; 0x1584 <translate()+0xc6>
    1582:	45 c0       	rjmp	.+138    	; 0x160e <translate()+0x150>
    1584:	ea 56       	subi	r30, 0x6A	; 106
    1586:	fe 4f       	sbci	r31, 0xFE	; 254
    1588:	97 ff       	sbrs	r25, 7
    158a:	04 c0       	rjmp	.+8      	; 0x1594 <translate()+0xd6>
    158c:	10 82       	st	Z, r1
    158e:	cb eb       	ldi	r28, 0xBB	; 187
    1590:	d0 e0       	ldi	r29, 0x00	; 0
    1592:	22 c0       	rjmp	.+68     	; 0x15d8 <translate()+0x11a>
    1594:	80 81       	ld	r24, Z
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	d1 f3       	breq	.-12     	; 0x158e <translate()+0xd0>
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	80 83       	st	Z, r24
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	c2 30       	cpi	r28, 0x02	; 2
    15a2:	d1 05       	cpc	r29, r1
    15a4:	51 f0       	breq	.+20     	; 0x15ba <translate()+0xfc>
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	c3 30       	cpi	r28, 0x03	; 3
    15aa:	d1 05       	cpc	r29, r1
    15ac:	31 f4       	brne	.+12     	; 0x15ba <translate()+0xfc>
    15ae:	94 ff       	sbrs	r25, 4
    15b0:	28 c0       	rjmp	.+80     	; 0x1602 <translate()+0x144>
    15b2:	9f 7e       	andi	r25, 0xEF	; 239
    15b4:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <PS2_keystatus>
    15b8:	84 e0       	ldi	r24, 0x04	; 4
    15ba:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <PS2_led_lock>
    15be:	29 2f       	mov	r18, r25
    15c0:	28 23       	and	r18, r24
    15c2:	09 f1       	breq	.+66     	; 0x1606 <translate()+0x148>
    15c4:	80 95       	com	r24
    15c6:	89 23       	and	r24, r25
    15c8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <PS2_led_lock>
    15cc:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <PS2_keystatus>
    15d0:	80 68       	ori	r24, 0x80	; 128
    15d2:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <PS2_keystatus>
    15d6:	66 df       	rcall	.-308    	; 0x14a4 <set_lock()>
    15d8:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <PS2_keystatus>
    15dc:	87 ff       	sbrs	r24, 7
    15de:	04 c0       	rjmp	.+8      	; 0x15e8 <translate()+0x12a>
    15e0:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <_mode>
    15e4:	93 fd       	sbrc	r25, 3
    15e6:	43 c0       	rjmp	.+134    	; 0x166e <translate()+0x1b0>
    15e8:	9e 01       	movw	r18, r28
    15ea:	20 52       	subi	r18, 0x20	; 32
    15ec:	31 09       	sbc	r19, r1
    15ee:	21 34       	cpi	r18, 0x41	; 65
    15f0:	31 05       	cpc	r19, r1
    15f2:	a8 f1       	brcs	.+106    	; 0x165e <translate()+0x1a0>
    15f4:	cb 38       	cpi	r28, 0x8B	; 139
    15f6:	d1 05       	cpc	r29, r1
    15f8:	91 f1       	breq	.+100    	; 0x165e <translate()+0x1a0>
    15fa:	81 60       	ori	r24, 0x01	; 1
    15fc:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <PS2_keystatus>
    1600:	9e cf       	rjmp	.-196    	; 0x153e <translate()+0x80>
    1602:	90 61       	ori	r25, 0x10	; 16
    1604:	d7 cf       	rjmp	.-82     	; 0x15b4 <translate()+0xf6>
    1606:	89 2b       	or	r24, r25
    1608:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <PS2_led_lock>
    160c:	e4 cf       	rjmp	.-56     	; 0x15d6 <translate()+0x118>
    160e:	36 97       	sbiw	r30, 0x06	; 6
    1610:	e8 30       	cpi	r30, 0x08	; 8
    1612:	f1 05       	cpc	r31, r1
    1614:	98 f4       	brcc	.+38     	; 0x163c <translate()+0x17e>
    1616:	ea 5d       	subi	r30, 0xDA	; 218
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	e4 91       	lpm	r30, Z
    161c:	97 ff       	sbrs	r25, 7
    161e:	05 c0       	rjmp	.+10     	; 0x162a <translate()+0x16c>
    1620:	e0 95       	com	r30
    1622:	e9 23       	and	r30, r25
    1624:	e0 93 95 01 	sts	0x0195, r30	; 0x800195 <PS2_keystatus>
    1628:	d7 cf       	rjmp	.-82     	; 0x15d8 <translate()+0x11a>
    162a:	8e 2f       	mov	r24, r30
    162c:	89 23       	and	r24, r25
    162e:	21 f0       	breq	.+8      	; 0x1638 <translate()+0x17a>
    1630:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_mode>
    1634:	87 fd       	sbrc	r24, 7
    1636:	ab cf       	rjmp	.-170    	; 0x158e <translate()+0xd0>
    1638:	e9 2b       	or	r30, r25
    163a:	f4 cf       	rjmp	.-24     	; 0x1624 <translate()+0x166>
    163c:	fe 01       	movw	r30, r28
    163e:	b0 97       	sbiw	r30, 0x20	; 32
    1640:	eb 30       	cpi	r30, 0x0B	; 11
    1642:	f1 05       	cpc	r31, r1
    1644:	48 f6       	brcc	.-110    	; 0x15d8 <translate()+0x11a>
    1646:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <PS2_led_lock>
    164a:	81 ff       	sbrs	r24, 1
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <translate()+0x194>
    164e:	96 ff       	sbrs	r25, 6
    1650:	c3 cf       	rjmp	.-122    	; 0x15d8 <translate()+0x11a>
    1652:	e2 5d       	subi	r30, 0xD2	; 210
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	e4 91       	lpm	r30, Z
    1658:	ce 2f       	mov	r28, r30
    165a:	d0 e0       	ldi	r29, 0x00	; 0
    165c:	bd cf       	rjmp	.-134    	; 0x15d8 <translate()+0x11a>
    165e:	8e 7f       	andi	r24, 0xFE	; 254
    1660:	cd cf       	rjmp	.-102    	; 0x15fc <translate()+0x13e>
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	50 cf       	rjmp	.-352    	; 0x1508 <translate()+0x4a>
    1668:	86 e0       	ldi	r24, 0x06	; 6
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	4d cf       	rjmp	.-358    	; 0x1508 <translate()+0x4a>
    166e:	8b eb       	ldi	r24, 0xBB	; 187
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	4a cf       	rjmp	.-364    	; 0x1508 <translate()+0x4a>

00001674 <PS2KeyAdvanced::setNoBreak(unsigned char)>:
_ZN14PS2KeyAdvanced10setNoBreakEh():
    1674:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_mode>
    1678:	87 7f       	andi	r24, 0xF7	; 247
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	61 11       	cpse	r22, r1
    167e:	98 e0       	ldi	r25, 0x08	; 8
    1680:	89 2b       	or	r24, r25
    1682:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_mode>
    1686:	08 95       	ret

00001688 <PS2KeyAdvanced::setNoRepeat(unsigned char)>:
_ZN14PS2KeyAdvanced11setNoRepeatEh():
    1688:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_mode>
    168c:	8f 77       	andi	r24, 0x7F	; 127
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	61 11       	cpse	r22, r1
    1692:	90 e8       	ldi	r25, 0x80	; 128
    1694:	89 2b       	or	r24, r25
    1696:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_mode>
    169a:	08 95       	ret

0000169c <PS2KeyAdvanced::available()>:
_ZN14PS2KeyAdvanced9availableEv():
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:944
            1 to buffer size less 1 as 1 to full buffer

  As with other ring buffers here when pointers match
  buffer empty so cannot actually hold buffer size values  */
uint8_t PS2KeyAdvanced::available( )
{
    169c:	cf 93       	push	r28
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:949
int8_t  i, idx;
uint16_t data;

// check output queue
i = _key_head - _key_tail;
    169e:	c0 91 9f 01 	lds	r28, 0x019F	; 0x80019f <_key_head>
    16a2:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_key_tail>
    16a6:	c8 1b       	sub	r28, r24
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:950
if( i < 0 )
    16a8:	c7 fd       	sbrc	r28, 7
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:951
  i += _KEY_BUFF_SIZE;
    16aa:	cc 5f       	subi	r28, 0xFC	; 252
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:952
while( i < ( _KEY_BUFF_SIZE - 1 ) ) // process if not full
    16ac:	c3 30       	cpi	r28, 0x03	; 3
    16ae:	f4 f4       	brge	.+60     	; 0x16ec <PS2KeyAdvanced::available()+0x50>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:953
  if( key_available( ) )         // not check for more keys to process
    16b0:	f1 de       	rcall	.-542    	; 0x1494 <key_available()>
    16b2:	88 23       	and	r24, r24
    16b4:	d9 f0       	breq	.+54     	; 0x16ec <PS2KeyAdvanced::available()+0x50>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:955
    {
    data = translate( );         // get next translated key
    16b6:	03 df       	rcall	.-506    	; 0x14be <translate()>
    16b8:	9c 01       	movw	r18, r24
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:956
    if( data == 0 )             // unless in buffer is empty
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	b9 f0       	breq	.+46     	; 0x16ec <PS2KeyAdvanced::available()+0x50>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:958
      break;
    if( ( data & 0xFF ) != PS2_KEY_IGNORE
    16be:	99 27       	eor	r25, r25
    16c0:	8b 3b       	cpi	r24, 0xBB	; 187
    16c2:	91 05       	cpc	r25, r1
    16c4:	99 f3       	breq	.-26     	; 0x16ac <PS2KeyAdvanced::available()+0x10>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:959
            && ( data & 0xFF ) > 0 )
    16c6:	89 2b       	or	r24, r25
    16c8:	89 f3       	breq	.-30     	; 0x16ac <PS2KeyAdvanced::available()+0x10>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:961
      {
      idx = _key_head + 1;         // point to next space
    16ca:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <_key_head>
    16ce:	9f 5f       	subi	r25, 0xFF	; 255
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:962
      if( idx >= _KEY_BUFF_SIZE )  // loop to front if necessary
    16d0:	94 30       	cpi	r25, 0x04	; 4
    16d2:	0c f0       	brlt	.+2      	; 0x16d6 <PS2KeyAdvanced::available()+0x3a>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:963
        idx = 0;
    16d4:	90 e0       	ldi	r25, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:964
      _key_buffer[ idx ] = data; // save the data to out buffer
    16d6:	e9 2f       	mov	r30, r25
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 0b       	sbc	r31, r31
    16dc:	e0 56       	subi	r30, 0x60	; 96
    16de:	fe 4f       	sbci	r31, 0xFE	; 254
    16e0:	31 83       	std	Z+1, r19	; 0x01
    16e2:	20 83       	st	Z, r18
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:965
      _key_head = idx;
    16e4:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <_key_head>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:966
      i++;                      // update count
    16e8:	cf 5f       	subi	r28, 0xFF	; 255
    16ea:	e0 cf       	rjmp	.-64     	; 0x16ac <PS2KeyAdvanced::available()+0x10>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:972
      }
    }
  else
    break;                      // exit nothing coming in
return uint8_t( i );
}
    16ec:	8c 2f       	mov	r24, r28
    16ee:	cf 91       	pop	r28
    16f0:	08 95       	ret

000016f2 <PS2KeyAdvanced::read()>:
_ZN14PS2KeyAdvanced4readEv():
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:982
uint16_t PS2KeyAdvanced::read( )
{
uint16_t result;
uint8_t idx;

if( ( result = available( ) ) )
    16f2:	d4 df       	rcall	.-88     	; 0x169c <PS2KeyAdvanced::available()>
    16f4:	88 23       	and	r24, r24
    16f6:	81 f0       	breq	.+32     	; 0x1718 <PS2KeyAdvanced::read()+0x26>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:984
  {
  idx = _key_tail;
    16f8:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <_key_tail>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:985
  idx++;
    16fc:	ef 5f       	subi	r30, 0xFF	; 255
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:986
  if( idx >= _KEY_BUFF_SIZE )  // loop to front if necessary
    16fe:	e4 30       	cpi	r30, 0x04	; 4
    1700:	08 f0       	brcs	.+2      	; 0x1704 <PS2KeyAdvanced::read()+0x12>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:987
    idx = 0;
    1702:	e0 e0       	ldi	r30, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:988
  _key_tail = idx;
    1704:	e0 93 9e 01 	sts	0x019E, r30	; 0x80019e <_key_tail>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:989
  result = _key_buffer[ idx ];
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	e0 56       	subi	r30, 0x60	; 96
    1710:	fe 4f       	sbci	r31, 0xFE	; 254
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	08 95       	ret
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	80 e0       	ldi	r24, 0x00	; 0
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:992
  }
return result;
}
    171c:	08 95       	ret

0000171e <PS2KeyAdvanced::PS2KeyAdvanced()>:
_ZN14PS2KeyAdvancedC2Ev():
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:998


PS2KeyAdvanced::PS2KeyAdvanced( )
{
// nothing to do here, begin( ) does it all
}
    171e:	08 95       	ret

00001720 <PS2KeyAdvanced::begin(unsigned char, unsigned char)>:
_ZN14PS2KeyAdvanced5beginEhh():
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1003


/* instantiate class for keyboard  */
void PS2KeyAdvanced::begin( uint8_t data_pin, uint8_t irq_pin )
{
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	d6 2f       	mov	r29, r22
    1726:	c4 2f       	mov	r28, r20
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1005
/* PS2 variables reset */
ps2_reset( );
    1728:	5d dd       	rcall	.-1350   	; 0x11e4 <ps2_reset()>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1007

PS2_DataPin = data_pin;
    172a:	d0 93 9c 01 	sts	0x019C, r29	; 0x80019c <PS2_DataPin>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1008
PS2_IrqPin = irq_pin;
    172e:	c0 93 9b 01 	sts	0x019B, r28	; 0x80019b <PS2_IrqPin>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1011

// initialize the pins
pininput( PS2_IrqPin );            /* Setup Clock pin */
    1732:	8c 2f       	mov	r24, r28
    1734:	59 dc       	rcall	.-1870   	; 0xfe8 <pininput(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1012
pininput( PS2_DataPin );           /* Setup Data pin */
    1736:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <PS2_DataPin>
    173a:	56 dc       	rcall	.-1876   	; 0xfe8 <pininput(unsigned char)>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1015

// Start interrupt handler
attachInterrupt( digitalPinToInterrupt( irq_pin ), ps2interrupt, FALLING );
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	c2 30       	cpi	r28, 0x02	; 2
    1740:	21 f0       	breq	.+8      	; 0x174a <PS2KeyAdvanced::begin(unsigned char, unsigned char)+0x2a>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1015 (discriminator 1)
    1742:	8f ef       	ldi	r24, 0xFF	; 255
    1744:	c3 30       	cpi	r28, 0x03	; 3
    1746:	09 f4       	brne	.+2      	; 0x174a <PS2KeyAdvanced::begin(unsigned char, unsigned char)+0x2a>
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1015
    1748:	81 e0       	ldi	r24, 0x01	; 1
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1015 (discriminator 8)
    174a:	42 e0       	ldi	r20, 0x02	; 2
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	6a e7       	ldi	r22, 0x7A	; 122
    1750:	79 e0       	ldi	r23, 0x09	; 9
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1016 (discriminator 8)
}
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
/Users/moritz/Documents/Arduino/libraries/PS2KeyAdvanced/src/PS2KeyAdvanced.cpp:1015 (discriminator 8)
// initialize the pins
pininput( PS2_IrqPin );            /* Setup Clock pin */
pininput( PS2_DataPin );           /* Setup Data pin */

// Start interrupt handler
attachInterrupt( digitalPinToInterrupt( irq_pin ), ps2interrupt, FALLING );
    1756:	01 c0       	rjmp	.+2      	; 0x175a <attachInterrupt>

00001758 <nothing>:
nothing():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
    1758:	08 95       	ret

0000175a <attachInterrupt>:
attachInterrupt():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:64
  #endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	88 f4       	brcc	.+34     	; 0x1780 <attachInterrupt+0x26>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:66
  {
    intFunc[interruptNum] = userFunc;
    175e:	e8 2f       	mov	r30, r24
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	ee 0f       	add	r30, r30
    1764:	ff 1f       	adc	r31, r31
    1766:	ee 59       	subi	r30, 0x9E	; 158
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	71 83       	std	Z+1, r23	; 0x01
    176c:	60 83       	st	Z, r22
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:74
    // edge, or falling edge).  The mode constants were chosen to correspond
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.

    // Enable interrupt
    switch(interruptNum)
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	41 f0       	breq	.+16     	; 0x1782 <attachInterrupt+0x28>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:189

// ATmega8, ATmega8515, ATmega8535, ATmega16, ATmega32, ATmega162
      #elif defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) \
      || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega162__)
        case 0:
          MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1772:	85 b7       	in	r24, 0x35	; 53
    1774:	8c 7f       	andi	r24, 0xFC	; 252
    1776:	48 2b       	or	r20, r24
    1778:	45 bf       	out	0x35, r20	; 53
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:190
          GICR |= (1 << INT0);
    177a:	8b b7       	in	r24, 0x3b	; 59
    177c:	80 64       	ori	r24, 0x40	; 64
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:194
          break;
        case 1:
          MCUCR = (MCUCR & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
          GICR |= (1 << INT1);
    177e:	8b bf       	out	0x3b, r24	; 59
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:261
          break;

      #endif
    }
  }
}
    1780:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:193
        case 0:
          MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
          GICR |= (1 << INT0);
          break;
        case 1:
          MCUCR = (MCUCR & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1782:	85 b7       	in	r24, 0x35	; 53
    1784:	83 7f       	andi	r24, 0xF3	; 243
    1786:	44 0f       	add	r20, r20
    1788:	55 1f       	adc	r21, r21
    178a:	44 0f       	add	r20, r20
    178c:	55 1f       	adc	r21, r21
    178e:	48 2b       	or	r20, r24
    1790:	45 bf       	out	0x35, r20	; 53
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:194
          GICR |= (1 << INT1);
    1792:	8b b7       	in	r24, 0x3b	; 59
    1794:	80 68       	ori	r24, 0x80	; 128
    1796:	f3 cf       	rjmp	.-26     	; 0x177e <attachInterrupt+0x24>

00001798 <detachInterrupt>:
detachInterrupt():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:265
  }
}

void detachInterrupt(uint8_t interruptNum)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
    1798:	82 30       	cpi	r24, 0x02	; 2
    179a:	78 f4       	brcc	.+30     	; 0x17ba <detachInterrupt+0x22>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:268
  {
    // Disable interrupt
    switch(interruptNum)
    179c:	e8 2f       	mov	r30, r24
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	61 f0       	breq	.+24     	; 0x17bc <detachInterrupt+0x24>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:356

// ATmega8, ATmega8515, ATmega8535, ATmega16, ATmega32, ATmega162
      #elif defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) \
      || defined(__AVR_ATmega16__)   || defined(__AVR_ATmega32__)   || defined(__AVR_ATmega162__)
        case 0:
          GICR &= ~(1 << INT0);
    17a4:	8b b7       	in	r24, 0x3b	; 59
    17a6:	8f 7b       	andi	r24, 0xBF	; 191
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:359
          break;
        case 1:
          GICR &= ~(1 << INT1);
    17a8:	8b bf       	out	0x3b, r24	; 59
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:414
          EIMSK &= ~(1 << INT0);
          break;

      #endif
    }
    intFunc[interruptNum] = nothing;
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	ee 59       	subi	r30, 0x9E	; 158
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	8c ea       	ldi	r24, 0xAC	; 172
    17b4:	9b e0       	ldi	r25, 0x0B	; 11
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:416
  }
}
    17ba:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:359
      || defined(__AVR_ATmega16__)   || defined(__AVR_ATmega32__)   || defined(__AVR_ATmega162__)
        case 0:
          GICR &= ~(1 << INT0);
          break;
        case 1:
          GICR &= ~(1 << INT1);
    17bc:	8b b7       	in	r24, 0x3b	; 59
    17be:	8f 77       	andi	r24, 0x7F	; 127
    17c0:	f3 cf       	rjmp	.-26     	; 0x17a8 <detachInterrupt+0x10>

000017c2 <__vector_1>:
__vector_1():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    17c2:	1f 92       	push	r1
    17c4:	0f 92       	push	r0
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	0f 92       	push	r0
    17ca:	11 24       	eor	r1, r1
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <intFunc>
    17e8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <intFunc+0x1>
    17ec:	09 95       	icall
    17ee:	ff 91       	pop	r31
    17f0:	ef 91       	pop	r30
    17f2:	bf 91       	pop	r27
    17f4:	af 91       	pop	r26
    17f6:	9f 91       	pop	r25
    17f8:	8f 91       	pop	r24
    17fa:	7f 91       	pop	r23
    17fc:	6f 91       	pop	r22
    17fe:	5f 91       	pop	r21
    1800:	4f 91       	pop	r20
    1802:	3f 91       	pop	r19
    1804:	2f 91       	pop	r18
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

00001810 <__vector_2>:
__vector_2():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/WInterrupts.c:489
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	2f 93       	push	r18
    181c:	3f 93       	push	r19
    181e:	4f 93       	push	r20
    1820:	5f 93       	push	r21
    1822:	6f 93       	push	r22
    1824:	7f 93       	push	r23
    1826:	8f 93       	push	r24
    1828:	9f 93       	push	r25
    182a:	af 93       	push	r26
    182c:	bf 93       	push	r27
    182e:	ef 93       	push	r30
    1830:	ff 93       	push	r31
    1832:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <intFunc+0x2>
    1836:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <intFunc+0x3>
    183a:	09 95       	icall
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <__vector_9>:
__vector_9():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:406
    while (ms > 0UL && (micros() - start) >= 1000UL) {
      ms--;
      start += 1000UL;
    }
  }
}
    185e:	1f 92       	push	r1
    1860:	0f 92       	push	r0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	0f 92       	push	r0
    1866:	11 24       	eor	r1, r1
    1868:	2f 93       	push	r18
    186a:	3f 93       	push	r19
    186c:	8f 93       	push	r24
    186e:	9f 93       	push	r25
    1870:	af 93       	push	r26
    1872:	bf 93       	push	r27
    1874:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <timer0_millis>
    1878:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <timer0_millis+0x1>
    187c:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <timer0_millis+0x2>
    1880:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <timer0_millis+0x3>
    1884:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <timer0_fract>
    1888:	23 e0       	ldi	r18, 0x03	; 3
    188a:	23 0f       	add	r18, r19
    188c:	2d 37       	cpi	r18, 0x7D	; 125
    188e:	68 f1       	brcs	.+90     	; 0x18ea <__vector_9+0x8c>
    1890:	26 e8       	ldi	r18, 0x86	; 134
    1892:	23 0f       	add	r18, r19
    1894:	02 96       	adiw	r24, 0x02	; 2
    1896:	a1 1d       	adc	r26, r1
    1898:	b1 1d       	adc	r27, r1
    189a:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <timer0_fract>
    189e:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <timer0_millis>
    18a2:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <timer0_millis+0x1>
    18a6:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <timer0_millis+0x2>
    18aa:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <timer0_millis+0x3>
    18ae:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <timer0_overflow_count>
    18b2:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <timer0_overflow_count+0x1>
    18b6:	a0 91 cd 01 	lds	r26, 0x01CD	; 0x8001cd <timer0_overflow_count+0x2>
    18ba:	b0 91 ce 01 	lds	r27, 0x01CE	; 0x8001ce <timer0_overflow_count+0x3>
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	a1 1d       	adc	r26, r1
    18c2:	b1 1d       	adc	r27, r1
    18c4:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <timer0_overflow_count>
    18c8:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <timer0_overflow_count+0x1>
    18cc:	a0 93 cd 01 	sts	0x01CD, r26	; 0x8001cd <timer0_overflow_count+0x2>
    18d0:	b0 93 ce 01 	sts	0x01CE, r27	; 0x8001ce <timer0_overflow_count+0x3>
    18d4:	bf 91       	pop	r27
    18d6:	af 91       	pop	r26
    18d8:	9f 91       	pop	r25
    18da:	8f 91       	pop	r24
    18dc:	3f 91       	pop	r19
    18de:	2f 91       	pop	r18
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	0f 90       	pop	r0
    18e6:	1f 90       	pop	r1
    18e8:	18 95       	reti
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	a1 1d       	adc	r26, r1
    18ee:	b1 1d       	adc	r27, r1
    18f0:	d4 cf       	rjmp	.-88     	; 0x189a <__vector_9+0x3c>

000018f2 <millis>:
millis():
    18f2:	2f b7       	in	r18, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <timer0_millis>
    18fa:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <timer0_millis+0x1>
    18fe:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <timer0_millis+0x2>
    1902:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <timer0_millis+0x3>
    1906:	2f bf       	out	0x3f, r18	; 63
    1908:	08 95       	ret

0000190a <delayMicroseconds>:
delayMicroseconds():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    190a:	82 30       	cpi	r24, 0x02	; 2
    190c:	91 05       	cpc	r25, r1
    190e:	38 f0       	brcs	.+14     	; 0x191e <delayMicroseconds+0x14>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    1918:	05 97       	sbiw	r24, 0x05	; 5
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <delayMicroseconds+0x10>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    191e:	08 95       	ret

00001920 <init>:
init():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1920:	78 94       	sei
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
    1922:	83 b7       	in	r24, 0x33	; 51
    1924:	83 60       	ori	r24, 0x03	; 3
    1926:	83 bf       	out	0x33, r24	; 51
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    1928:	89 b7       	in	r24, 0x39	; 57
    192a:	81 60       	ori	r24, 0x01	; 1
    192c:	89 bf       	out	0x39, r24	; 57
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	8e bd       	out	0x2e, r24	; 46
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1932:	8e b5       	in	r24, 0x2e	; 46
    1934:	81 60       	ori	r24, 0x01	; 1
    1936:	8e bd       	out	0x2e, r24	; 46
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1938:	8f b5       	in	r24, 0x2f	; 47
    193a:	81 60       	ori	r24, 0x01	; 1
    193c:	8f bd       	out	0x2f, r24	; 47
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    193e:	85 b5       	in	r24, 0x25	; 37
    1940:	84 60       	ori	r24, 0x04	; 4
    1942:	85 bd       	out	0x25, r24	; 37
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    1944:	85 b5       	in	r24, 0x25	; 37
    1946:	80 64       	ori	r24, 0x40	; 64
    1948:	85 bd       	out	0x25, r24	; 37
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    194a:	87 e8       	ldi	r24, 0x87	; 135
    194c:	86 b9       	out	0x06, r24	; 6
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
    194e:	1a b8       	out	0x0a, r1	; 10
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1072
#elif defined(UCSR0B)
  UCSR0B = 0;
#endif
}
    1950:	08 95       	ret

00001952 <analogWrite>:
analogWrite():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:95
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	18 2f       	mov	r17, r24
    195a:	eb 01       	movw	r28, r22
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	41 d0       	rcall	.+130    	; 0x19e2 <pinMode>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:102
  if (val == 0)
    1960:	20 97       	sbiw	r28, 0x00	; 0
    1962:	31 f4       	brne	.+12     	; 0x1970 <analogWrite+0x1e>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:104
  {
    digitalWrite(pin, LOW);
    1964:	60 e0       	ldi	r22, 0x00	; 0
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    1966:	81 2f       	mov	r24, r17
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    196e:	75 c0       	rjmp	.+234    	; 0x1a5a <digitalWrite>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:106
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
    1970:	cf 3f       	cpi	r28, 0xFF	; 255
    1972:	d1 05       	cpc	r29, r1
    1974:	11 f4       	brne	.+4      	; 0x197a <analogWrite+0x28>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, HIGH);
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	f6 cf       	rjmp	.-20     	; 0x1966 <analogWrite+0x14>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:112
  }
  else
  {
    switch(digitalPinToTimer(pin))
    197a:	e1 2f       	mov	r30, r17
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	e7 59       	subi	r30, 0x97	; 151
    1980:	fe 4f       	sbci	r31, 0xFE	; 254
    1982:	e4 91       	lpm	r30, Z
    1984:	e5 30       	cpi	r30, 0x05	; 5
    1986:	69 f0       	breq	.+26     	; 0x19a2 <analogWrite+0x50>
    1988:	e7 30       	cpi	r30, 0x07	; 7
    198a:	89 f0       	breq	.+34     	; 0x19ae <analogWrite+0x5c>
    198c:	e4 30       	cpi	r30, 0x04	; 4
    198e:	a1 f4       	brne	.+40     	; 0x19b8 <analogWrite+0x66>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
    1990:	8f b5       	in	r24, 0x2f	; 47
    1992:	80 68       	ori	r24, 0x80	; 128
    1994:	8f bd       	out	0x2f, r24	; 47
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
    1996:	db bd       	out	0x2b, r29	; 43
    1998:	ca bd       	out	0x2a, r28	; 42
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
    19a2:	8f b5       	in	r24, 0x2f	; 47
    19a4:	80 62       	ori	r24, 0x20	; 32
    19a6:	8f bd       	out	0x2f, r24	; 47
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
    19a8:	d9 bd       	out	0x29, r29	; 41
    19aa:	c8 bd       	out	0x28, r28	; 40
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:158
        break;
    19ac:	f6 cf       	rjmp	.-20     	; 0x199a <analogWrite+0x48>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:172
      #endif

      #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        // connect pwm to pin on timer 2
        TCCR2 |= _BV(COM21);
    19ae:	85 b5       	in	r24, 0x25	; 37
    19b0:	80 62       	ori	r24, 0x20	; 32
    19b2:	85 bd       	out	0x25, r24	; 37
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:173
        OCR2 = val; // set pwm duty
    19b4:	c3 bd       	out	0x23, r28	; 35
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:174
        break;
    19b6:	f1 cf       	rjmp	.-30     	; 0x199a <analogWrite+0x48>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_analog.c:292
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
    19b8:	c0 38       	cpi	r28, 0x80	; 128
    19ba:	d1 05       	cpc	r29, r1
    19bc:	e4 f6       	brge	.-72     	; 0x1976 <analogWrite+0x24>
    19be:	d2 cf       	rjmp	.-92     	; 0x1964 <analogWrite+0x12>

000019c0 <turnOffPWM>:
turnOffPWM():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    19c0:	85 30       	cpi	r24, 0x05	; 5
    19c2:	41 f0       	breq	.+16     	; 0x19d4 <turnOffPWM+0x14>
    19c4:	87 30       	cpi	r24, 0x07	; 7
    19c6:	49 f0       	breq	.+18     	; 0x19da <turnOffPWM+0x1a>
    19c8:	84 30       	cpi	r24, 0x04	; 4
    19ca:	51 f4       	brne	.+20     	; 0x19e0 <turnOffPWM+0x20>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    19cc:	8f b5       	in	r24, 0x2f	; 47
    19ce:	8f 77       	andi	r24, 0x7F	; 127
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    19d0:	8f bd       	out	0x2f, r24	; 47
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    19d2:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    19d4:	8f b5       	in	r24, 0x2f	; 47
    19d6:	8f 7d       	andi	r24, 0xDF	; 223
    19d8:	fb cf       	rjmp	.-10     	; 0x19d0 <turnOffPWM+0x10>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
    19da:	85 b5       	in	r24, 0x25	; 37
    19dc:	8f 7d       	andi	r24, 0xDF	; 223
    19de:	85 bd       	out	0x25, r24	; 37
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
    19e0:	08 95       	ret

000019e2 <pinMode>:
pinMode():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	fc 01       	movw	r30, r24
    19ea:	e0 58       	subi	r30, 0x80	; 128
    19ec:	fe 4f       	sbci	r31, 0xFE	; 254
    19ee:	24 91       	lpm	r18, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    19f0:	89 56       	subi	r24, 0x69	; 105
    19f2:	9e 4f       	sbci	r25, 0xFE	; 254
    19f4:	fc 01       	movw	r30, r24
    19f6:	84 91       	lpm	r24, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    19f8:	88 23       	and	r24, r24
    19fa:	c9 f0       	breq	.+50     	; 0x1a2e <pinMode+0x4c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	fc 01       	movw	r30, r24
    1a04:	ee 53       	subi	r30, 0x3E	; 62
    1a06:	fe 4f       	sbci	r31, 0xFE	; 254
    1a08:	a5 91       	lpm	r26, Z+
    1a0a:	b4 91       	lpm	r27, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	e8 54       	subi	r30, 0x48	; 72
    1a10:	fe 4f       	sbci	r31, 0xFE	; 254
    1a12:	c5 91       	lpm	r28, Z+
    1a14:	d4 91       	lpm	r29, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1a16:	61 11       	cpse	r22, r1
    1a18:	0d c0       	rjmp	.+26     	; 0x1a34 <pinMode+0x52>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1a1a:	9f b7       	in	r25, 0x3f	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    1a1c:	f8 94       	cli
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1a1e:	8c 91       	ld	r24, X
    1a20:	20 95       	com	r18
    1a22:	82 23       	and	r24, r18
    1a24:	8c 93       	st	X, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1a26:	88 81       	ld	r24, Y
    1a28:	28 23       	and	r18, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1a2a:	28 83       	st	Y, r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1a2c:	9f bf       	out	0x3f, r25	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1a34:	62 30       	cpi	r22, 0x02	; 2
    1a36:	51 f4       	brne	.+20     	; 0x1a4c <pinMode+0x6a>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1a38:	9f b7       	in	r25, 0x3f	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    1a3a:	f8 94       	cli
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1a3c:	3c 91       	ld	r19, X
    1a3e:	82 2f       	mov	r24, r18
    1a40:	80 95       	com	r24
    1a42:	83 23       	and	r24, r19
    1a44:	8c 93       	st	X, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1a46:	e8 81       	ld	r30, Y
    1a48:	2e 2b       	or	r18, r30
    1a4a:	ef cf       	rjmp	.-34     	; 0x1a2a <pinMode+0x48>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1a4c:	8f b7       	in	r24, 0x3f	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    1a4e:	f8 94       	cli
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1a50:	ec 91       	ld	r30, X
    1a52:	2e 2b       	or	r18, r30
    1a54:	2c 93       	st	X, r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1a56:	8f bf       	out	0x3f, r24	; 63
    1a58:	ea cf       	rjmp	.-44     	; 0x1a2e <pinMode+0x4c>

00001a5a <digitalWrite>:
digitalWrite():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	f9 01       	movw	r30, r18
    1a66:	e7 59       	subi	r30, 0x97	; 151
    1a68:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6a:	84 91       	lpm	r24, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	e0 58       	subi	r30, 0x80	; 128
    1a70:	fe 4f       	sbci	r31, 0xFE	; 254
    1a72:	d4 91       	lpm	r29, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    1a74:	f9 01       	movw	r30, r18
    1a76:	e9 56       	subi	r30, 0x69	; 105
    1a78:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7a:	c4 91       	lpm	r28, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1a7c:	cc 23       	and	r28, r28
    1a7e:	a1 f0       	breq	.+40     	; 0x1aa8 <digitalWrite+0x4e>
    1a80:	16 2f       	mov	r17, r22
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a82:	81 11       	cpse	r24, r1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1a84:	9d df       	rcall	.-198    	; 0x19c0 <turnOffPWM>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1a86:	ec 2f       	mov	r30, r28
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	ee 0f       	add	r30, r30
    1a8c:	ff 1f       	adc	r31, r31
    1a8e:	e8 54       	subi	r30, 0x48	; 72
    1a90:	fe 4f       	sbci	r31, 0xFE	; 254
    1a92:	a5 91       	lpm	r26, Z+
    1a94:	b4 91       	lpm	r27, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1a96:	8f b7       	in	r24, 0x3f	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    1a98:	f8 94       	cli
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    1a9a:	ec 91       	ld	r30, X
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1a9c:	11 11       	cpse	r17, r1
    1a9e:	08 c0       	rjmp	.+16     	; 0x1ab0 <digitalWrite+0x56>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1aa0:	d0 95       	com	r29
    1aa2:	de 23       	and	r29, r30
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1aa4:	dc 93       	st	X, r29
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1aa6:	8f bf       	out	0x3f, r24	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:212
}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1ab0:	de 2b       	or	r29, r30
    1ab2:	f8 cf       	rjmp	.-16     	; 0x1aa4 <digitalWrite+0x4a>

00001ab4 <digitalRead>:
digitalRead():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	f9 01       	movw	r30, r18
    1abe:	e7 59       	subi	r30, 0x97	; 151
    1ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac2:	84 91       	lpm	r24, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    1ac4:	f9 01       	movw	r30, r18
    1ac6:	e0 58       	subi	r30, 0x80	; 128
    1ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aca:	d4 91       	lpm	r29, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    1acc:	f9 01       	movw	r30, r18
    1ace:	e9 56       	subi	r30, 0x69	; 105
    1ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad2:	c4 91       	lpm	r28, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    1ad4:	cc 23       	and	r28, r28
    1ad6:	99 f0       	breq	.+38     	; 0x1afe <digitalRead+0x4a>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ad8:	81 11       	cpse	r24, r1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1ada:	72 df       	rcall	.-284    	; 0x19c0 <turnOffPWM>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    1adc:	ec 2f       	mov	r30, r28
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	e2 55       	subi	r30, 0x52	; 82
    1ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae8:	a5 91       	lpm	r26, Z+
    1aea:	b4 91       	lpm	r27, Z
    1aec:	ec 91       	ld	r30, X
    1aee:	ed 23       	and	r30, r29
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <digitalRead+0x44>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	fa cf       	rjmp	.-12     	; 0x1af8 <digitalRead+0x44>

00001b04 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1b04:	fc 01       	movw	r30, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1b06:	91 8d       	ldd	r25, Z+25	; 0x19
    1b08:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b0a:	89 2f       	mov	r24, r25
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	80 5c       	subi	r24, 0xC0	; 192
    1b10:	9f 4f       	sbci	r25, 0xFF	; 255
    1b12:	82 1b       	sub	r24, r18
    1b14:	91 09       	sbc	r25, r1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
    1b16:	8f 73       	andi	r24, 0x3F	; 63
    1b18:	99 27       	eor	r25, r25
    1b1a:	08 95       	ret

00001b1c <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    1b1c:	fc 01       	movw	r30, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    1b1e:	91 8d       	ldd	r25, Z+25	; 0x19
    1b20:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b22:	98 17       	cp	r25, r24
    1b24:	31 f0       	breq	.+12     	; 0x1b32 <HardwareSerial::peek()+0x16>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1b26:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b28:	e8 0f       	add	r30, r24
    1b2a:	f1 1d       	adc	r31, r1
    1b2c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1b36:	08 95       	ret

00001b38 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    1b38:	fc 01       	movw	r30, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1b3a:	91 8d       	ldd	r25, Z+25	; 0x19
    1b3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b3e:	98 17       	cp	r25, r24
    1b40:	61 f0       	breq	.+24     	; 0x1b5a <HardwareSerial::read()+0x22>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1b42:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b44:	ae 0f       	add	r26, r30
    1b46:	bf 2f       	mov	r27, r31
    1b48:	b1 1d       	adc	r27, r1
    1b4a:	5d 96       	adiw	r26, 0x1d	; 29
    1b4c:	8c 91       	ld	r24, X
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1b4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b50:	9f 5f       	subi	r25, 0xFF	; 255
    1b52:	9f 73       	andi	r25, 0x3F	; 63
    1b54:	92 8f       	std	Z+26, r25	; 0x1a
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b5a:	8f ef       	ldi	r24, 0xFF	; 255
    1b5c:	9f ef       	ldi	r25, 0xFF	; 255
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1b5e:	08 95       	ret

00001b60 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1b60:	fc 01       	movw	r30, r24
    1b62:	53 8d       	ldd	r21, Z+27	; 0x1b
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    1b64:	44 8d       	ldd	r20, Z+28	; 0x1c
    1b66:	25 2f       	mov	r18, r21
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	84 2f       	mov	r24, r20
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1b6e:	82 1b       	sub	r24, r18
    1b70:	93 0b       	sbc	r25, r19
    1b72:	54 17       	cp	r21, r20
    1b74:	10 f0       	brcs	.+4      	; 0x1b7a <HardwareSerial::availableForWrite()+0x1a>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    1b76:	cf 96       	adiw	r24, 0x3f	; 63
    1b78:	08 95       	ret
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
    1b7c:	08 95       	ret

00001b7e <serialEventRun()>:
_Z14serialEventRunv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b7e:	84 e0       	ldi	r24, 0x04	; 4
    1b80:	9f e0       	ldi	r25, 0x0F	; 15
    1b82:	89 2b       	or	r24, r25
    1b84:	39 f0       	breq	.+14     	; 0x1b94 <serialEventRun()+0x16>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	89 2b       	or	r24, r25
    1b8c:	19 f0       	breq	.+6      	; 0x1b94 <serialEventRun()+0x16>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    1b8e:	3c d1       	rcall	.+632    	; 0x1e08 <Serial0_available()>
    1b90:	81 11       	cpse	r24, r1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    1b92:	36 c2       	rjmp	.+1132   	; 0x2000 <__TEXT_REGION_LENGTH__>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    1b94:	08 95       	ret

00001b96 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1b96:	fc 01       	movw	r30, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1b98:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1b9a:	a8 0f       	add	r26, r24
    1b9c:	b9 2f       	mov	r27, r25
    1b9e:	b1 1d       	adc	r27, r1
    1ba0:	a3 5a       	subi	r26, 0xA3	; 163
    1ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba4:	2c 91       	ld	r18, X
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1ba6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	8f 73       	andi	r24, 0x3F	; 63
    1bae:	99 27       	eor	r25, r25
    1bb0:	84 8f       	std	Z+28, r24	; 0x1c
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    1bb2:	a6 89       	ldd	r26, Z+22	; 0x16
    1bb4:	b7 89       	ldd	r27, Z+23	; 0x17
    1bb6:	2c 93       	st	X, r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    1bb8:	a0 89       	ldd	r26, Z+16	; 0x10
    1bba:	b1 89       	ldd	r27, Z+17	; 0x11
    1bbc:	8c 91       	ld	r24, X
    1bbe:	82 74       	andi	r24, 0x42	; 66
    1bc0:	8c 93       	st	X, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1bc2:	93 8d       	ldd	r25, Z+27	; 0x1b
    1bc4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bc6:	98 13       	cpse	r25, r24
    1bc8:	06 c0       	rjmp	.+12     	; 0x1bd6 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1bca:	02 88       	ldd	r0, Z+18	; 0x12
    1bcc:	f3 89       	ldd	r31, Z+19	; 0x13
    1bce:	e0 2d       	mov	r30, r0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	8f 7d       	andi	r24, 0xDF	; 223
    1bd4:	80 83       	st	Z, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    1bd6:	08 95       	ret

00001bd8 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	ec 01       	movw	r28, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1bde:	88 8d       	ldd	r24, Y+24	; 0x18
    1be0:	88 23       	and	r24, r24
    1be2:	b1 f0       	breq	.+44     	; 0x1c10 <HardwareSerial::flush()+0x38>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1be4:	aa 89       	ldd	r26, Y+18	; 0x12
    1be6:	bb 89       	ldd	r27, Y+19	; 0x13
    1be8:	e8 89       	ldd	r30, Y+16	; 0x10
    1bea:	f9 89       	ldd	r31, Y+17	; 0x11
    1bec:	8c 91       	ld	r24, X
    1bee:	85 fd       	sbrc	r24, 5
    1bf0:	03 c0       	rjmp	.+6      	; 0x1bf8 <HardwareSerial::flush()+0x20>
    1bf2:	80 81       	ld	r24, Z
    1bf4:	86 fd       	sbrc	r24, 6
    1bf6:	0c c0       	rjmp	.+24     	; 0x1c10 <HardwareSerial::flush()+0x38>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	07 fc       	sbrc	r0, 7
    1bfc:	f7 cf       	rjmp	.-18     	; 0x1bec <HardwareSerial::flush()+0x14>
    1bfe:	8c 91       	ld	r24, X
    1c00:	85 ff       	sbrs	r24, 5
    1c02:	f2 cf       	rjmp	.-28     	; 0x1be8 <HardwareSerial::flush()+0x10>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    1c04:	80 81       	ld	r24, Z
    1c06:	85 ff       	sbrs	r24, 5
    1c08:	ed cf       	rjmp	.-38     	; 0x1be4 <HardwareSerial::flush()+0xc>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	c4 df       	rcall	.-120    	; 0x1b96 <HardwareSerial::_tx_udr_empty_irq()>
    1c0e:	ea cf       	rjmp	.-44     	; 0x1be4 <HardwareSerial::flush()+0xc>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	ec 01       	movw	r28, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	88 8f       	std	Y+24, r24	; 0x18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1c28:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c2c:	98 13       	cpse	r25, r24
    1c2e:	19 c0       	rjmp	.+50     	; 0x1c62 <HardwareSerial::write(unsigned char)+0x4c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    1c30:	e8 89       	ldd	r30, Y+16	; 0x10
    1c32:	f9 89       	ldd	r31, Y+17	; 0x11
    1c34:	80 81       	ld	r24, Z
    1c36:	85 ff       	sbrs	r24, 5
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <HardwareSerial::write(unsigned char)+0x4c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c3a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/moritz/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c3c:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    1c3e:	ee 89       	ldd	r30, Y+22	; 0x16
    1c40:	ff 89       	ldd	r31, Y+23	; 0x17
    1c42:	60 83       	st	Z, r22
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    1c44:	e8 89       	ldd	r30, Y+16	; 0x10
    1c46:	f9 89       	ldd	r31, Y+17	; 0x11
    1c48:	80 81       	ld	r24, Z
    1c4a:	82 74       	andi	r24, 0x42	; 66
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    1c4c:	80 83       	st	Z, r24
__iRestore():
/Users/moritz/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c4e:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	ff 90       	pop	r15
    1c5e:	ef 90       	pop	r14
    1c60:	08 95       	ret
    1c62:	f6 2e       	mov	r15, r22
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1c64:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1c66:	10 e0       	ldi	r17, 0x00	; 0
    1c68:	0f 5f       	subi	r16, 0xFF	; 255
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	0f 73       	andi	r16, 0x3F	; 63
    1c6e:	11 27       	eor	r17, r17
    1c70:	e0 2e       	mov	r14, r16
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1c72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c74:	8e 11       	cpse	r24, r14
    1c76:	0b c0       	rjmp	.+22     	; 0x1c8e <HardwareSerial::write(unsigned char)+0x78>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	07 fc       	sbrc	r0, 7
    1c7c:	fa cf       	rjmp	.-12     	; 0x1c72 <HardwareSerial::write(unsigned char)+0x5c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1c7e:	e8 89       	ldd	r30, Y+16	; 0x10
    1c80:	f9 89       	ldd	r31, Y+17	; 0x11
    1c82:	80 81       	ld	r24, Z
    1c84:	85 ff       	sbrs	r24, 5
    1c86:	f5 cf       	rjmp	.-22     	; 0x1c72 <HardwareSerial::write(unsigned char)+0x5c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    1c88:	ce 01       	movw	r24, r28
    1c8a:	85 df       	rcall	.-246    	; 0x1b96 <HardwareSerial::_tx_udr_empty_irq()>
    1c8c:	f2 cf       	rjmp	.-28     	; 0x1c72 <HardwareSerial::write(unsigned char)+0x5c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1c8e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1c90:	ec 0f       	add	r30, r28
    1c92:	fd 2f       	mov	r31, r29
    1c94:	f1 1d       	adc	r31, r1
    1c96:	e3 5a       	subi	r30, 0xA3	; 163
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	f0 82       	st	Z, r15
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c9c:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/moritz/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c9e:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    1ca0:	0b 8f       	std	Y+27, r16	; 0x1b
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    1ca2:	ea 89       	ldd	r30, Y+18	; 0x12
    1ca4:	fb 89       	ldd	r31, Y+19	; 0x13
    1ca6:	80 81       	ld	r24, Z
    1ca8:	80 62       	ori	r24, 0x20	; 32
    1caa:	d0 cf       	rjmp	.-96     	; 0x1c4c <HardwareSerial::write(unsigned char)+0x36>

00001cac <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	ec 01       	movw	r28, r24
    1cbc:	6a 01       	movw	r12, r20
    1cbe:	7b 01       	movw	r14, r22
    1cc0:	12 2f       	mov	r17, r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1cc2:	e8 89       	ldd	r30, Y+16	; 0x10
    1cc4:	f9 89       	ldd	r31, Y+17	; 0x11
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	80 83       	st	Z, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1cca:	c1 14       	cp	r12, r1
    1ccc:	81 ee       	ldi	r24, 0xE1	; 225
    1cce:	d8 06       	cpc	r13, r24
    1cd0:	e1 04       	cpc	r14, r1
    1cd2:	f1 04       	cpc	r15, r1
    1cd4:	99 f0       	breq	.+38     	; 0x1cfc <HardwareSerial::begin(unsigned long, unsigned char)+0x50>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:120 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	79 e0       	ldi	r23, 0x09	; 9
    1cda:	8d e3       	ldi	r24, 0x3D	; 61
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a7 01       	movw	r20, r14
    1ce0:	96 01       	movw	r18, r12
    1ce2:	fe d0       	rcall	.+508    	; 0x1ee0 <__udivmodsi4>
    1ce4:	21 50       	subi	r18, 0x01	; 1
    1ce6:	31 09       	sbc	r19, r1
    1ce8:	41 09       	sbc	r20, r1
    1cea:	51 09       	sbc	r21, r1
    1cec:	56 95       	lsr	r21
    1cee:	47 95       	ror	r20
    1cf0:	37 95       	ror	r19
    1cf2:	27 95       	ror	r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:128 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1cf4:	21 15       	cp	r18, r1
    1cf6:	80 e1       	ldi	r24, 0x10	; 16
    1cf8:	38 07       	cpc	r19, r24
    1cfa:	90 f0       	brcs	.+36     	; 0x1d20 <HardwareSerial::begin(unsigned long, unsigned char)+0x74>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    1cfc:	e8 89       	ldd	r30, Y+16	; 0x10
    1cfe:	f9 89       	ldd	r31, Y+17	; 0x11
    1d00:	10 82       	st	Z, r1
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1d02:	60 e8       	ldi	r22, 0x80	; 128
    1d04:	74 e8       	ldi	r23, 0x84	; 132
    1d06:	8e e1       	ldi	r24, 0x1E	; 30
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a7 01       	movw	r20, r14
    1d0c:	96 01       	movw	r18, r12
    1d0e:	e8 d0       	rcall	.+464    	; 0x1ee0 <__udivmodsi4>
    1d10:	21 50       	subi	r18, 0x01	; 1
    1d12:	31 09       	sbc	r19, r1
    1d14:	41 09       	sbc	r20, r1
    1d16:	51 09       	sbc	r21, r1
    1d18:	56 95       	lsr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	37 95       	ror	r19
    1d1e:	27 95       	ror	r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1d20:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d22:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d24:	30 83       	st	Z, r19
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    1d26:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d28:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d2a:	20 83       	st	Z, r18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    1d2c:	18 8e       	std	Y+24, r1	; 0x18
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
    1d2e:	10 68       	ori	r17, 0x80	; 128
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#endif
  *_ucsrc = config;
    1d30:	ec 89       	ldd	r30, Y+20	; 0x14
    1d32:	fd 89       	ldd	r31, Y+21	; 0x15
    1d34:	10 83       	st	Z, r17
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1d36:	ea 89       	ldd	r30, Y+18	; 0x12
    1d38:	fb 89       	ldd	r31, Y+19	; 0x13
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 69       	ori	r24, 0x98	; 152
    1d3e:	80 83       	st	Z, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    1d40:	ea 89       	ldd	r30, Y+18	; 0x12
    1d42:	fb 89       	ldd	r31, Y+19	; 0x13
    1d44:	80 81       	ld	r24, Z
    1d46:	8f 7d       	andi	r24, 0xDF	; 223
    1d48:	80 83       	st	Z, r24
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:150
}
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	df 90       	pop	r13
    1d56:	cf 90       	pop	r12
    1d58:	08 95       	ret

00001d5a <__vector_11>:
__vector_11():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1d5a:	1f 92       	push	r1
    1d5c:	0f 92       	push	r0
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	0f 92       	push	r0
    1d62:	11 24       	eor	r1, r1
    1d64:	2f 93       	push	r18
    1d66:	8f 93       	push	r24
    1d68:	9f 93       	push	r25
    1d6a:	ef 93       	push	r30
    1d6c:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1d6e:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <Serial+0x10>
    1d72:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <Serial+0x11>
    1d76:	80 81       	ld	r24, Z
    1d78:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <Serial+0x16>
    1d7c:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <Serial+0x17>
    1d80:	82 fd       	sbrc	r24, 2
    1d82:	1b c0       	rjmp	.+54     	; 0x1dba <__vector_11+0x60>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1d84:	90 81       	ld	r25, Z
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1d86:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <Serial+0x19>
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	8f 73       	andi	r24, 0x3F	; 63
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1d8e:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <Serial+0x1a>
    1d92:	82 17       	cp	r24, r18
    1d94:	41 f0       	breq	.+16     	; 0x1da6 <__vector_11+0x4c>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1d96:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <Serial+0x19>
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	ec 52       	subi	r30, 0x2C	; 44
    1d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1da0:	95 8f       	std	Z+29, r25	; 0x1d
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1da2:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <Serial+0x19>
__vector_11():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1da6:	ff 91       	pop	r31
    1da8:	ef 91       	pop	r30
    1daa:	9f 91       	pop	r25
    1dac:	8f 91       	pop	r24
    1dae:	2f 91       	pop	r18
    1db0:	0f 90       	pop	r0
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	0f 90       	pop	r0
    1db6:	1f 90       	pop	r1
    1db8:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1dba:	80 81       	ld	r24, Z
__vector_11():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    1dbc:	f4 cf       	rjmp	.-24     	; 0x1da6 <__vector_11+0x4c>

00001dbe <__vector_12>:
__vector_12():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1dbe:	1f 92       	push	r1
    1dc0:	0f 92       	push	r0
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	0f 92       	push	r0
    1dc6:	11 24       	eor	r1, r1
    1dc8:	2f 93       	push	r18
    1dca:	3f 93       	push	r19
    1dcc:	4f 93       	push	r20
    1dce:	5f 93       	push	r21
    1dd0:	6f 93       	push	r22
    1dd2:	7f 93       	push	r23
    1dd4:	8f 93       	push	r24
    1dd6:	9f 93       	push	r25
    1dd8:	af 93       	push	r26
    1dda:	bf 93       	push	r27
    1ddc:	ef 93       	push	r30
    1dde:	ff 93       	push	r31
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1de0:	84 ed       	ldi	r24, 0xD4	; 212
    1de2:	91 e0       	ldi	r25, 0x01	; 1
    1de4:	d8 de       	rcall	.-592    	; 0x1b96 <HardwareSerial::_tx_udr_empty_irq()>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1de6:	ff 91       	pop	r31
    1de8:	ef 91       	pop	r30
    1dea:	bf 91       	pop	r27
    1dec:	af 91       	pop	r26
    1dee:	9f 91       	pop	r25
    1df0:	8f 91       	pop	r24
    1df2:	7f 91       	pop	r23
    1df4:	6f 91       	pop	r22
    1df6:	5f 91       	pop	r21
    1df8:	4f 91       	pop	r20
    1dfa:	3f 91       	pop	r19
    1dfc:	2f 91       	pop	r18
    1dfe:	0f 90       	pop	r0
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	0f 90       	pop	r0
    1e04:	1f 90       	pop	r1
    1e06:	18 95       	reti

00001e08 <Serial0_available()>:
_Z17Serial0_availablev():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1e08:	84 ed       	ldi	r24, 0xD4	; 212
    1e0a:	91 e0       	ldi	r25, 0x01	; 1
    1e0c:	7b de       	rcall	.-778    	; 0x1b04 <HardwareSerial::available()>
    1e0e:	21 e0       	ldi	r18, 0x01	; 1
    1e10:	89 2b       	or	r24, r25
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <Serial0_available()+0xe>
    1e14:	20 e0       	ldi	r18, 0x00	; 0
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1e16:	82 2f       	mov	r24, r18
    1e18:	08 95       	ret

00001e1a <_GLOBAL__sub_I___vector_11>:
_ZN5PrintC4Ev():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1e1a:	e4 ed       	ldi	r30, 0xD4	; 212
    1e1c:	f1 e0       	ldi	r31, 0x01	; 1
    1e1e:	13 82       	std	Z+3, r1	; 0x03
    1e20:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1e22:	88 ee       	ldi	r24, 0xE8	; 232
    1e24:	93 e0       	ldi	r25, 0x03	; 3
    1e26:	a0 e0       	ldi	r26, 0x00	; 0
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	84 83       	std	Z+4, r24	; 0x04
    1e2c:	95 83       	std	Z+5, r25	; 0x05
    1e2e:	a6 83       	std	Z+6, r26	; 0x06
    1e30:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1e32:	8a e6       	ldi	r24, 0x6A	; 106
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
    1e3a:	80 e4       	ldi	r24, 0x40	; 64
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	95 87       	std	Z+13, r25	; 0x0d
    1e40:	84 87       	std	Z+12, r24	; 0x0c
    1e42:	29 e2       	ldi	r18, 0x29	; 41
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	37 87       	std	Z+15, r19	; 0x0f
    1e48:	26 87       	std	Z+14, r18	; 0x0e
    1e4a:	2b e2       	ldi	r18, 0x2B	; 43
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	31 8b       	std	Z+17, r19	; 0x11
    1e50:	20 8b       	std	Z+16, r18	; 0x10
    1e52:	2a e2       	ldi	r18, 0x2A	; 42
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	33 8b       	std	Z+19, r19	; 0x13
    1e58:	22 8b       	std	Z+18, r18	; 0x12
    1e5a:	95 8b       	std	Z+21, r25	; 0x15
    1e5c:	84 8b       	std	Z+20, r24	; 0x14
    1e5e:	8c e2       	ldi	r24, 0x2C	; 44
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	97 8b       	std	Z+23, r25	; 0x17
    1e64:	86 8b       	std	Z+22, r24	; 0x16
    1e66:	11 8e       	std	Z+25, r1	; 0x19
    1e68:	12 8e       	std	Z+26, r1	; 0x1a
    1e6a:	13 8e       	std	Z+27, r1	; 0x1b
    1e6c:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_11():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    1e6e:	08 95       	ret

00001e70 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1e70:	af 92       	push	r10
    1e72:	bf 92       	push	r11
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	6c 01       	movw	r12, r24
    1e86:	7b 01       	movw	r14, r22
    1e88:	8b 01       	movw	r16, r22
    1e8a:	04 0f       	add	r16, r20
    1e8c:	15 1f       	adc	r17, r21
    1e8e:	eb 01       	movw	r28, r22
    1e90:	5e 01       	movw	r10, r28
    1e92:	ae 18       	sub	r10, r14
    1e94:	bf 08       	sbc	r11, r15
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    1e96:	c0 17       	cp	r28, r16
    1e98:	d1 07       	cpc	r29, r17
    1e9a:	59 f0       	breq	.+22     	; 0x1eb2 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    1e9c:	69 91       	ld	r22, Y+
    1e9e:	d6 01       	movw	r26, r12
    1ea0:	ed 91       	ld	r30, X+
    1ea2:	fc 91       	ld	r31, X
    1ea4:	01 90       	ld	r0, Z+
    1ea6:	f0 81       	ld	r31, Z
    1ea8:	e0 2d       	mov	r30, r0
    1eaa:	c6 01       	movw	r24, r12
    1eac:	09 95       	icall
    1eae:	89 2b       	or	r24, r25
    1eb0:	79 f7       	brne	.-34     	; 0x1e90 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    1eb2:	c5 01       	movw	r24, r10
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
    1ec4:	bf 90       	pop	r11
    1ec6:	af 90       	pop	r10
    1ec8:	08 95       	ret

00001eca <initVariant>:
initVariant():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1eca:	08 95       	ret

00001ecc <main>:
main():
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1ecc:	29 dd       	rcall	.-1454   	; 0x1920 <init>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    1ece:	fd df       	rcall	.-6      	; 0x1eca <initVariant>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1ed0:	46 d2       	rcall	.+1164   	; 0x235e <__TEXT_REGION_LENGTH__+0x35e>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1ed2:	cf eb       	ldi	r28, 0xBF	; 191
    1ed4:	dd e0       	ldi	r29, 0x0D	; 13
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1ed6:	f6 d4       	rcall	.+2540   	; 0x28c4 <__TEXT_REGION_LENGTH__+0x8c4>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1ed8:	20 97       	sbiw	r28, 0x00	; 0
    1eda:	e9 f3       	breq	.-6      	; 0x1ed6 <main+0xa>
/Users/moritz/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1edc:	50 de       	rcall	.-864    	; 0x1b7e <serialEventRun()>
    1ede:	fb cf       	rjmp	.-10     	; 0x1ed6 <main+0xa>

00001ee0 <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1ee0:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1ee2:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1ee4:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1ee6:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1ee8:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1eea:	0d c0       	rjmp	.+26     	; 0x1f06 <__udivmodsi4_ep>

00001eec <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1eec:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1eee:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1ef0:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1ef2:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1ef4:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1ef6:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1ef8:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1efa:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1efc:	20 f0       	brcs	.+8      	; 0x1f06 <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1efe:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1f00:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1f02:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1f04:	f5 0b       	sbc	r31, r21

00001f06 <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1f06:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1f08:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1f0a:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1f0c:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1f0e:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1f10:	69 f7       	brne	.-38     	; 0x1eec <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1f12:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1f14:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1f16:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1f18:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1f1a:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1f1c:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1f1e:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1f20:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1f22:	08 95       	ret

00001f24 <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1f24:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1f26:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1f28:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1f2a:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1f2c:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1f2e:	09 94       	ijmp

00001f30 <_exit>:
exit():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1f30:	f8 94       	cli

00001f32 <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1f32:	ff cf       	rjmp	.-2      	; 0x1f32 <__stop_program>
